<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sqrtthree</title>
  <subtitle>O ever youthful, O ever weeping.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.sqrtthree.com/"/>
  <updated>2016-06-27T15:54:51.000Z</updated>
  <id>http://blog.sqrtthree.com/</id>
  
  <author>
    <name>sqrtthree</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过 CSS 实现六边形效果</title>
    <link href="http://blog.sqrtthree.com/2016/06/27/The-hexagon-by-CSS/"/>
    <id>http://blog.sqrtthree.com/2016/06/27/The-hexagon-by-CSS/</id>
    <published>2016-06-27T15:54:51.000Z</published>
    <updated>2016-06-27T15:54:51.000Z</updated>
    
    <content type="html">&lt;p&gt;故事说起那是在一个冰冷幽暗的晚上，外面下着淅淅沥沥的小雨，我正在思考一个十分重要的人生问题：这个周末哪里去？是宅在家里写程序好呢，还是宅在家里写博客好呢？还是好呢？这时，桌面右下角很少抖动的 QQ 头像竟然动了起来，我多年的直觉告诉我，一定是有人要约我，尽管这件事情从来没有发生过。我去，了不得，竟然是万年隐身的女神主动联系我，女神一定是因为看了朋友圈的照片对我的身材陷入了深深的迷恋，说不定还要保养我呢，啊，想想都觉得好激动啊~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“哎，在干嘛呢？” (你看，果然要约我)&lt;/p&gt;
&lt;p&gt;“没事啊，在思考人生呢”&lt;/p&gt;
&lt;p&gt;“那个，我在写一个网站，需要用 CSS 实现一个六边形效果，你能帮我写个 Demo 么？”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;额。。。那个，好吧，跟想象中的有点不太一样，咦，万一这是女神对我的考验呢，说不定通过了之后就，哇卡卡~&lt;/p&gt;
&lt;p&gt;用 CSS 实现一个六边形还不简单？&lt;/p&gt;
&lt;p&gt;如下图，这就是我们要实现的六边形。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xl8me.com1.z0.glb.clouddn.com/hexagon_1.png?imageView2/1/w/256/h/256/q/100%7Cwatermark/2/text/QHNxcnR0aHJlZQ==/font/5b6u6L2v6ZuF6buR/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;六边形&quot;&gt;&lt;/p&gt;
&lt;p&gt;咋一看，这货怎么能用 CSS 来实现嘛？看官别着急，我给你画两条线你就能猜到了，请看下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xl8me.com1.z0.glb.clouddn.com/hexagon_2.png?imageView2/1/w/256/h/256/q/100%7Cwatermark/2/text/QHNxcnR0aHJlZQ==/font/5b6u6L2v6ZuF6buR/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;六边形&quot;&gt;&lt;/p&gt;
&lt;p&gt;咦，还没看出来？那您老再看下面这张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xl8me.com1.z0.glb.clouddn.com/hexagon_3.png?imageView2/1/w/256/h/256/q/100%7Cwatermark/2/text/QHNxcnR0aHJlZQ==/font/5b6u6L2v6ZuF6buR/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;六边形&quot;&gt;&lt;/p&gt;
&lt;p&gt;这下能够看出来了吧，没错，思路很简单，就是利用两个三角形和一个长方形然后拼接到一块，就能做出这么一个正六边形啦~&lt;/p&gt;
&lt;p&gt;嗯？三角形怎么做？介个，等我什么时候有空了再给你娓娓道来吧（不过我想我是没空了，因为等我做完女神就要约我了~）&lt;/p&gt;
&lt;p&gt;好了，废话不多说，直接上代码~ &lt;a href=&quot;http://codepen.io/sqrtthree/pen/jrBEbj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后痛痛快快的给女神发了过去，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“咦，效果虽然是这个效果，但是为什么鼠标移入的触发区域不太对呢？能不能把鼠标移入的触发区域也仅限制为六边形？”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嗯，这确实是这种方法的一个弊端，因为 CSS 中是没法直接做一个三角形的，所以我们利用了 &lt;code&gt;border&lt;/code&gt; 的特点模拟了一个出来，但是元素本质上还是一个矩形。&lt;/p&gt;
&lt;p&gt;那么问题来了，怎样实现一个完美的六边形效果呢？&lt;/p&gt;
&lt;p&gt;哈哈，这个问题怎么能难得住我嘛，不多一会，我就做出了一个完美的六边形出来给女神发过去了，这次主要是利用了 &lt;code&gt;overflow: hidden&lt;/code&gt; 和 CSS3 中的 &lt;code&gt;transform&lt;/code&gt; 相关属性实现的。详细代码请 &lt;a href=&quot;http://codepen.io/sqrtthree/pen/BzKbBb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;嗯，这次看来女神挺满意的~&lt;/p&gt;
&lt;p&gt;毕竟鼠标移入的触发区域也完美的限制在六边形里面了嘛~&lt;/p&gt;
&lt;p&gt;女神表达了感激之情，我们在 QQ 上轻(gan)松(ga)的聊了起来，看起来是到了该约周末一起吃饭的时候了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“啊，抱歉噢，我周末要跟男朋友一起去逛街呢”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哦。&lt;/p&gt;
&lt;p&gt;呵呵哒。&lt;/p&gt;
&lt;p&gt;真是一个感(lei)人(jue)肺(bu)腑(ai)的爱情故事。&lt;/p&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨请我喝杯咖啡，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;故事说起那是在一个冰冷幽暗的晚上，外面下着淅淅沥沥的小雨，我正在思考一个十分重要的人生问题：这个周末哪里去？是宅在家里写程序好呢，还是宅在家里写博客好呢？还是好呢？这时，桌面右下角很少抖动的 QQ 头像竟然动了起来，我多年的直觉告诉我，一定是有人要约我，尽管这件事情从来没有
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="CSS" scheme="http://blog.sqrtthree.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 3.0 终于发布啦！</title>
    <link href="http://blog.sqrtthree.com/2016/06/13/jQuery-3-0-Final-Released/"/>
    <id>http://blog.sqrtthree.com/2016/06/13/jQuery-3-0-Final-Released/</id>
    <published>2016-06-13T15:39:09.000Z</published>
    <updated>2016-06-14T14:46:26.000Z</updated>
    
    <content type="html">&lt;p&gt;jQuery 3.0 现在发布啦！这个版本从 2014 年 10 月就已经在开始开发了。我们的目标是创建一个更轻量、更快的 jQuery（带有向后兼容的思想）。我们删除了所有的兼容旧版本 IE 浏览器的解决办法，并在一些有意义的地方利用了一些较为现代的 web APIs。它是 2.x 分支的延续，但是包含了少量我们认为早该出现的改变。在一段时间内， 1.12 和 2.2 分支仍将继续获得关键性的支持补丁，但是它们不会得到任何新功能或是重大修订。jQuery 3.0 就是 jQuery 的未来。如果你需要支持 IE6-8，你可以继续使用最新的 1.12 版。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;尽管版本号是 3.0，但是我们预感在升级现有的代码时并不会造成太多的麻烦。是，是有一些 “breaking changes”，这对于主版本号跳跃来说是合理的，但是我们希望这些改变并没有真正影响到很多人。&lt;/p&gt;
&lt;p&gt;为了帮助升级，我们有一个新的 &lt;a href=&quot;https://jquery.com/upgrade-guide/3.0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3.0 升级指南&lt;/a&gt;，并且 &lt;a href=&quot;https://github.com/jquery/jquery-migrate#migrate-older-jquery-code-to-jquery-30&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery Migrate 3.0&lt;/a&gt; 将会帮助你识别代码中的兼容性问题。您在这次变化中的反馈将对我们有非常大的帮助，所以请尝试在您现有的代码和插件中使用它吧！&lt;/p&gt;
&lt;p&gt;你可以在 jQuery CDN 中获取到这些文件，或者直接链接他们：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.jquery.com/jquery-3.0.0.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://code.jquery.com/jquery-3.0.0.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.jquery.com/jquery-3.0.0.min.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://code.jquery.com/jquery-3.0.0.min.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你也可以从 &lt;code&gt;npm&lt;/code&gt; 中得到这个版本：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;jquery&lt;/span&gt;@&lt;span class=&quot;keyword&quot;&gt;3&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;附带着，我们也发布了 &lt;code&gt;jQuery Migrate 3.0&lt;/code&gt;。我们强烈建议你使用它来定位 jQuery 3.0 的重大改变而带来的任何问题。你可以在这里获取这些文件：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.jquery.com/jquery-migrate-3.0.0.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://code.jquery.com/jquery-migrate-3.0.0.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.jquery.com/jquery-migrate-3.0.0.min.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://code.jquery.com/jquery-migrate-3.0.0.min.js&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;jquery-migrate&lt;/span&gt;@&lt;span class=&quot;keyword&quot;&gt;3&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有关借助 jQuery Migrate 将你的 jQuery 1.x 和 2.x 页面升级到 jQuery 3.0 的更多信息，请看 &lt;a href=&quot;http://blog.jquery.com/2016/05/19/jquery-migrate-1-4-1-released-and-the-path-to-jquery-3-0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; the jQuery Migrate 1.4.1 blog post.&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;轻量级构建&quot;&gt;&lt;a href=&quot;#轻量级构建&quot; class=&quot;headerlink&quot; title=&quot;轻量级构建&quot;&gt;&lt;/a&gt;轻量级构建&lt;/h4&gt;&lt;p&gt;最后，我们在这个版本里添加了一些新东西。有时你不需要 ajax, 或者你更喜欢使用一个专注于 ajax 请求的独立库。你往往使用CSS类作为一个简单的组合来操作的所有的网页动画。随着包含 ajax 和动画效果模块的普通版本的 jQuery，我们发布了一个排除了这些模块的 “slim” 版本。总而言之，它排除了 ajax，动画和当前过时的代码。在这关注加载性能的时代，jQuery 的大小是非常罕见的，但是 slim 版本比普通版小了近 6k （gzip压缩字节）- 23.6k 对 30k。这些文件在 CDN 和 npm 上都是可用的：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.jquery.com/jquery-3.0.0.slim.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://code.jquery.com/jquery-3.0.0.slim.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.jquery.com/jquery-3.0.0.slim.min.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://code.jquery.com/jquery-3.0.0.slim.min.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个构建版本是基于我们自定义的构建 API 创建的。它允许你排除或者包含任何你喜欢的模块。查看 jQuery README 文件获取更多信息。&lt;/p&gt;
&lt;h4 id=&quot;和-jQuery-UI-以及-jQuery-Mobile-之间的兼容性&quot;&gt;&lt;a href=&quot;#和-jQuery-UI-以及-jQuery-Mobile-之间的兼容性&quot; class=&quot;headerlink&quot; title=&quot;和 jQuery UI 以及 jQuery Mobile 之间的兼容性&quot;&gt;&lt;/a&gt;和 jQuery UI 以及 jQuery Mobile 之间的兼容性&lt;/h4&gt;&lt;p&gt;虽然大多数的功能都能够正常工作，但是在升级的过程中 jQuery UI 和 jQuery Mobile 仍然会有一些小问题。如果你发现了一个问题，记住在下一个版本或许已经解决了，使用 jQuery Migrate 3.0 插件或许也可以修复它。期待很快发布吧。&lt;/p&gt;
&lt;h4 id=&quot;主要变化&quot;&gt;&lt;a href=&quot;#主要变化&quot; class=&quot;headerlink&quot; title=&quot;主要变化&quot;&gt;&lt;/a&gt;主要变化&lt;/h4&gt;&lt;p&gt;下面是这次的新版本中重要的新功能中的亮点，改进以及 bug 修复，你可以在 &lt;a href=&quot;http://jquery.com/upgrade-guide/3.0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3.0 升级指南&lt;/a&gt; 中找到更多的细节。你可以在我们的 &lt;a href=&quot;https://github.com/jquery/jquery/issues?q=is%3Aissue+milestone%3A3.0.0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub bug tracker&lt;/a&gt; 中获取完整的 bug 修复列表。如果你阅读过 3.0.0-rc1 的博文，你会发现下面的特性和那篇文章中是一样的。&lt;/p&gt;
&lt;h5 id=&quot;jQuery-Deferred-现在和-Promises-A-规范兼容&quot;&gt;&lt;a href=&quot;#jQuery-Deferred-现在和-Promises-A-规范兼容&quot; class=&quot;headerlink&quot; title=&quot;jQuery.Deferred 现在和 Promises/A+ 规范兼容&quot;&gt;&lt;/a&gt;jQuery.Deferred 现在和 Promises/A+ 规范兼容&lt;/h5&gt;&lt;p&gt;为了兼容 Promises/A+ 和 ES2015 Promises，jQuery.Deferred 对象已经更新了。&lt;a href=&quot;https://github.com/promises-aplus/promises-tests&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Promises/A+ Compliance Test Suite&lt;/a&gt; 已经检验通过了。这意味着我们需要对 .then() 方法做出一些重大改变。你可以通过使用现在不赞成使用的 .pipe() 方法来替换所有的 .then() 方法来恢复成传统的行为。&lt;/p&gt;
&lt;p&gt;1、 在 .then() 方法中抛出一个错误现在变成了一个 rejection values。在以前，错误会向上冒泡传递，并终止执行回调函数。deferreds 依赖于所有的 defered 的解决状态，如果其中抛出一个错误，resolve 将不会发生。&lt;/p&gt;
&lt;p&gt;例如：未捕获的异常 对比 rejection values&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deferred = jQuery.Deferred();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deferred.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;first callback&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;error in callback&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;second callback&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;rejection callback&quot;&lt;/span&gt;, err &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deferred.resolve();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在以前，“first callback” 会被打印，并抛出一个错误。然后结束执行。紧挨着的  “second callback” 和 “rejection callback”  不会被打印出来。现在，符合标准的行为是  “rejection callback” 能够正确的被打印，正如你所看到的那样。err 是第一个回调函数中的 rejection values。&lt;/p&gt;
&lt;p&gt;2、 现在可以通过 .then() 方法的回调来控制一个 Deferred 的解决状态，除了 rejection values 和 non-thenable 之外的返回值都会变为 fulfillment values。以前，从 rejection 处理程序中的返回值作为了 rejection values。&lt;/p&gt;
&lt;p&gt;Example: returns from rejection callbacks&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; deferred = jQuery.Deferred();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deferred.then(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;rejection callback 1&quot;&lt;/span&gt;, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;value2&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;success callback 2&quot;&lt;/span&gt;, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;exception value&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;rejection callback 2&quot;&lt;/span&gt;, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.then(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;rejection callback 3&quot;&lt;/span&gt;, value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deferred.reject(&lt;span class=&quot;string&quot;&gt;&quot;value1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以前，这将打印 “rejection callback 1 value1”, “rejection callback 2 value2”, 和 “rejection callback 3 undefined”.&lt;/p&gt;
&lt;p&gt;现在，符合标准的行为是，这将打印 “rejection callback 1 value1”, “success callback 2 value2″, 和 “rejection callback 3 [object Error]”.&lt;/p&gt;
&lt;p&gt;3、 如果一个 Deferred 已经 resolved 之后，回调函数总是异步调用的。在以前，这些回调函数将会在绑定的时候同步执行。&lt;/p&gt;
&lt;p&gt;Example: async vs sync&lt;/p&gt;
&lt;figure class=&quot;highlight fortran&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var &lt;span class=&quot;keyword&quot;&gt;deferred&lt;/span&gt; = jQuery.&lt;span class=&quot;keyword&quot;&gt;Deferred&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;deferred&lt;/span&gt;.resolve();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;deferred&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;success callback&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;after binding&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在以前，这段代码会先打印 “success callback” 然后打印 “after binding”。现在，它的结果是先打印 “after binding” 然后打印 “success callback”。&lt;/p&gt;
&lt;p&gt;Important: while caught exceptions had advantages for in-browser debugging, it is far more declarative (i.e. explicit) to handle them with rejection callbacks. Keep in mind that this places the responsibility on you to always add at least one rejection callback when working with promises. Otherwise, some errors might go unnoticed.&lt;/p&gt;
&lt;p&gt;We’ve built a plugin to help in debugging Promises/A+ compatible Deferreds. If you are not seeing enough information about an error on the console to determine its source, check out the &lt;a href=&quot;https://github.com/dmethvin/jquery-deferred-reporter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery Deferred Reporter Plugin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jQuery.when&lt;/code&gt; has also been updated to accept any thenable object, which includes native Promise objects.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/1722&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/1722&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/2102&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/2102&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;Added-catch-to-Deferreds&quot;&gt;&lt;a href=&quot;#Added-catch-to-Deferreds&quot; class=&quot;headerlink&quot; title=&quot;Added .catch() to Deferreds&quot;&gt;&lt;/a&gt;Added .catch() to Deferreds&lt;/h5&gt;&lt;p&gt;The &lt;code&gt;catch()&lt;/code&gt; method was added to promise objects as an alias for &lt;code&gt;.then(null, fn)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/2102&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/2102&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;Error-cases-don’t-silently-fail&quot;&gt;&lt;a href=&quot;#Error-cases-don’t-silently-fail&quot; class=&quot;headerlink&quot; title=&quot;Error cases don’t silently fail&quot;&gt;&lt;/a&gt;Error cases don’t silently fail&lt;/h5&gt;&lt;p&gt;Perhaps in a profound moment you’ve wondered, “What is the offset of a window?” Then you probably realized that is a crazy question – how can a window even have an offset?&lt;/p&gt;
&lt;p&gt;In the past, jQuery has sometimes tried to make cases like this return something rather than having them throw errors. In this particular case of asking for the offset of a window, the answer up to now has been { top: 0, left: 0 } With jQuery 3.0, such cases will throw errors so that crazy requests aren’t silently ignored. Please try out this release and see if there is any code out there depending on jQuery to mask problems with invalid inputs.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/1784&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/1784&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;Removed-deprecated-event-aliases&quot;&gt;&lt;a href=&quot;#Removed-deprecated-event-aliases&quot; class=&quot;headerlink&quot; title=&quot;Removed deprecated event aliases&quot;&gt;&lt;/a&gt;Removed deprecated event aliases&lt;/h5&gt;&lt;p&gt;&lt;code&gt;.load&lt;/code&gt;, &lt;code&gt;.unload&lt;/code&gt;, and &lt;code&gt;.error&lt;/code&gt;, deprecated since jQuery 1.8, are no more. Use &lt;code&gt;.on()&lt;/code&gt; to register listeners.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/2286&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/2286&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;Animations-now-use-requestAnimationFrame&quot;&gt;&lt;a href=&quot;#Animations-now-use-requestAnimationFrame&quot; class=&quot;headerlink&quot; title=&quot;Animations now use requestAnimationFrame&quot;&gt;&lt;/a&gt;Animations now use &lt;code&gt;requestAnimationFrame&lt;/code&gt;&lt;/h5&gt;&lt;p&gt;On platforms that support the &lt;code&gt;requestAnimationFrame&lt;/code&gt; API, which is pretty much everywhere but IE9 and Android&amp;lt;4.4, jQuery will now use that API when performing animations. This should result in animations that are smoother and use less CPU time – and save battery as well on mobile devices.&lt;/p&gt;
&lt;p&gt;jQuery tried using &lt;code&gt;requestAnimationFrame&lt;/code&gt; a few years back but there were &lt;a href=&quot;http://blog.jquery.com/2011/09/01/jquery-1-6-3-released/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;serious compatibility issues&lt;/a&gt; with existing code so we had to back it out. We think we’ve beaten most of those issues by suspending animations while a browser tab is out of view. Still, any code that depends on animations to always run in nearly real-time is making an unrealistic assumption.&lt;/p&gt;
&lt;h5 id=&quot;Massive-speedups-for-some-jQuery-custom-selectors&quot;&gt;&lt;a href=&quot;#Massive-speedups-for-some-jQuery-custom-selectors&quot; class=&quot;headerlink&quot; title=&quot;Massive speedups for some jQuery custom selectors&quot;&gt;&lt;/a&gt;Massive speedups for some jQuery custom selectors&lt;/h5&gt;&lt;p&gt;Thanks to some detective work by Paul Irish at Google, we identified some cases where we could skip a bunch of extra work when custom selectors like &lt;code&gt;:visible&lt;/code&gt; are used many times in the same document. That particular case is up to 17 times faster now!&lt;/p&gt;
&lt;p&gt;Keep in mind that even with this improvement, selectors like &lt;code&gt;:visible&lt;/code&gt; and &lt;code&gt;:hidden&lt;/code&gt; can be expensive because they depend on the browser to determine whether elements are actually displaying on the page. That may require, in the worst case, a complete recalculation of CSS styles and page layout! While we don’t discourage their use in most cases, we recommend testing your pages to determine if these selectors are causing performance issues.&lt;/p&gt;
&lt;p&gt;This change actually made it into 1.12/2.2, but we wanted to reiterate it for jQuery 3.0.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/2042&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/2042&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As mentioned above, the &lt;a href=&quot;http://jquery.com/upgrade-guide/3.0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Upgrade Guide&lt;/a&gt; is now available for anyone ready to try out this release. Aside from being helpful in upgrading, it also lists more of the notable changes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文根据 &lt;a href=&quot;http://blog.jquery.com/author/timmywil/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Timmy Willison&lt;/a&gt; 的《jQuery 3.0 Final Released!》所译，整个译文带有自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：&lt;a href=&quot;http://blog.jquery.com/2016/06/09/jquery-3-0-final-released/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.jquery.com/2016/06/09/jquery-3-0-final-released/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery 3.0 现在发布啦！这个版本从 2014 年 10 月就已经在开始开发了。我们的目标是创建一个更轻量、更快的 jQuery（带有向后兼容的思想）。我们删除了所有的兼容旧版本 IE 浏览器的解决办法，并在一些有意义的地方利用了一些较为现代的 web APIs。它是 2.x 分支的延续，但是包含了少量我们认为早该出现的改变。在一段时间内， 1.12 和 2.2 分支仍将继续获得关键性的支持补丁，但是它们不会得到任何新功能或是重大修订。jQuery 3.0 就是 jQuery 的未来。如果你需要支持 IE6-8，你可以继续使用最新的 1.12 版。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="译文" scheme="http://blog.sqrtthree.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="jQuery3.0" scheme="http://blog.sqrtthree.com/tags/jQuery3-0/"/>
    
  </entry>
  
  <entry>
    <title>前端开发书籍推荐目录（连载ing）</title>
    <link href="http://blog.sqrtthree.com/2016/04/26/book-recommendations/"/>
    <id>http://blog.sqrtthree.com/2016/04/26/book-recommendations/</id>
    <published>2016-04-26T06:47:07.000Z</published>
    <updated>2016-04-26T06:47:07.000Z</updated>
    
    <content type="html">&lt;p&gt;前几天有朋友说他们公司要做一个培训计划，让我给推荐几本关于前端方面的书籍，拖延了四五天之后，终于还是耐着性子把它写完了，这里也一并发出来，希望能够给那些在自学道路上艰难前行的人带来一点光亮和温暖。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;以下是正文部分。&lt;/p&gt;
&lt;p&gt;关于前端开发方面的书籍，我也看过那么几本，就简单的聊一下我看过的这些吧.&lt;/p&gt;
&lt;h3 id=&quot;1、Head-First-HTML与CSS&quot;&gt;&lt;a href=&quot;#1、Head-First-HTML与CSS&quot; class=&quot;headerlink&quot; title=&quot;1、Head First HTML与CSS&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/25752357/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1、Head First HTML与CSS&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这本书最大的优点就是除了基础还是基础，非常适合完全不知道前端开发是什么的门外汉作为第一本入门书籍来学习， 整本书采用插画和故事场景的形式叙述，和那些枯燥、深奥的HTML书籍完全不同，秉持了 &lt;code&gt;Head First&lt;/code&gt; 系列一贯通俗易懂的风格。你看这本书的时候会发现就像是在看漫画书一样轻松。是我看过对初学者最友好的书，没有之一。&lt;/p&gt;
&lt;h3 id=&quot;2、CSS-权威指南&quot;&gt;&lt;a href=&quot;#2、CSS-权威指南&quot; class=&quot;headerlink&quot; title=&quot;2、CSS 权威指南&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/2308234/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;2、CSS 权威指南&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在看了第一本书后，想必你已经对 HTML 和 CSS 的基础知识有了一定的了解，甚至你已经能够做出一些简单的网站了。但是你可能只是知道一些常见的 CSS 属性，毕竟上一本书只是讲解一些基础知识。所以如果你想要全面的、深入的了解 CSS ，那么权威指南系列是你的不二选择。&lt;/p&gt;
&lt;p&gt;这是一本非常经典的 CSS 参考书，它的经典之处在于，它用普通人类可以理解的语言系统、全面地讲解了 CSS 规范。这本书会告诉你，CSS 是什么、CSS 有什么、CSS 可以做什么。&lt;/p&gt;
&lt;p&gt;这本书就像是 CSS 里面的圣经一样，以神一般的地位存在。当然了，你不要被它的厚度给吓到，其实你在看这本书的时候完全不需要非要每一页都非常详细的看一遍，你只需要粗略的翻一下，了解一下内容，然后大部分情况下把它当做字典来使用。用一个知识点学一个知识点就好了。&lt;/p&gt;
&lt;h3 id=&quot;3、精通-CSS&quot;&gt;&lt;a href=&quot;#3、精通-CSS&quot; class=&quot;headerlink&quot; title=&quot;3、精通 CSS&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/4736167/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3、精通 CSS&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这同样是一本非常经典的 CSS 图书，它侧重于实践，告诉你如何正确地使用 CSS。&lt;/p&gt;
&lt;p&gt;这本书将最有用的 CSS 技术汇总在一起，还总结了 CSS 设计中的极具实践，讨论了解决各种实际问题的技术，填补了一直以来 CSS 图书的空白。&lt;/p&gt;
&lt;p&gt;作者多年来一直在编写、设计和宣传基于标准的网页设计，我们现在有幸在本书中看到他以简洁清晰的方式讲授最重要的 CSS 技术。本书提供了一套网页设计人员不可或缺的解决方案、技巧和经验。&lt;/p&gt;
&lt;h3 id=&quot;4、CSS-Secrets&quot;&gt;&lt;a href=&quot;#4、CSS-Secrets&quot; class=&quot;headerlink&quot; title=&quot;4、CSS Secrets&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/26745943/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;4、CSS Secrets&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;大家可能注意到了，这两本都出版于 2006 年。而今年已经是 2016 年了。如果你的书架只能放得下三本 CSS 书，除了上面的那两本之外，我向你强力推荐的一定是这一本。&lt;/p&gt;
&lt;p&gt;这本书的准确出版时间为2016年04月底，也就是说截止目前为止，这本书都还没有出版，那么我为什么要向大家推荐一部还没有出版的书籍呢？github 上有试读篇，感兴趣可以先看看，不管你是什么感受，反正我看完就跪着去下单了。&lt;/p&gt;
&lt;p&gt;对于中级的 CSS 开发者来说，这本书可以发挥最大的功效——它可以帮助你进阶。相信很多开发者在学习 CSS 到了一定阶段的时候，感觉自己好像什么都会了，但遇到复杂问题时往往又感觉捉襟见肘、力不从心。这就是遇到瓶颈了。如何突破瓶颈、进入下一个阶段？要做的无非是两件事——实践和思考。书并不能代替你思考，但一本好书可以向你示范，什么样的思考方式是正确的。&lt;/p&gt;
&lt;h3 id=&quot;5、图解-CSS3-（核心技术与案例实战）&quot;&gt;&lt;a href=&quot;#5、图解-CSS3-（核心技术与案例实战）&quot; class=&quot;headerlink&quot; title=&quot;5、图解 CSS3 （核心技术与案例实战）&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/25920727/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;5、图解 CSS3 （核心技术与案例实战）&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这本书是手淘的大漠写的，大漠作为 W3cplus 创始人，一直专注对 CSS 方面尤其是 CSS3 的研究，是国内最早研究和使用CSS3技术的一批人。这本书算是他的呕心力作，在书中有趣且易懂的来描述了 CSS3 的每一个特性。不仅内容极为全面、详实，而且富含大量的案例，实用性非常强，如果你对 CSS3 非常感兴趣，那你就有福了。&lt;/p&gt;
&lt;h3 id=&quot;6、Effective-Javascript-编写高质量-Javascript-代码的-68-个有效方法&quot;&gt;&lt;a href=&quot;#6、Effective-Javascript-编写高质量-Javascript-代码的-68-个有效方法&quot; class=&quot;headerlink&quot; title=&quot;6、Effective Javascript 编写高质量 Javascript 代码的 68 个有效方法&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/25786138/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;6、Effective Javascript 编写高质量 Javascript 代码的 68 个有效方法&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Effective 系列丛书经典著作，亚马逊五星级畅销书。就冲着这样的地位也值得入手。作者凭借多年标准化委员会工作和实践经验，深刻辨析JavaScript 的内部运作机制、特性、陷阱和编程最佳实践，将它们高度浓缩为极具实践指导意义的 68 条精华建议。内容很接地气，实用性很强，我表示看过之后受益颇深。无论你是刚学习 JS 的入门者，还是有着几年经验的开发者，这本书都值得你一看。&lt;/p&gt;
&lt;h3 id=&quot;7、编写可维护的JavaScript&quot;&gt;&lt;a href=&quot;#7、编写可维护的JavaScript&quot; class=&quot;headerlink&quot; title=&quot;7、编写可维护的JavaScript&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/21792530/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;7、编写可维护的JavaScript&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这是一本构建编码风格手册，帮助你和你的团队从“游击队”走向“正规军”的书籍。书中向开发人员阐述了如何在团队开发中编写具备高可维护性的JavaScript代码。覆盖了编码风格、编程技巧、自动化、测试等几方面。无论你是前端开发者还是团队 leader，无论你是刚入门的初学者还是有经验的开发者，都建议你阅读一下这一本书。&lt;/p&gt;
&lt;h3 id=&quot;8、Javascript-高级程序设计&quot;&gt;&lt;a href=&quot;#8、Javascript-高级程序设计&quot; class=&quot;headerlink&quot; title=&quot;8、Javascript 高级程序设计&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/10546125/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;8、Javascript 高级程序设计&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;JavaScript 超级畅销书，技术经典名著。本书在详细讲解了JavaScript语言的核心之后，条分缕析地为读者展示了现有规范及实现为开发Web应用提供的各种支持和特性，全面深入、贴近实战的特点非常适合有一定编程经验但是想要进阶的开发者来学习。&lt;/p&gt;
&lt;h3 id=&quot;9、Javascript-语言精粹&quot;&gt;&lt;a href=&quot;#9、Javascript-语言精粹&quot; class=&quot;headerlink&quot; title=&quot;9、Javascript 语言精粹&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/11874748/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;9、Javascript 语言精粹&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;众所周知，Javascript 之父只用 10 天时间就把 Javascript 设计出来了。由于设计时间太短，语言的一些细节考虑得不够严谨。这个曾是“世界上最被误解的语言”，担负了太多的特性，包括糟糕的交互和失败的设计，但是现在，JavaScript 俨然从 “最受误解的编程语言” 演变为了 “最流行的语言”，这说明 Javascript 有其自身独特的魅力。本书剥开了 JavaScript 沾污的外衣，抽离出一个具有更好可靠性、可读性和可维护性的JavaScript 子集，让你看到一门优雅的、轻量级的和非常富有表现力的语言。说其是每一个 Javascript 开发者都必备的一本书一点也不为过。&lt;/p&gt;
&lt;h3 id=&quot;10、Javascript-权威指南&quot;&gt;&lt;a href=&quot;#10、Javascript-权威指南&quot; class=&quot;headerlink&quot; title=&quot;10、Javascript 权威指南&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/1232061/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;10、Javascript 权威指南&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;权威指南系列想必已经不用多说了，各个都很经典，值得入手。这本书详细的讲解了 Javascript 中的各种语法和语言核心设计，覆盖了 JS 的核心 API、遗留的客户端API和W3C标准DOM API，记述了这些API中的每一个JavaScript对象、方法、性质、构造函数、常量和事件处理程序。不过由于其内容量过于庞大，建议平时作为字典使用即可。&lt;/p&gt;
&lt;p&gt;如果你的书架只能放得下三本 JS 书， 那么这三本已经凑齐了，我强烈推荐『Javascript 语言精粹』、『Javascript 高级程序设计』和这一本『Javascript 权威指南』。&lt;/p&gt;
&lt;h3 id=&quot;11、Javascript-设计模式&quot;&gt;&lt;a href=&quot;#11、Javascript-设计模式&quot; class=&quot;headerlink&quot; title=&quot;11、Javascript 设计模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/24744217/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;11、Javascript 设计模式&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这本也算是 O’REILLY 系列中的一个非常好的书籍，实际上 O’REILLY 系列基本上都没有差的。书中集中介绍了很多流行的设计模式在JavaScript中的应用以及实现方式。作为高级前端开发工程师学习设计模式的一本进阶书籍非常合适。&lt;/p&gt;
&lt;h3 id=&quot;12、Javascript-设计模式与开发实践&quot;&gt;&lt;a href=&quot;#12、Javascript-设计模式与开发实践&quot; class=&quot;headerlink&quot; title=&quot;12、Javascript 设计模式与开发实践&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/26382780/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;12、Javascript 设计模式与开发实践&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这本书是由国内知名前端团队腾讯 AlloyTeam 成员编写的，设计模式自古乃程序员高谈论阔之话题，许多程序员从设计模式中学到了设计软件的灵感，或者是问题的解决方案。但是有些人却认为设计模式只适合静态语言，Javascript 这种动态语言根本就没有设计模式一说。显然，本书给了你最好的答案。&lt;/p&gt;
&lt;p&gt;该书全面涵盖了 JavaScript 的 16 个常用的设计模式、设计原则、编程技巧和代码重构，由浅入深的详细介绍了面向对象的设计原则以及在设计模式中的体现。让你能够将经典的设计模式应用到 JS 中，实乃高级程序设计必读之佳作。&lt;/p&gt;
&lt;h3 id=&quot;13、jQuery-技术内幕&quot;&gt;&lt;a href=&quot;#13、jQuery-技术内幕&quot; class=&quot;headerlink&quot; title=&quot;13、jQuery 技术内幕&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/25823709/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;13、jQuery 技术内幕&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;阿里巴巴资深前端开发工程师墨智的大作，没出版之前我就一直在关注，渴望能偶早早看到。&lt;/p&gt;
&lt;p&gt;jQuery 作为全球使用量最大的 JS 库，它的优秀想必我也不需要说了，如果你使用了多年的 jQuery，但一直不敢去了解它的源码实现方式，或者你觉得你的 JS 技能进入了瓶颈期，那这本书对你来说就如同雪中送炭一样。&lt;/p&gt;
&lt;p&gt;本书首先通过“总体架构”梳理了各个模块的分类、功能和依赖关系，让大家对 jQuery 的工作原理有大致的印象；然后按照源码几乎逐行分析了其中各个模块的源码实现，分析的详细程度简直“令人发指”。不过这本书是基于 1.x 的版本进行分析的，阅读的时候略微注意即可，实际上即使是 1.x 版本的 jQuery，也非常值得我们学习。&lt;/p&gt;
&lt;h3 id=&quot;14、数据结构与算法-Javascript-描述&quot;&gt;&lt;a href=&quot;#14、数据结构与算法-Javascript-描述&quot; class=&quot;headerlink&quot; title=&quot;14、数据结构与算法 Javascript 描述&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/25945449/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;14、数据结构与算法 Javascript 描述&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这本书覆盖了常用的基本数据结构，如果你对数据结构很感兴趣，算是一本不错的入门书籍吧，推荐指数三颗星。但是本书中也有一些错误出现，建议看中文版的同时对照英文勘误表进行阅读和学习。&lt;/p&gt;
&lt;h3 id=&quot;15、React-引领未来的用户界面开发框架&quot;&gt;&lt;a href=&quot;#15、React-引领未来的用户界面开发框架&quot; class=&quot;headerlink&quot; title=&quot;15、React 引领未来的用户界面开发框架&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/26378583/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;15、React 引领未来的用户界面开发框架&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;2014 年横空出世的由 Facebook 推出的开源框架 React.js，基于 Virtual DOM 重新定义了用户界面的开发方式，彻底革新了大家对前端框架的认识。在这个火热朝天的年代，如果你连 React 都还没听说过，那还是赶紧洗洗睡吧。如果你听说过但是没有使用过，或者是想要学习 React 但是该不知如何下手，再或者是看不懂那些晦涩难懂的英文文档，那么这本书就很适合你了。这本书介绍了 React 的一些基础知识，比较适合入门，但是前端开发的世界变化的这么快，估计这本书的生命周期也没几年吧。&lt;/p&gt;
&lt;h3 id=&quot;16、HTML5-游戏开发进阶指南&quot;&gt;&lt;a href=&quot;#16、HTML5-游戏开发进阶指南&quot; class=&quot;headerlink&quot; title=&quot;16、HTML5 游戏开发进阶指南&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/25710762/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;16、HTML5 游戏开发进阶指南&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这本书介绍了 HTML5 游戏开发的一般过程和技巧，如果你对 HTML5 游戏开发很感兴趣，可以看一下。并且书中也有很多的案例，作为一个学习游戏开发的入门书籍还是可以的。&lt;/p&gt;
&lt;h3 id=&quot;17、深入浅出-Nodejs&quot;&gt;&lt;a href=&quot;#17、深入浅出-Nodejs&quot; class=&quot;headerlink&quot; title=&quot;17、深入浅出 Nodejs&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/25768396/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;17、深入浅出 Nodejs&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;开发者的大事，大快所有人心的大好事。&lt;/p&gt;
&lt;p&gt;出自国内阿里大神朴灵的大作，国内最好的 Nodejs 书籍，没有之一。同时也是第一本深度讲解 Node 的图书。本书从不同的视角介绍了 Node 内在的特点和结构。非常适合想要深入了解学习 Nodejs 的高级开发者来学习。实际上，不管是否学习过 Node，只要你热爱技术，都推荐你阅读它。&lt;/p&gt;
&lt;h3 id=&quot;18、HTTP-权威指南&quot;&gt;&lt;a href=&quot;#18、HTTP-权威指南&quot; class=&quot;headerlink&quot; title=&quot;18、HTTP 权威指南&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/10746113/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;18、HTTP 权威指南&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;谁说做前端开发不需要了解 http 相关知识？高级前端开发者永远不会仅仅满足于了解 ajax 是怎么回事之后就止步不前，如果你想要学习 http 和通信协议相关的知识，那就不要再犹豫了，一定是这本书了。&lt;/p&gt;
&lt;p&gt;书中尝试着将HTTP中一些互相关联且常被误解的规则梳理清楚，并编写了一系列基于各种主题的章节，对HTTP各方面的特性进行了介绍。书中对HTTP“为什么”这样做进行了详细的解释，而不仅仅停留在它是“怎么做”的。非常适合作为高级开发者进阶学习之资料。&lt;/p&gt;
&lt;h3 id=&quot;19、黑客与画家&quot;&gt;&lt;a href=&quot;#19、黑客与画家&quot; class=&quot;headerlink&quot; title=&quot;19、黑客与画家&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://book.douban.com/subject/6021440/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;19、黑客与画家&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这本书就比较特殊了，这本是硅谷创业之父Paul Graham 的文集，注意，是文集，而不是像上面那些那样是技术书籍。&lt;/p&gt;
&lt;p&gt;这本书主要介绍黑客的爱好和动机，讨论黑客成长、黑客对世界的贡献以及编程语言和黑客工作方法等所有对计算机时代感兴趣的人的一些话题。书中的内容不但有助于了解计算机编程的本质、互联网行业的规则，还会帮助读者了解我们这个时代，迫使读者独立思考。&lt;/p&gt;
&lt;p&gt;简单的来说，这是一本谈论编程哲学的书籍，而不是针对某种语言进行解释的技术书籍。&lt;/p&gt;
&lt;p&gt;本书适合所有的程序员和互联网工作者，以及一切对计算机感兴趣的人阅读。&lt;/p&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前几天有朋友说他们公司要做一个培训计划，让我给推荐几本关于前端方面的书籍，拖延了四五天之后，终于还是耐着性子把它写完了，这里也一并发出来，希望能够给那些在自学道路上艰难前行的人带来一点光亮和温暖。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="资源" scheme="http://blog.sqrtthree.com/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>在 Chrome 开发者工具中调试 node.js</title>
    <link href="http://blog.sqrtthree.com/2016/02/29/debugging-nodejs-in-chrome-devtools/"/>
    <id>http://blog.sqrtthree.com/2016/02/29/debugging-nodejs-in-chrome-devtools/</id>
    <published>2016-02-29T03:52:37.000Z</published>
    <updated>2016-02-29T03:52:37.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文链接 : &lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Debugging Node.js in Chrome DevTools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文作者 : &lt;a href=&quot;http://mattdesl.svbtle.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MATT DESLAURIERS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译文出自 : &lt;a href=&quot;https://github.com/xitu/gold-miner&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;掘金翻译计划&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者 : &lt;a href=&quot;https://github.com/sqrthree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sqrthree (根号三)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;校对者: &lt;a href=&quot;https://github.com/shenxn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shenxn&lt;/a&gt;、&lt;a href=&quot;https://github.com/CoderBOBO&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CoderBOBO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章介绍了一种在 Chrome 开发者工具里面开发、调试和分析 Node.js 应用程序的新方法。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;devtool&quot;&gt;&lt;a href=&quot;#devtool&quot; class=&quot;headerlink&quot; title=&quot; devtool&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#devtool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt;devtool&lt;/h2&gt;&lt;p&gt;最近我一直在开发一个命令行工具 &lt;a href=&quot;https://github.com/Jam3/devtool&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;devtool&lt;/a&gt;，它可以在 Chrome 的开发者工具中运行 Node.js 程序。&lt;/p&gt;
&lt;p&gt;下面的记录显示了在一个 HTTP 服务器中设置断点的情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/V4RQSZ2.gif&quot; alt=&quot;movie&quot;&gt;&lt;/p&gt;
&lt;p&gt;该工具基于 &lt;a href=&quot;https://github.com/atom/electron/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Electron&lt;/a&gt; 将 Node.js 和 Chromium 的功能融合在了一起。它的目的在于为调试、分析和开发 Node.js 应用程序提供一个简单的界面。&lt;/p&gt;
&lt;p&gt;你可以使用 &lt;a href=&quot;http://npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm&lt;/a&gt; 来安装它:&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; -g devtool&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;REPL&quot;&gt;&lt;a href=&quot;#REPL&quot; class=&quot;headerlink&quot; title=&quot; REPL&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#repl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt;REPL&lt;/h2&gt;&lt;p&gt;在某种程度上，我们可以用它来作为 &lt;code&gt;node&lt;/code&gt; shell 命令的替代品。例如，我们可以这样打开一个 REPL (译者注: REPL 全称为”Read-Eval-Print Loop”，是一个简单的、交互式的编程环境)。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;devtool&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这将启动一个带有 Node.js 特性支持的 Chrome 开发者工具实例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/bnInBHA.png&quot; alt=&quot;console&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们可以引用 Node 模块、本地 npm 模块和像 &lt;code&gt;process.cwd()&lt;/code&gt; 这样的内置模块。也可以获取像 &lt;code&gt;copy()&lt;/code&gt; 和 &lt;code&gt;table()&lt;/code&gt; 这样的 Chrome 开发者工具中的函数。&lt;/p&gt;
&lt;p&gt;其他的例子就一目了然了:&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# run a Node script&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;devtool app.&lt;span class=&quot;keyword&quot;&gt;js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# pipe in content to process.stdin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;devtool &amp;lt; audio.mp3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# pipe in JavaScript to eval it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;browserify &lt;/span&gt;index.&lt;span class=&quot;keyword&quot;&gt;js &lt;/span&gt;&lt;span class=&quot;title&quot;&gt;| devtool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;run-a-Node-script&quot;&gt;&lt;a href=&quot;#run-a-Node-script&quot; class=&quot;headerlink&quot; title=&quot;run a Node script&quot;&gt;&lt;/a&gt;run a Node script&lt;/h1&gt;&lt;h2 id=&quot;开发&quot;&gt;&lt;a href=&quot;#开发&quot; class=&quot;headerlink&quot; title=&quot;  开发&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#development&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt; 开发&lt;/h2&gt;&lt;p&gt;我们可以在通用模块和应用程序的开发中使用 &lt;code&gt;devtool&lt;/code&gt;，来代替像 &lt;a href=&quot;https://www.npmjs.com/package/nodemon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodemon&lt;/a&gt; 这样目前已经存在的工具。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;devtool app&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt; --watch&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这行命令将会在 Chrome 开发者工具中的控制台中启动我们的 &lt;code&gt;app.js&lt;/code&gt;， 通过 &lt;code&gt;--watch&lt;/code&gt; 参数，我们保存的文件将(自动)重新载入到控制台。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/NuoYkJK.png&quot; alt=&quot;console&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击 &lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;app.js:1&lt;/code&gt;&lt;/a&gt; 链接，程序将会在 &lt;code&gt;Sources&lt;/code&gt; 标签中把我们带到与之相关的那一行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/mH5jWT9.png&quot; alt=&quot;line&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;Sources&lt;/code&gt; 标签中，你也可以敲击 &lt;code&gt;Cmd/Ctrl + P&lt;/code&gt; 按键在所有依赖的模块中进行快速搜索。你甚至可以审查和调试内置模块，比如 Node.js 中的那些。你也可以使用左手边的面板来浏览模块。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/jn3RmnV.png&quot; alt=&quot;Sources&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;调试&quot;&gt;&lt;a href=&quot;#调试&quot; class=&quot;headerlink&quot; title=&quot;  调试&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#debugging&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt; 调试&lt;/h2&gt;&lt;p&gt;因为我们能够访问 &lt;code&gt;Sources&lt;/code&gt; 标签，所以我们可以用它来调试我们的应用程序。你可以设置一个断点，然后重新加载调试器(&lt;code&gt;Cmd/Ctrl + R&lt;/code&gt;)，或者你也可以通过 &lt;code&gt;--break&lt;/code&gt; 标记来设置一个初始断点。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;devtool app.js --&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/hJ2pLW1.png&quot; alt=&quot;break&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面是一些对于那些学习 Chrome 开发者工具的人来说可能不是特别常用的功能:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blittle.github.io/chrome-dev-tools/sources/conditional-breakpoints.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;条件断点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blittle.github.io/chrome-dev-tools/sources/uncaught-exceptions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;有未捕获的异常时暂停&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blittle.github.io/chrome-dev-tools/sources/restart-frame.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;重启帧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://albertlee.azurewebsites.net/using-watch-tools-in-chrome-dev-tools-to-improve-your-debugging/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;监听表达式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;提示 - 当调试器暂停时，你可以敲击 &lt;code&gt;Escape&lt;/code&gt; 按键打开一个执行在当前作用域内的控制台。你可以修改一些变量然后继续执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/nG9ellE.gif&quot; alt=&quot;Imgur&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;  分析&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#profiling&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt; 分析&lt;/h2&gt;&lt;p&gt;&lt;code&gt;devtool&lt;/code&gt; 的另一个功能是分析像 &lt;a href=&quot;https://github.com/substack/node-browserify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;browserify&lt;/a&gt;, &lt;a href=&quot;https://github.com/gulpjs/gulp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gulp&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/babel/babel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;babel&lt;/a&gt; 这样的程序。&lt;/p&gt;
&lt;p&gt;这里我们使用 &lt;a href=&quot;https://developer.chrome.com/devtools/docs/console-api&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;console.profile()&lt;/code&gt;&lt;/a&gt; (Chrome 的一个功能)来分析一个打包工具的 CPU 使用情况。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; browserify = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;browserify&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Start DevTools profiling...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.profile(&lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Bundle some browser application&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;browserify(&lt;span class=&quot;string&quot;&gt;&#39;client.js&#39;&lt;/span&gt;).bundle(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, src&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; err;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Finish DevTools profiling...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.profileEnd(&lt;span class=&quot;string&quot;&gt;&#39;build&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们在这个文件上运行 &lt;code&gt;devtool&lt;/code&gt; :&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;devtool&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行之后，我们可以在 &lt;code&gt;Profiles&lt;/code&gt; 标签中看到结果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/vSu7Lcz.png&quot; alt=&quot;profile&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们可以使用右边的链接来查看和调试执行频率较高的代码路径。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/O4DZHyv.png&quot; alt=&quot;debug&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;高级选项&quot;&gt;&lt;a href=&quot;#高级选项&quot; class=&quot;headerlink&quot; title=&quot;  高级选项&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#advanced-options&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt; 高级选项&lt;/h2&gt;&lt;h4 id=&quot;实验&quot;&gt;&lt;a href=&quot;#实验&quot; class=&quot;headerlink&quot; title=&quot;  实验&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#experiments&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt; 实验&lt;/h4&gt;&lt;p&gt;Chrome 会不断的向他们的开发者工具中推送新功能和实验，例如 &lt;strong&gt;Promise Inspector&lt;/strong&gt;。你可以通过点击右上角的三个点，然后选择 &lt;code&gt;Settings -&amp;gt; Experiments&lt;/code&gt; 来开启他们。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/dNuIMw0.png&quot; alt=&quot;experiments&quot;&gt;&lt;/p&gt;
&lt;p&gt;一旦启用，你就可以通过敲击 &lt;code&gt;Escape&lt;/code&gt; 按键来调出一个带有 &lt;em&gt;Promises&lt;/em&gt; 监视器的面板。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/xKkTEeg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示: 在 &lt;em&gt;Experiments&lt;/em&gt; 界面，如果你敲击 &lt;code&gt;Shift&lt;/code&gt; 键 6 次，你会接触到一些甚至更多的实验性（不稳定）的功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;console&quot;&gt;&lt;a href=&quot;#console&quot; class=&quot;headerlink&quot; title=&quot; --console&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#codeconsolecode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt;&lt;code&gt;--console&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;你可以重定向控制台输出到终端中(&lt;code&gt;process.stdout&lt;/code&gt; 和 &lt;code&gt;process.stderr&lt;/code&gt;)。也允许你通过使用管道将它导入到其他进程中，例如 TAP prettifiers。&lt;/p&gt;
&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;devtool test.js --console &lt;span class=&quot;string&quot;&gt;| tap-spec&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;和-process-argv&quot;&gt;&lt;a href=&quot;#和-process-argv&quot; class=&quot;headerlink&quot; title=&quot; -- 和 process.argv&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#codecode-and-codeprocessargvcode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt;&lt;code&gt;--&lt;/code&gt; 和 &lt;code&gt;process.argv&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;你的脚本可以像一个普通的 Node.js 应用那样解析 &lt;code&gt;process.argv&lt;/code&gt;。如果你在 &lt;code&gt;devtool&lt;/code&gt; 命令中传递一个句号(&lt;code&gt;--&lt;/code&gt;)，它后面的所有内容都会被当做一个新的 &lt;code&gt;process.argv&lt;/code&gt; 。例如:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;devtool script&lt;span class=&quot;selector-class&quot;&gt;.js&lt;/span&gt; --console -- &lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，你的脚本看起来像这样:&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; = process.argv[2];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&#39;&lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt;: %s&#39;, &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出:&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;input&lt;/span&gt;.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;quit-和-headless&quot;&gt;&lt;a href=&quot;#quit-和-headless&quot; class=&quot;headerlink&quot; title=&quot; --quit 和 --headless&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#codequitcode-and-codeheadlesscode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt;&lt;code&gt;--quit&lt;/code&gt; 和 &lt;code&gt;--headless&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;使用 &lt;code&gt;--quit&lt;/code&gt;，当遇到了一个错误(如语法错误或者未捕获的异常)时，进程将会安静的退出，并返回结束码&lt;code&gt;1&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;--headless&lt;/code&gt;，开发工具将不会被打开。&lt;/p&gt;
&lt;p&gt;这可以用于命令行脚本：&lt;/p&gt;
&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;devtool&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;quit&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;headless&lt;/span&gt; &amp;gt; &lt;span class=&quot;comment&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;png&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;browser-field&quot;&gt;&lt;a href=&quot;#browser-field&quot; class=&quot;headerlink&quot; title=&quot; --browser-field&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#codebrowserfieldcode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt;&lt;code&gt;--browser-field&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;一些模块为了更好的在浏览器中运行或许会提供一个入口点。当你需要这些模块时，你可以使用 &lt;code&gt;--browser-field&lt;/code&gt; 来支持 &lt;a href=&quot;https://github.com/defunctzombie/package-browser-field-spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;package.json flag&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;例如，我们可以使用 &lt;a href=&quot;https://github.com/Jam3/xhr-request&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;xhr-request&lt;/a&gt; ，当带有 &lt;code&gt;&amp;quot;browser&amp;quot;&lt;/code&gt; 字段被引用时，这个模块会使用 XHR。&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const request = require(&#39;xhr-request&#39;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;request(&#39;https&lt;span class=&quot;symbol&quot;&gt;://api&lt;/span&gt;.github.com/users/mattdesl/repos&#39;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    json: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, (&lt;span class=&quot;name&quot;&gt;err&lt;/span&gt;, data) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (&lt;span class=&quot;name&quot;&gt;err&lt;/span&gt;) throw err&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    console.log(&lt;span class=&quot;name&quot;&gt;data&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 shell 中执行:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; xhr-request &lt;span class=&quot;comment&quot;&gt;--save&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;devtool app.js &lt;span class=&quot;comment&quot;&gt;--browser-field&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，我们可以在 &lt;code&gt;Network&lt;/code&gt; 选项卡中审查请求:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/BWciXuh.png&quot; alt=&quot;requests&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;no-node-timers&quot;&gt;&lt;a href=&quot;#no-node-timers&quot; class=&quot;headerlink&quot; title=&quot; --no-node-timers&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#codenonodetimerscode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt;&lt;code&gt;--no-node-timers&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;默认情况下，我们提供全局的 &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt;，因此他们表现的像 Node.js 一样(返回一个带有 &lt;code&gt;unref()&lt;/code&gt; and &lt;code&gt;ref()&lt;/code&gt; 函数的对象)。&lt;/p&gt;
&lt;p&gt;但是，你可以禁用这个方法来改善对异步堆栈跟踪的支持。&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;devtool app.js --no-&lt;span class=&quot;keyword&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;-timers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/dmfOfMx.png&quot; alt=&quot;async&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;V8-Flags&quot;&gt;&lt;a href=&quot;#V8-Flags&quot; class=&quot;headerlink&quot; title=&quot; V8 Flags&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#v8-flags&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt;V8 Flags&lt;/h4&gt;&lt;p&gt;在当前目录，你可以创建一个 &lt;code&gt;.devtoolrc&lt;/code&gt; 文件来进行诸如 V8 flags 这样的高级设置。&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;v8&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;flags&quot;&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;--harmony-destructuring&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问&lt;a href=&quot;https://github.com/Jam3/devtool/blob/master/docs/rc-config.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;获取更多细节&lt;/p&gt;
&lt;h2 id=&quot;陷阱&quot;&gt;&lt;a href=&quot;#陷阱&quot; class=&quot;headerlink&quot; title=&quot; 陷阱&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#gotchas&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt;陷阱&lt;/h2&gt;&lt;p&gt;由于程序是在一个 Browser/Electron 环境中运行，而不是在一个真正的 Node.js 环境中。因此这里有&lt;a href=&quot;https://github.com/Jam3/devtool#gotchas&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;一些陷阱&lt;/a&gt;你需要注意。&lt;/p&gt;
&lt;h2 id=&quot;对比&quot;&gt;&lt;a href=&quot;#对比&quot; class=&quot;headerlink&quot; title=&quot; 对比&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#comparisons&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt;对比&lt;/h2&gt;&lt;p&gt;目前已经存在了一些 Node.js 调试器，所以你或许想知道他们之间的区别在哪。&lt;/p&gt;
&lt;h3 id=&quot;WebStorm-调试器&quot;&gt;&lt;a href=&quot;#WebStorm-调试器&quot; class=&quot;headerlink&quot; title=&quot; WebStorm 调试器&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#webstorm-debugger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt;WebStorm 调试器&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WebStorm&lt;/a&gt; 编辑器里面包含了一个非常强大的 Node.js 调试器。如果你已经使用 WebStorm 作为你的代码编辑器，那对你来说很棒。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cfwG6qY.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是，它缺少一些 Chrome 开发者工具中的功能，例如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个丰富的互动的控制台&lt;/li&gt;
&lt;li&gt;异常时暂停&lt;/li&gt;
&lt;li&gt;异步堆栈跟踪&lt;/li&gt;
&lt;li&gt;Promise 检查&lt;/li&gt;
&lt;li&gt;分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但因为你和你的 WebStorm 工作空间集成，所以你可以在调试时修改和编辑你的文件。它也是运行在一个真正的 Node/V8 环境中，而不像 &lt;code&gt;devtool&lt;/code&gt; 一样。因此对于大部分的 Node.js 应用程序来说它更稳健。&lt;/p&gt;
&lt;h3 id=&quot;iron-node&quot;&gt;&lt;a href=&quot;#iron-node&quot; class=&quot;headerlink&quot; title=&quot; iron-node&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#ironnode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt;iron-node&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/fkbLvoS.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;一个同样基于 Electron 的调试器是&lt;a href=&quot;https://github.com/s-a/iron-node&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iron-node&lt;/a&gt;。&lt;code&gt;iron-node&lt;/code&gt; 包含了一个内置的命令来重新编译原生插件，还有一个复杂的图形界面显示您的&lt;code&gt;package.json&lt;/code&gt; 和 &lt;code&gt;README.md&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;devtool&lt;/code&gt; 更侧重于把命令行、Unix 风格的管道和重定向和 Electron/Browser 的 API 当作有趣的用例。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;devtool&lt;/code&gt; 提供各种各样的功能来表现的更像 Node.js (例如 &lt;code&gt;require.main&lt;/code&gt;, &lt;code&gt;setTimeout&lt;/code&gt; 和 &lt;code&gt;process.exit&lt;/code&gt;)，并且覆盖了内部的 &lt;code&gt;require&lt;/code&gt; 机制作为 source maps，还有改进过的错误处理、断点注入、以及 &lt;code&gt;&amp;quot;browser&amp;quot;&lt;/code&gt; 字段的解决方案。&lt;/p&gt;
&lt;h3 id=&quot;node-inspector&quot;&gt;&lt;a href=&quot;#node-inspector&quot; class=&quot;headerlink&quot; title=&quot; node-inspector&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools#nodeinspector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt; &lt;/a&gt;node-inspector&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/T4fpxjU.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;你或许也喜欢 &lt;a href=&quot;https://github.com/node-inspector/node-inspector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;node-inspector&lt;/a&gt;，一个使用远程调试而不是构建在 Electron 之上的工具。&lt;/p&gt;
&lt;p&gt;这意味着你的代码将运行在一个真正的 Node 环境中，没有任何 &lt;code&gt;window&lt;/code&gt; 或其他的 Browser/Electron API 来污染作用域并导致某些模块出现问题。对于大型 Node.js 应用(即本地插件)来说它有一个强有力的支持，并且在开发者工具实例中拥有更多的控制权(即可以注入断点和支持网络请求)。&lt;/p&gt;
&lt;p&gt;然而，由于它重新实现了大量的调试技巧，因此对于开发来说感觉可能比最新版的 Chrome 开发者工具要慢、笨拙和脆弱。它经常会崩溃，往往导致 Node.js 开发人员很无奈。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;devtool&lt;/code&gt; 的目的是让那些从 Chrome 开发者工具中转过来的人觉得比较亲切，而且也增加了像 Browser/Electron APIs 这样的功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文根据 &lt;a href=&quot;http://mattdesl.svbtle.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MATT DESLAURIERS&lt;/a&gt; 的《&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Debugging Node.js in Chrome DevTools&lt;/a&gt;》所译，整个译文带有自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：&lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Debugging Node.js in Chrome DevTools&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文链接 : &lt;a href=&quot;http://mattdesl.svbtle.com/debugging-nodejs-in-chrome-devtools&quot;&gt;Debugging Node.js in Chrome DevTools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文作者 : &lt;a href=&quot;http://mattdesl.svbtle.com/&quot;&gt;MATT DESLAURIERS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译文出自 : &lt;a href=&quot;https://github.com/xitu/gold-miner&quot;&gt;掘金翻译计划&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者 : &lt;a href=&quot;https://github.com/sqrthree&quot;&gt;sqrthree (根号三)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;校对者: &lt;a href=&quot;https://github.com/shenxn&quot;&gt;shenxn&lt;/a&gt;、&lt;a href=&quot;https://github.com/CoderBOBO&quot;&gt;CoderBOBO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章介绍了一种在 Chrome 开发者工具里面开发、调试和分析 Node.js 应用程序的新方法。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="译文" scheme="http://blog.sqrtthree.com/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>GitBook 简明教程</title>
    <link href="http://blog.sqrtthree.com/2016/02/23/gitbook/"/>
    <id>http://blog.sqrtthree.com/2016/02/23/gitbook/</id>
    <published>2016-02-23T14:40:01.000Z</published>
    <updated>2016-02-23T14:40:01.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Modern book format and toolchain using Git and Markdown&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是 GitBook 项目主页上对 GitBook 的定义。&lt;/p&gt;
&lt;p&gt;GitBook 是一个命令行工具。通过它，你能够使用 Git 和 Markdown 来编排书本。并且通过工具可以自动生成相应的 HTML、PDF 和 epub 格式的文件。&lt;/p&gt;
&lt;p&gt;总之，就是好用，好使，加好看。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;刚好近日准备通过 GitBook 来写一些教程，这里就先简明介绍一下它的使用。嗯？我写的什么教程？ 哈哈，就不告诉你，等写好了再说 &amp;lt;(￣▽￣)&amp;gt; 哇哈哈…&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;因为 GitBook 是一个基于 &lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node&lt;/a&gt; 开发的命令行工具。因此需要您自行配置 &lt;a href=&quot;http://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node&lt;/a&gt; 和 &lt;a href=&quot;https://www.npmjs.com/package/npm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;npm&lt;/a&gt; 环境。如果你已经安装好这些环境之后，GitBook 的安装只需要一步就能完成！&lt;/p&gt;
&lt;figure class=&quot;highlight avrasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g gitbook-&lt;span class=&quot;keyword&quot;&gt;cli&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;GitBook 的用法非常简单，老规矩，先看一下我们都有哪些命令可以使用:&lt;/p&gt;
&lt;figure class=&quot;highlight vbscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gitbook help&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  build [book] [output] 	 build a book&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --format 	 Format &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; build &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; website; Values are website, json, ebook)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; 	 Minimum &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; level &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; display (&lt;span class=&quot;keyword&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; info; Values are debug, info, warn, &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;, disabled)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pdf [book] [output] 	 build a book &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; pdf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; 	 Minimum &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; level &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; display (&lt;span class=&quot;keyword&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; info; Values are debug, info, warn, &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;, disabled)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  epub [book] [output] 	 build a book &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; epub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; 	 Minimum &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; level &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; display (&lt;span class=&quot;keyword&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; info; Values are debug, info, warn, &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;, disabled)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mobi [book] [output] 	 build a book &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; mobi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; 	 Minimum &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; level &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; display (&lt;span class=&quot;keyword&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; info; Values are debug, info, warn, &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;, disabled)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  serve [book] 	 Build &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; serve a gitbook from a directory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --port 	 Port &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; listen &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --lrport 	 Port &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; livereload &lt;span class=&quot;built_in&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; listen &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;35729&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --watch 	 Enable/disable file watcher (&lt;span class=&quot;keyword&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --format 	 Format &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; build &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; website; Values are website, json, ebook)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    --&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; 	 Minimum &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; level &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; display (&lt;span class=&quot;keyword&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; info; Values are debug, info, warn, &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;, disabled)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  install [book] 	 install plugins dependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  init [directory] 	 create files &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; folders based &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; contents of SUMMARY.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实际上我们最常用的命令只有两个:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gitbook init&lt;/code&gt;: 初始化书籍目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gitbook serve&lt;/code&gt;: 在编写书籍时启动一个服务器，自动编译&amp;amp;更新内容，并在浏览器中预览&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;使用-1&quot;&gt;&lt;a href=&quot;#使用-1&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;h4 id=&quot;gitbook-init&quot;&gt;&lt;a href=&quot;#gitbook-init&quot; class=&quot;headerlink&quot; title=&quot;gitbook init&quot;&gt;&lt;/a&gt;gitbook init&lt;/h4&gt;&lt;p&gt;首先，通过终端(PC 下可使用命令提示符)进入到你想要书写内容的目录，然后执行 &lt;code&gt;gitbook init&lt;/code&gt; 命令，之后目录中会自动生成 &lt;code&gt;README.md&lt;/code&gt; 和 &lt;code&gt;SUMMARY.md&lt;/code&gt; 两个文件。&lt;/p&gt;
&lt;p&gt;这两个文件在 GitBook 项目中是必须存在的，其中 &lt;code&gt;README.md&lt;/code&gt; 是对书籍的简单介绍，&lt;code&gt;SUMMARY.md&lt;/code&gt; 是对书籍目录的描述，并且 GitBook 会通过该文件中的目录描述自动生成对应的目录和文件。&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;SUMMARY.md&lt;/code&gt; 文件中内容的格式是这样的:&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;* &lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;Chapter1&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;chapter1/README.md&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * [&lt;span class=&quot;string&quot;&gt;Section1.1&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;chapter1/section1.1.md&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  * [&lt;span class=&quot;string&quot;&gt;Section1.2&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;chapter1/section1.2.md&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;* &lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;Chapter2&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;chapter2/README.md&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你修改了 &lt;code&gt;SUMMARY.md&lt;/code&gt; 文件中的内容后，你可以再次使用 &lt;code&gt;gitbook init&lt;/code&gt; 来自动生成对应的目录和文件。&lt;/p&gt;
&lt;h4 id=&quot;Multi-Languages&quot;&gt;&lt;a href=&quot;#Multi-Languages&quot; class=&quot;headerlink&quot; title=&quot;Multi-Languages&quot;&gt;&lt;/a&gt;Multi-Languages&lt;/h4&gt;&lt;p&gt;如果你要写的书籍是多语言版，你只需要创建一个 &lt;code&gt;LANGS.md&lt;/code&gt; 文件，然后编写配置内容即可:&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;* &lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;English&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;en/&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;* &lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;French&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;fr/&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;* &lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;Español&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;es/&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;gitbook-serve&quot;&gt;&lt;a href=&quot;#gitbook-serve&quot; class=&quot;headerlink&quot; title=&quot;gitbook serve&quot;&gt;&lt;/a&gt;gitbook serve&lt;/h4&gt;&lt;p&gt;书籍目录结构创建完成以后，我们就可以使用 &lt;code&gt;gitbook serve&lt;/code&gt; 来编译和预览书籍了：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gitbook serve&lt;/code&gt; 命令实际上会首先调用 &lt;code&gt;gitbook build&lt;/code&gt; 编译书籍，完成以后会打开一个 web 服务器，监听在本地的 &lt;code&gt;4000&lt;/code&gt; 端口。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gitbook serve&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Live reload server started on port: 35729&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Press CTRL+C to quit ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;info: loading book configuration....OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;info: &lt;span class=&quot;keyword&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt; gitbook-&lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt;-highlight ....OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;info: &lt;span class=&quot;keyword&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt; gitbook-&lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;search&lt;/span&gt; ....OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;info: &lt;span class=&quot;keyword&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt; gitbook-&lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt;-sharing ....OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;info: &lt;span class=&quot;keyword&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt; gitbook-&lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt;-fontsettings ....OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;info: &lt;span class=&quot;keyword&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt; gitbook-&lt;span class=&quot;keyword&quot;&gt;plugin&lt;/span&gt;-livereload ....OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;info: &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; plugins loaded&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;info: &lt;span class=&quot;keyword&quot;&gt;start&lt;/span&gt; generation &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; website generator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;info: clean website generator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;info: OK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;info: generation &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; finished&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Starting&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;server&lt;/span&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Serving book &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;http&lt;/span&gt;://localhost:&lt;span class=&quot;number&quot;&gt;4000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后，你就可以使用浏览器打开 &lt;code&gt;http://127.0.0.1:4000&lt;/code&gt; 查看效果了。就是这么简单。&lt;/p&gt;
&lt;p&gt;页面效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/c1b6c55fca8e171120ce1fd73afcee699cc2a98f/68747470733a2f2f7261772e6769746875622e636f6d2f476974626f6f6b494f2f676974626f6f6b2f6d61737465722f707265766965772e706e67&quot; alt=&quot;https://camo.githubusercontent.com/c1b6c55fca8e171120ce1fd73afcee699cc2a98f/68747470733a2f2f7261772e6769746875622e636f6d2f476974626f6f6b494f2f676974626f6f6b2f6d61737465722f707265766965772e706e67&quot;&gt;&lt;/p&gt;
&lt;p&gt;你可以尽情的使用 &lt;code&gt;Markdown&lt;/code&gt; 来编写文章了，完全不需要关心样式和排版呢。&lt;/p&gt;
&lt;h2 id=&quot;GitBook-编辑器&quot;&gt;&lt;a href=&quot;#GitBook-编辑器&quot; class=&quot;headerlink&quot; title=&quot;GitBook 编辑器&quot;&gt;&lt;/a&gt;GitBook 编辑器&lt;/h2&gt;&lt;p&gt;如果你不喜欢使用命令行，这里也有 GitBook 可视化编辑器，&lt;a href=&quot;https://www.gitbook.com/editor/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.gitbook.com/editor/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;GitBook-com&quot;&gt;&lt;a href=&quot;#GitBook-com&quot; class=&quot;headerlink&quot; title=&quot;GitBook.com&quot;&gt;&lt;/a&gt;GitBook.com&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.gitbook.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitBook.com&lt;/a&gt; 是一个围绕 GitBook 发行书籍的社区，于 2014 年初创，GitBook.com 提供免费和付费的服务，而且免费账户就可以享受诸多服务，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 本私有书籍&lt;/li&gt;
&lt;li&gt;托管不限数量的公开书籍&lt;/li&gt;
&lt;li&gt;售卖不限数量的书籍，并分享 80% 的书籍收入&lt;/li&gt;
&lt;li&gt;不限数量的协作者&lt;/li&gt;
&lt;li&gt;免费的在线书籍编辑器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;其他命令&quot;&gt;&lt;a href=&quot;#其他命令&quot; class=&quot;headerlink&quot; title=&quot;其他命令&quot;&gt;&lt;/a&gt;其他命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gitbook build&lt;/code&gt;: 会生成相应的 HTML 文件供分发。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gitbook pdf&lt;/code&gt;: 生成 PDF 文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gitbook epub&lt;/code&gt;: 生成 epub 文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gitbook mobi&lt;/code&gt;: 生成 mobi 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;高级技巧&quot;&gt;&lt;a href=&quot;#高级技巧&quot; class=&quot;headerlink&quot; title=&quot;高级技巧&quot;&gt;&lt;/a&gt;高级技巧&lt;/h2&gt;&lt;h3 id=&quot;个性化配置&quot;&gt;&lt;a href=&quot;#个性化配置&quot; class=&quot;headerlink&quot; title=&quot;个性化配置&quot;&gt;&lt;/a&gt;个性化配置&lt;/h3&gt;&lt;p&gt;我们通过配置 &lt;code&gt;book.json&lt;/code&gt; 文件来修改 &lt;code&gt;GitBook&lt;/code&gt; 在编译书籍时的行为，例如：修改书籍的名称，显示效果等等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GitBook&lt;/code&gt; 在编译书籍的时候会读取书籍源码顶层目录中的 &lt;code&gt;book.json&lt;/code&gt;，&lt;code&gt;book.json&lt;/code&gt; 支持的具体配置请参考&lt;a href=&quot;http://help.gitbook.com/format/configuration.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装插件&quot;&gt;&lt;a href=&quot;#安装插件&quot; class=&quot;headerlink&quot; title=&quot;安装插件&quot;&gt;&lt;/a&gt;安装插件&lt;/h3&gt;&lt;p&gt;你可以通过 &lt;code&gt;gitbook install&lt;/code&gt; 命令来安装一些诸如 &lt;a href=&quot;https://github.com/GitbookIO/plugin-disqus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;disqus&lt;/a&gt;、&lt;a href=&quot;https://github.com/citizenmatt/gitbook-plugin-multipart&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;multipart&lt;/a&gt; 这些实用的第三方插件。&lt;/p&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Modern book format and toolchain using Git and Markdown&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是 GitBook 项目主页上对 GitBook 的定义。&lt;/p&gt;
&lt;p&gt;GitBook 是一个命令行工具。通过它，你能够使用 Git 和 Markdown 来编排书本。并且通过工具可以自动生成相应的 HTML、PDF 和 epub 格式的文件。&lt;/p&gt;
&lt;p&gt;总之，就是好用，好使，加好看。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工具" scheme="http://blog.sqrtthree.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>聊一聊 JS 中的『隐式类型转换』</title>
    <link href="http://blog.sqrtthree.com/2016/01/23/implicit-type-conversion/"/>
    <id>http://blog.sqrtthree.com/2016/01/23/implicit-type-conversion/</id>
    <published>2016-01-22T17:53:21.000Z</published>
    <updated>2016-01-22T17:53:21.000Z</updated>
    
    <content type="html">&lt;p&gt;类型转换还不行？还非得隐式？这是什么高级玩意？&lt;/p&gt;
&lt;p&gt;废话不多说，我们先上一盘🌰，额，不对，先看一个例子吧。&lt;/p&gt;
&lt;figure class=&quot;highlight basic&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;3 &lt;/span&gt;+ true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;实际上在大多数编程语言中，都会认为上面这个表达式是错误的。因为布尔表达式与算术运算是不兼容的。尤其是在静态语言中，甚至不会被运行运行。即使是动态语言中，通常虽然可以让程序运行，但是会抛出一个异常。&lt;/p&gt;
&lt;p&gt;然而，然而， Javascript 不仅运行程序能够正常运行，而且还会顺利地产生结果 4。Javascript 真的是对类型错误出奇的宽容啊。看起来很像是一件好事对不对？&lt;/p&gt;
&lt;p&gt;基本上，在 Javascript 中，只有在一些极少数情况下才会因为类型错误而抛出一个异常。诸如: 调用非函数对象或者获取 null / undefined 的属性时。&lt;/p&gt;
&lt;p&gt;但是在大多数情况下，Javascript 都是不会抛出异常的。这个『小婊砸』反而按照多种多样的转换协议偷偷的强制转换为她期望的值。诺，你看，还花样转换呢，真会玩嘛。这就是所谓的『隐式类型转换』。&lt;/p&gt;
&lt;p&gt;那么，上面那个例子中，究竟是发生了什么样的转换方式呢？&lt;/p&gt;
&lt;p&gt;首先，Javascript 这个『小婊砸』在遇到算数运算符(&lt;code&gt;-&lt;/code&gt; 、&lt;code&gt;*&lt;/code&gt; 、&lt;code&gt;/&lt;/code&gt; 和 &lt;code&gt;%&lt;/code&gt;)的时候会在运算之前将参与运算的双方转换成数字。&lt;/p&gt;
&lt;p&gt;那么问题又来了，&lt;code&gt;true&lt;/code&gt; 怎么就转换成数字了呢？实际上我们通过 &lt;code&gt;Number(true)&lt;/code&gt; 就可以看到， &lt;code&gt;true&lt;/code&gt; 转换为数字之后就是为 1，相反，&lt;code&gt;false&lt;/code&gt; 转换为数字之后就对应为 0。&lt;/p&gt;
&lt;p&gt;细心的你可能发现我在上面并没有提到 &lt;code&gt;+&lt;/code&gt; 运算符，那是因为它更复杂。因为它既承担着数字相加，又肩负着字符串连接操作的重任。具体的行为取决于参数的类型。&lt;/p&gt;
&lt;p&gt;但是，如果一个数字和一个字符串相加，会碰撞出什么样的火花呢？&lt;/p&gt;
&lt;p&gt;显然 Javascript 这个『小婊砸』更偏爱字符串多一点，她会将数字(&lt;code&gt;toString()&lt;/code&gt;)转换为字符串，然后执行字符串连接操作。&lt;/p&gt;
&lt;p&gt;例如: &lt;/p&gt;
&lt;figure class=&quot;highlight basic&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;    // &lt;span class=&quot;string&quot;&gt;&quot;12&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1 &lt;/span&gt;+ &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;;    // &lt;span class=&quot;string&quot;&gt;&quot;12&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，注意，Javascript 对操作顺序非常敏感，以至于会发生这样的事情:&lt;/p&gt;
&lt;figure class=&quot;highlight basic&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1 &lt;/span&gt;+ &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;;    // &lt;span class=&quot;string&quot;&gt;&quot;33&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为加法运算是自左向右的，因此它等同于下面的表达式:&lt;/p&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt;;    &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;33&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;再来看这一个例子:&lt;/p&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; == &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;相信你一定轻松的猜到了结果对不对？&lt;/p&gt;
&lt;p&gt;但是，哼，你以为我的问题会这么简单么？那岂不是太小看你了。&lt;/p&gt;
&lt;p&gt;我们都知道，Javascript 中，数字 &lt;code&gt;0&lt;/code&gt; 为假，&lt;code&gt;非0&lt;/code&gt; 均为真, 那么我想问的是，在上面的条件语句中，到底是 &lt;code&gt;1&lt;/code&gt; 被隐式类型转换了呢还是 &lt;code&gt;true&lt;/code&gt; 被隐式类型转换了呢？&lt;/p&gt;
&lt;p&gt;实际上在条件判断运算 &lt;code&gt;==&lt;/code&gt; 中的转换规则是这样的:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果比较的两者中有布尔值(Boolean)，会把 &lt;code&gt;Boolean&lt;/code&gt; 先转换为对应的 Number，即 0 和 1，然后进行比较。&lt;/li&gt;
&lt;li&gt;如果比较的双方中有一方为 &lt;code&gt;Number&lt;/code&gt;，一方为 &lt;code&gt;String&lt;/code&gt;时，会把 &lt;code&gt;String&lt;/code&gt; 通过 &lt;code&gt;Number()&lt;/code&gt; 方法转换为数字，然后进行比较。&lt;/li&gt;
&lt;li&gt;如果比较的双方中有一方为 &lt;code&gt;Boolean&lt;/code&gt;，一方为 &lt;code&gt;String&lt;/code&gt;时，则会将空字符串&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;转换为 &lt;code&gt;false&lt;/code&gt;，除此外的一切字符串转换为 &lt;code&gt;true&lt;/code&gt;，然后进行比较。&lt;/li&gt;
&lt;li&gt;如果比较的双方中有一方为 &lt;code&gt;Number&lt;/code&gt;，一方为&lt;code&gt;Object&lt;/code&gt;时，则会调用 &lt;code&gt;valueOf&lt;/code&gt; 方法将&lt;code&gt;Object&lt;/code&gt;转换为数字，然后进行比较。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如: &lt;/p&gt;
&lt;figure class=&quot;highlight basic&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1 &lt;/span&gt;== &amp;#123; valueOf: function() &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&amp;#125; &amp;#125;    // true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;1 &lt;/span&gt;+ &amp;#123; valueOf: function() &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&amp;#125; &amp;#125;    // &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要强调的是，在 Javascript 中，只有 &lt;code&gt;空字符串&lt;/code&gt;、&lt;code&gt;数字0&lt;/code&gt;、&lt;code&gt;false&lt;/code&gt;、&lt;code&gt;null&lt;/code&gt;、&lt;code&gt;undefined&lt;/code&gt; 和 &lt;code&gt;NaN&lt;/code&gt; 这 6 个值为假之外，其他所有的值均为真值。&lt;/p&gt;
&lt;p&gt;说到 &lt;code&gt;NaN&lt;/code&gt;，就不得不提一下 &lt;code&gt;isNaN()&lt;/code&gt; 方法，&lt;code&gt;isNaN()&lt;/code&gt; 方法自带隐式类型转换，该方法在测试其参数之前，会先调用 &lt;code&gt;Number()&lt;/code&gt; 方法将其转换为数字。所以 &lt;code&gt;isNaN(&amp;#39;1&amp;#39;)&lt;/code&gt; 这个语句中明明用一个字符串去测试，返回值仍然为 &lt;code&gt;false&lt;/code&gt; 也就不足为怪了。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;+&lt;/code&gt; 号运算中还有一种更复杂的情况，那就是数字/字符串和对象进行运算的时候，上面已经举例说明了数字和对象运算的情况，我们再来说一下字符串和对象运算的情况。&lt;/p&gt;
&lt;p&gt;当字符串和对象进行 &lt;code&gt;+&lt;/code&gt; 运算的时候，Javascript 会通过对象的 &lt;code&gt;toString()&lt;/code&gt; 方法将其自身转换为字符串，然后进行连接操作。&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt; + &amp;#123; toString: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&amp;#125; &amp;#125;    &lt;span class=&quot;comment&quot;&gt;// &quot;11&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之所以说它特殊，是因为当一个对象同时包含 &lt;code&gt;toString()&lt;/code&gt; 和 &lt;code&gt;valueOf()&lt;/code&gt; 方法的时候，运算符 &lt;code&gt;+&lt;/code&gt; 应该调用哪个方法并不明显(做字符串连接还是加法应该根据其参数类型，但是由于隐式类型转换的存在，类型并不显而易见。)，Javascript 会盲目的选择 &lt;code&gt;valueOf()&lt;/code&gt; 方法而不是 &lt;code&gt;toString()&lt;/code&gt; 来解决这个问题。这就意味着如果你打算对一个对象做字符串连接的操作，但结果却是……&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    toString: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Object CustomObj&quot;&lt;/span&gt;; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    valueOf: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;Object: &quot;&lt;/span&gt; + obj);    &lt;span class=&quot;comment&quot;&gt;// &quot;Object: 1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;隐式类型转换会给我们造成很多麻烦，那么该怎么避免呢？&lt;/p&gt;
&lt;p&gt;建议在所有使用条件判断的时候都使用全等运算符 &lt;code&gt;===&lt;/code&gt; 来进行条件判断。全等运算符会先进行数据类型判断，并且不会发生隐式类型转换。&lt;/p&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;类型转换还不行？还非得隐式？这是什么高级玩意？&lt;/p&gt;
&lt;p&gt;废话不多说，我们先上一盘🌰，额，不对，先看一个例子吧。&lt;/p&gt;
&lt;figure class=&quot;highlight basic&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;3 &lt;/span&gt;+ true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 开发者年度调查报告</title>
    <link href="http://blog.sqrtthree.com/2015/12/26/javascript-developer-survey-results/"/>
    <id>http://blog.sqrtthree.com/2015/12/26/javascript-developer-survey-results/</id>
    <published>2015-12-26T10:41:10.000Z</published>
    <updated>2015-12-26T10:41:10.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文链接 : &lt;a href=&quot;https://ponyfoo.com/articles/javascript-developer-survey-results&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Developer Survey Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文作者 : &lt;a href=&quot;https://ponyfoo.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ponyfoo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译文出自 : &lt;a href=&quot;https://github.com/xitu/gold-miner&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;掘金翻译计划&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者 : &lt;a href=&quot;https://github.com/sqrthree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sqrthree(根号三)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;校对者: &lt;a href=&quot;https://github.com/Zhangdroid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zhangdroid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;There were over 5000 responses, 5350 to be exact, and I can’t wait to share the details. Before that I want to thank everyone who chipped in. This is a great time to be a part of the JavaScript community, and I’m truly excited for things to come!&lt;/p&gt;
&lt;p&gt;截止目前有超过了 5000 人参与了(该次调查)，准确的说是 5350 人。我迫不及待的想要和大家分享一下这次调查的细节。在分享之前我想要感谢参与调查的每一个人。这是 Javascript 社区一个伟大的时刻，我对未来的事情感到无比激动。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;I didn’t anticipate such high interest, and next time I’ll make some improvements to the format. Namely, I’ll put the survey up on GitHub first so that the community can collaborate on the questions and options for a couple of weeks before launching the survey. That way, I’ll be able to produce more accurate results and avoid complaints like “I am shocked you didn’t include Emacs!”.&lt;/p&gt;
&lt;p&gt;我没有想到大家如此积极，下一次我一定会对版式做一些改进。换句话说，就是我会先将问卷调查放到 &lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github&lt;/a&gt; 上，以便于在开始调查之前，社区有一到两周的时间来收集改进问题和选项。这样，我就可以得到更精确的结果，也可以避免出现诸如 “我很震惊你竟然没有包含 Emacs” 这样的抱怨。&lt;/p&gt;
&lt;p&gt;Now, onto the survey results. I’ll remain impartial in delivering the results, so that you can come to your own unbiased conclusions.&lt;/p&gt;
&lt;p&gt;现在，基于调查结果。我将保持中立的态度发表一下调查结果，这样你就可以得出自己的公正的结论。&lt;/p&gt;
&lt;p&gt;##What type of JavaScript do you write?&lt;/p&gt;
&lt;h2 id=&quot;你写什么类型的-Javascript？&quot;&gt;&lt;a href=&quot;#你写什么类型的-Javascript？&quot; class=&quot;headerlink&quot; title=&quot;你写什么类型的 Javascript？&quot;&gt;&lt;/a&gt;你写什么类型的 Javascript？&lt;/h2&gt;&lt;p&gt;A whooping 97.4% of respondents write JavaScript for a web browser, while 37% of them write mobile web applications. Over 3000 of them – with 56.6% – also write server-side JavaScript. Among those who took the poll, 5.5% use JavaScript in some sort of embedded environment, such as Tessel or a Raspberry Pi.&lt;/p&gt;
&lt;p&gt;有高达 97.4% 的受访者用 Javascript 写 web 浏览器程序，其中有 37% 的受访者写移动端 web 程序。超过 3000 人(56.6%) 也写服务端的 Javascript。在这些参与调查者的人中间，有 5.5% 的人还在一些嵌入式环境中使用 Javascript，例如 Tessel 或 a Raspberry Pi (树莓派).&lt;/p&gt;
&lt;p&gt;A few participants replied they use JavaScript in some other places, notably in developing CLI and desktop applications. A few also mentioned Pebble and Apple TV. These fell in the &lt;strong&gt;Other&lt;/strong&gt; category, with 2.2% of the votes.&lt;/p&gt;
&lt;p&gt;少数参与者表示他们也在其他一些地方使用 Javascript，尤其是在开发 CLI 和桌面应用方面。还有少数提到了 Pebble 和 Apple TV. 这些都归类在 &lt;strong&gt;Other&lt;/strong&gt; 一类中，占总票数的 2.2%.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/c0q4LvI.png&quot; alt=&quot;An screenshot of the percentages for the first question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Where-do-you-use-JavaScript&quot;&gt;&lt;a href=&quot;#Where-do-you-use-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;Where do you use JavaScript?&quot;&gt;&lt;/a&gt;Where do you use JavaScript?&lt;/h2&gt;&lt;h2 id=&quot;你在哪里使用-Javascript？&quot;&gt;&lt;a href=&quot;#你在哪里使用-Javascript？&quot; class=&quot;headerlink&quot; title=&quot;你在哪里使用 Javascript？&quot;&gt;&lt;/a&gt;你在哪里使用 Javascript？&lt;/h2&gt;&lt;p&gt;Unsurprisingly, 94.9% of voters use JavaScript at work. However, a large portion of the tallied – with 82.3% of the votes – also use it on side projects. Other responses included for teaching and learning, for fun, and for non-profits.&lt;/p&gt;
&lt;p&gt;不出所料地，有 94.9% 的参与者在工作中使用 Javascript，但是，统计中也有很大一部分(占总票数的 82.3%) 参与者也在其他项目中使用。其他的回复则包括了教学，好玩，和非盈利目的的使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/K5nSsyr.png&quot; alt=&quot;An screenshot of the percentages for the second question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;How-long-have-you-been-writing-JavaScript&quot;&gt;&lt;a href=&quot;#How-long-have-you-been-writing-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;How long have you been writing JavaScript?&quot;&gt;&lt;/a&gt;How long have you been writing JavaScript?&lt;/h2&gt;&lt;h2 id=&quot;你写-Javascript-多长时间了？&quot;&gt;&lt;a href=&quot;#你写-Javascript-多长时间了？&quot; class=&quot;headerlink&quot; title=&quot;你写 Javascript 多长时间了？&quot;&gt;&lt;/a&gt;你写 Javascript 多长时间了？&lt;/h2&gt;&lt;p&gt;Over 33% of the surveyed have been writing JavaScript code for over six years. Out of those who answered the poll, 5.2% started at most a year ago, 12.4% two years ago, and 15.1% three years ago. That makes it 32.7% people who started writing JavaScript in recent years, out of 5350 voters.&lt;/p&gt;
&lt;p&gt;超过 33% 的受访者表示他们写 Javascript 代码已经超过了 6 年时间。除了这些人之外，有 5.2% 的人一年前开始写 Javascript 代码，12.4% 的人是两年前，还有 15.1% 的人是三年前。这说明在 5350 个投票者中，有 32.7% 的人是在近几年才开始写 Javascript 的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/P5ev9fL.png&quot; alt=&quot;An screenshot of the percentages for the third question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Which-compile-to-JavaScript-languages-do-you-use-if-any&quot;&gt;&lt;a href=&quot;#Which-compile-to-JavaScript-languages-do-you-use-if-any&quot; class=&quot;headerlink&quot; title=&quot;Which compile-to-JavaScript languages do you use, if any?&quot;&gt;&lt;/a&gt;Which compile-to-JavaScript languages do you use, if any?&lt;/h2&gt;&lt;h2 id=&quot;如果可以的话，你使用哪种-compile-to-JavaScript-编译为-JavaScript-的-语言？&quot;&gt;&lt;a href=&quot;#如果可以的话，你使用哪种-compile-to-JavaScript-编译为-JavaScript-的-语言？&quot; class=&quot;headerlink&quot; title=&quot;如果可以的话，你使用哪种 compile-to-JavaScript(编译为 JavaScript 的) 语言？&quot;&gt;&lt;/a&gt;如果可以的话，你使用哪种 compile-to-JavaScript(编译为 JavaScript 的) 语言？&lt;/h2&gt;&lt;p&gt;A whooping &lt;strong&gt;85%&lt;/strong&gt; replied that they compile ES6 into ES5. Meanwhile 15% still use CoffeeScript, 15.2% use TypeScript, and a measly 1.1% reported they use Dart.&lt;/p&gt;
&lt;p&gt;有高达 &lt;strong&gt;85%&lt;/strong&gt; 的受访者表示他们使用 ES6 编译成 ES5。与此同时，有 15% 的人仍然使用 &lt;code&gt;CoffeeScript&lt;/code&gt;，15.2% 的人使用 &lt;code&gt;TypeScript&lt;/code&gt;，只有区区 1.1% 的人使用 &lt;code&gt;Dart&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This was one of the questions I wish I’d approached more collaboratively, as it got 13.8% of &lt;em&gt;“Other”&lt;/em&gt; responses. The vast majority of these answers were ClojureScript, elm, Flow, and JSX.&lt;/p&gt;
&lt;p&gt;这是我想进一步探讨的问题之一，因为有 13.8% 的人选择了 &lt;em&gt;“Other”&lt;/em&gt;，选择 &lt;em&gt;“Other”&lt;/em&gt; 的绝大部分的回答是 &lt;code&gt;ClojureScript&lt;/code&gt;, &lt;code&gt;elm&lt;/code&gt;, &lt;code&gt;Flow&lt;/code&gt;, 和 &lt;code&gt;JSX&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/12mL6u6.png&quot; alt=&quot;An screenshot of the percentages for the fourth question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;What-JavaScript-stylistic-choices-do-you-prefer&quot;&gt;&lt;a href=&quot;#What-JavaScript-stylistic-choices-do-you-prefer&quot; class=&quot;headerlink&quot; title=&quot;What JavaScript stylistic choices do you prefer?&quot;&gt;&lt;/a&gt;What JavaScript stylistic choices do you prefer?&lt;/h2&gt;&lt;h2 id=&quot;你更喜欢哪一种-Javascript-编程风格？&quot;&gt;&lt;a href=&quot;#你更喜欢哪一种-Javascript-编程风格？&quot; class=&quot;headerlink&quot; title=&quot;你更喜欢哪一种 Javascript 编程风格？&quot;&gt;&lt;/a&gt;你更喜欢哪一种 Javascript 编程风格？&lt;/h2&gt;&lt;p&gt;The vast majority of JavaScript developers who answered the poll seem to favor semicolons, at 79.9%. In contrast, 11% indicated they prefer not to use semicolons. When it comes to commas, 44.9% favor to place them after an expression, while 4.9% prefer to use comma-first syntax. When it comes to indentation, 65.5% prefer spaces, while 29.1% would rather use tabs.&lt;/p&gt;
&lt;p&gt;回答这个问题的绝大多数开发者(79.9%)都选择了分号。相反，有 11% 的开发者指出更喜欢不使用分号。&lt;/p&gt;
&lt;p&gt;逗号方面，44.9% 的开发者喜欢将逗号放在表达式的末尾，然而有 4.9% 的开发者喜欢先写逗号。&lt;/p&gt;
&lt;p&gt;缩进方面，65.5% 的开发者更喜欢使用空格，然而有 29.1% 的开发者则更喜欢使用制表符(Tab)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/xwFVmS1.png&quot; alt=&quot;An screenshot of the percentages for the fifth question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Which-ES5-features-do-you-use&quot;&gt;&lt;a href=&quot;#Which-ES5-features-do-you-use&quot; class=&quot;headerlink&quot; title=&quot;Which ES5 features do you use?&quot;&gt;&lt;/a&gt;Which ES5 features do you use?&lt;/h2&gt;&lt;h2 id=&quot;你使用过-ES5-的哪些特性？&quot;&gt;&lt;a href=&quot;#你使用过-ES5-的哪些特性？&quot; class=&quot;headerlink&quot; title=&quot;你使用过 ES5 的哪些特性？&quot;&gt;&lt;/a&gt;你使用过 ES5 的哪些特性？&lt;/h2&gt;&lt;p&gt;While 79.2% of respondents are on board with functional &lt;code&gt;Array&lt;/code&gt; methods, and 76.3% indicated they use strict mode, &lt;code&gt;Object.create&lt;/code&gt; sees a 30% adoption and getters and setters are only used by 28%.&lt;/p&gt;
&lt;p&gt;79.2% 的受访者都使用过 &lt;code&gt;Array(数组)&lt;/code&gt; 的一些实用的方法，76.3% 的开发者使用严格模式。30% 的开发者使用 &lt;code&gt;Object.create&lt;/code&gt;，而使用过 getters 和 setters 的开发者仅占了 28%.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/W9pUOua.png&quot; alt=&quot;An screenshot of the percentages for the sixth question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Which-ES6-features-do-you-use&quot;&gt;&lt;a href=&quot;#Which-ES6-features-do-you-use&quot; class=&quot;headerlink&quot; title=&quot;Which ES6 features do you use?&quot;&gt;&lt;/a&gt;Which ES6 features do you use?&lt;/h2&gt;&lt;h2 id=&quot;你使用过-ES6-的哪些特性？&quot;&gt;&lt;a href=&quot;#你使用过-ES6-的哪些特性？&quot; class=&quot;headerlink&quot; title=&quot;你使用过 ES6 的哪些特性？&quot;&gt;&lt;/a&gt;你使用过 ES6 的哪些特性？&lt;/h2&gt;&lt;p&gt;Notably, arrow functions are the most used ES6 feature among those who took the poll: 79.6%. Let and const together took 77.8% of the pollsters, and promises are also strong with 74.4% adoption. Unsurprisingly, only 4% of the respondents have played around with proxies. Only 13.1% of users indicated they’ve used symbols, while over 30% say they use iterators.&lt;/p&gt;
&lt;p&gt;显然，在这些投票中，箭头函数是使用最多的 ES6 特性，占了 79.6%。在所有调查者中，Let 和 const 加在一起一共占了 77.8% 。promises 也有 74.4% 的开发者采用。不出所料，只有 4% 的参与者使用 proxies，只有 13.1% 的用户表示他们使用 symbols，同时有超过 30% 的人说他们使用 iterators.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/okcvuos.png&quot; alt=&quot;An screenshot of the percentages for the seventh question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Do-you-write-tests&quot;&gt;&lt;a href=&quot;#Do-you-write-tests&quot; class=&quot;headerlink&quot; title=&quot;Do you write tests?&quot;&gt;&lt;/a&gt;Do you write tests?&lt;/h2&gt;&lt;h2 id=&quot;你写测试么？&quot;&gt;&lt;a href=&quot;#你写测试么？&quot; class=&quot;headerlink&quot; title=&quot;你写测试么？&quot;&gt;&lt;/a&gt;你写测试么？&lt;/h2&gt;&lt;p&gt;While 21.7% never write any tests, most do write some tests, and 34.8% always write tests.&lt;/p&gt;
&lt;p&gt;有 21.7% 的开发者表示他们从不写任何测试。大部分人偶尔写一些测试。34.8% 的人总是写测试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/0C944YL.png&quot; alt=&quot;An screenshot of the percentages for the eighth question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Do-you-run-Continuous-Integration-tests&quot;&gt;&lt;a href=&quot;#Do-you-run-Continuous-Integration-tests&quot; class=&quot;headerlink&quot; title=&quot;Do you run Continuous Integration tests?&quot;&gt;&lt;/a&gt;Do you run Continuous Integration tests?&lt;/h2&gt;&lt;h2 id=&quot;你运行持续集成测试吗？&quot;&gt;&lt;a href=&quot;#你运行持续集成测试吗？&quot; class=&quot;headerlink&quot; title=&quot;你运行持续集成测试吗？&quot;&gt;&lt;/a&gt;你运行持续集成测试吗？&lt;/h2&gt;&lt;p&gt;There’s a similar story with CI, although many more people don’t use a CI server – over 40%. Almost 60% of respondents use CI at least sometimes, of which 32% always run tests on a CI serve.&lt;/p&gt;
&lt;p&gt;和 CI 类似，尽管许多人(超过40%)不使用 CI 服务器，但是差不多有 60% 的人表示在少数时间会使用 CI，其中有 32% 的人总是在 CI 服务器上运行测试代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/P04bJHG.png&quot; alt=&quot;An screenshot of the percentages for the ninth question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;How-do-you-run-tests&quot;&gt;&lt;a href=&quot;#How-do-you-run-tests&quot; class=&quot;headerlink&quot; title=&quot;How do you run tests?&quot;&gt;&lt;/a&gt;How do you run tests?&lt;/h2&gt;&lt;h2 id=&quot;你怎么运行测试代码？&quot;&gt;&lt;a href=&quot;#你怎么运行测试代码？&quot; class=&quot;headerlink&quot; title=&quot;你怎么运行测试代码？&quot;&gt;&lt;/a&gt;你怎么运行测试代码？&lt;/h2&gt;&lt;p&gt;59% like to run automated browser tests with PhantomJS or similar, and 51.3% also prefer to perform manual testing on a web browser. Automation in server-side tests amounts to 53.5% votes.&lt;/p&gt;
&lt;p&gt;59% 的开发者喜欢使用 PhantomJS 或是类似的工具来运行自动化浏览器测试。也有 51.3% 的开发者喜欢在 web 浏览器上手动运行测试。有 53.5% 的投票者会在服务器端进行自动化测试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/v09gVdQ.png&quot; alt=&quot;An screenshot of the percentages for the tenth question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;What-unit-testing-libraries-do-you-use&quot;&gt;&lt;a href=&quot;#What-unit-testing-libraries-do-you-use&quot; class=&quot;headerlink&quot; title=&quot;What unit testing libraries do you use?&quot;&gt;&lt;/a&gt;What unit testing libraries do you use?&lt;/h2&gt;&lt;h2 id=&quot;你使用过哪个单元测试库？&quot;&gt;&lt;a href=&quot;#你使用过哪个单元测试库？&quot; class=&quot;headerlink&quot; title=&quot;你使用过哪个单元测试库？&quot;&gt;&lt;/a&gt;你使用过哪个单元测试库？&lt;/h2&gt;&lt;p&gt;It would seem most voters prefer either Mocha or Jasmine to run their JavaScript tests, although Tape received a healthy 9.8% of the ballots.&lt;/p&gt;
&lt;p&gt;似乎大部分投票者都使用 Mocha 或是 Jasmine 来运行他们的 Javascript 测试用例。而 Tape 收到了 9.8% 的选票。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/20nUzJu.png&quot; alt=&quot;An screenshot of the percentages for the eleventh question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;What-code-quality-tools-do-you-use&quot;&gt;&lt;a href=&quot;#What-code-quality-tools-do-you-use&quot; class=&quot;headerlink&quot; title=&quot;What code quality tools do you use?&quot;&gt;&lt;/a&gt;What code quality tools do you use?&lt;/h2&gt;&lt;h2 id=&quot;你使用过哪个代码质量检测工具？&quot;&gt;&lt;a href=&quot;#你使用过哪个代码质量检测工具？&quot; class=&quot;headerlink&quot; title=&quot;你使用过哪个代码质量检测工具？&quot;&gt;&lt;/a&gt;你使用过哪个代码质量检测工具？&lt;/h2&gt;&lt;p&gt;It would seem like respondents are divided between ESLint and JSHint, but JSLint is surprisingly strong after all these years, at almost 30%.&lt;/p&gt;
&lt;p&gt;看起来受访者在 ESLint 和 JSHint之间分成了两派，但是 JSLint 还是有差不多 30% 的投票率，在这么多年之后势头还是惊人的强劲。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/RC8ePwr.png&quot; alt=&quot;An screenshot of the percentages for the 12th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;How-do-you-prefer-handling-client-side-dependencies&quot;&gt;&lt;a href=&quot;#How-do-you-prefer-handling-client-side-dependencies&quot; class=&quot;headerlink&quot; title=&quot;How do you prefer handling client-side dependencies?&quot;&gt;&lt;/a&gt;How do you prefer handling client-side dependencies?&lt;/h2&gt;&lt;h2 id=&quot;你通过哪种方式来处理客户端依赖关系？&quot;&gt;&lt;a href=&quot;#你通过哪种方式来处理客户端依赖关系？&quot; class=&quot;headerlink&quot; title=&quot;你通过哪种方式来处理客户端依赖关系？&quot;&gt;&lt;/a&gt;你通过哪种方式来处理客户端依赖关系？&lt;/h2&gt;&lt;p&gt;npm took over as the client-side dependency management system of choice, with 60% of the votes casted their way. Bower still holds 20% of the audience, and plain old &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; downloading and insertion managed to get 13.7% votes.&lt;/p&gt;
&lt;p&gt;npm 接管了客户端依赖管理系统的天下，有超过 60% 的投票就是证明它的方式。Bower 仍然有 20% 的观众，而通过下载和插入 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签来管理的普通旧式方法则获得了 13.7% 的选票。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TOQiSZP.png&quot; alt=&quot;An screenshot of the percentages for the 13th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;What’s-your-preferred-build-script-solution&quot;&gt;&lt;a href=&quot;#What’s-your-preferred-build-script-solution&quot; class=&quot;headerlink&quot; title=&quot;What’s your preferred build script solution?&quot;&gt;&lt;/a&gt;What’s your preferred build script solution?&lt;/h2&gt;&lt;h2 id=&quot;你首选的脚本构建方案是什么？&quot;&gt;&lt;a href=&quot;#你首选的脚本构建方案是什么？&quot; class=&quot;headerlink&quot; title=&quot;你首选的脚本构建方案是什么？&quot;&gt;&lt;/a&gt;你首选的脚本构建方案是什么？&lt;/h2&gt;&lt;p&gt;Build tooling choices are divided, partially due to the healthy amount of different options to choose from. Gulp is the most popular, with over 40% of the votes. Using &lt;code&gt;npm run&lt;/code&gt; is close by, at 27.8%, and Grunt got 18.5% of the audience.&lt;/p&gt;
&lt;p&gt;构建工具的选择很分散，部分原因是有太多的不同的选项可供选择。Gulp 最流行，有着超过 40% 的选票，紧接着的是使用 &lt;code&gt;npm run&lt;/code&gt;，有 27.8%。Grunt 得到了 18.5% 的支持者。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/xXlEE3E.png&quot; alt=&quot;An screenshot of the percentages for the 14th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;What’s-your-preferred-JavaScript-module-loading-tool&quot;&gt;&lt;a href=&quot;#What’s-your-preferred-JavaScript-module-loading-tool&quot; class=&quot;headerlink&quot; title=&quot;What’s your preferred JavaScript module loading tool?&quot;&gt;&lt;/a&gt;What’s your preferred JavaScript module loading tool?&lt;/h2&gt;&lt;h2 id=&quot;你首选的-JavaScript-模块加载工具是什么？&quot;&gt;&lt;a href=&quot;#你首选的-JavaScript-模块加载工具是什么？&quot; class=&quot;headerlink&quot; title=&quot;你首选的 JavaScript 模块加载工具是什么？&quot;&gt;&lt;/a&gt;你首选的 JavaScript 模块加载工具是什么？&lt;/h2&gt;&lt;p&gt;At the moment, it would seem as most people are torn between Browserify and Webpack, although the latter leads by almost 7 points. 29% of users indicated they use transpile Babel modules first, before presumably using one of the two aforementioned tools to pack their modules together.&lt;/p&gt;
&lt;p&gt;目前，看起来大部分开发者都在 Browserify 和 Webpack 之间徘徊，而后者高出了 7 个百分点。29% 的用户表示他们在使用前面提到的这两个工具打包他们的模块之前会先使用 Babel 进行转换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/pQPMC7V.png&quot; alt=&quot;An screenshot of the percentages for the 15th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;What-libraries-do-you-use&quot;&gt;&lt;a href=&quot;#What-libraries-do-you-use&quot; class=&quot;headerlink&quot; title=&quot;What libraries do you use?&quot;&gt;&lt;/a&gt;What libraries do you use?&lt;/h2&gt;&lt;h2 id=&quot;你使用过哪些库？&quot;&gt;&lt;a href=&quot;#你使用过哪些库？&quot; class=&quot;headerlink&quot; title=&quot;你使用过哪些库？&quot;&gt;&lt;/a&gt;你使用过哪些库？&lt;/h2&gt;&lt;p&gt;In retrospect, this was one of the questions which would’ve benefitted a lot from collaborative editing. jQuery is still going strong, with over 50% of votes casted its way. Lodash and underscore are used by a significant portion of the JavaScript population that participated in the voting, while the &lt;code&gt;xhr&lt;/code&gt; micro library only clocked in 8% of the votes.&lt;/p&gt;
&lt;p&gt;现在回顾起来，这是一个受益于协同编辑的问题之一。jQuery 获得了超过 50% 的选票证明了它的势头依然很强劲。在参与投票的 JavaScript 使用者中，Lodash 与 Underscore 也被很大一部分开发者使用。 &lt;code&gt;xhr&lt;/code&gt; 微型库只获得了 8% 的票数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/7jAwy05.png&quot; alt=&quot;An screenshot of the percentages for the 16th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;What-frameworks-do-you-use&quot;&gt;&lt;a href=&quot;#What-frameworks-do-you-use&quot; class=&quot;headerlink&quot; title=&quot;What frameworks do you use?&quot;&gt;&lt;/a&gt;What frameworks do you use?&lt;/h2&gt;&lt;h2 id=&quot;你使用过哪些框架？&quot;&gt;&lt;a href=&quot;#你使用过哪些框架？&quot; class=&quot;headerlink&quot; title=&quot;你使用过哪些框架？&quot;&gt;&lt;/a&gt;你使用过哪些框架？&lt;/h2&gt;&lt;p&gt;Unsurprisingly, React and Angular are leading the pack. Backbone is still in a healthy position, with 22.8% of the votes.&lt;/p&gt;
&lt;p&gt;毫无意外的，React 和 Angular 遥遥领先于其他框架，有着 22.8% 的 Backbone 仍然处在一个安全的位置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/zpSAISK.png&quot; alt=&quot;An screenshot of the percentages for the 17th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Do-you-use-ES6…&quot;&gt;&lt;a href=&quot;#Do-you-use-ES6…&quot; class=&quot;headerlink&quot; title=&quot;Do you use ES6…&quot;&gt;&lt;/a&gt;Do you use ES6…&lt;/h2&gt;&lt;h2 id=&quot;你使用-ES6-吗？&quot;&gt;&lt;a href=&quot;#你使用-ES6-吗？&quot; class=&quot;headerlink&quot; title=&quot;你使用 ES6 吗？&quot;&gt;&lt;/a&gt;你使用 ES6 吗？&lt;/h2&gt;&lt;p&gt;Responses were quite divided in this question, with almost 20% never using ES6, over 10% using it exclusively, close to 30% using it extensively and almost 40% using it occasionally.&lt;/p&gt;
&lt;p&gt;受访者在这个问题上的反应相当分歧，有近 20% 的人几乎从不使用 ES6，超过 10% 的人只写 ES6，接近 30% 的人广泛使用 ES6，近 40% 的人偶尔使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hAnbtfN.png&quot; alt=&quot;An screenshot of the percentages for the 18th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Do-you-know-what’s-coming-in-ES2016&quot;&gt;&lt;a href=&quot;#Do-you-know-what’s-coming-in-ES2016&quot; class=&quot;headerlink&quot; title=&quot;Do you know what’s coming in ES2016?&quot;&gt;&lt;/a&gt;Do you know what’s coming in ES2016?&lt;/h2&gt;&lt;h2 id=&quot;你知道在即将到来的-ES2016-中会有什么特性吗？&quot;&gt;&lt;a href=&quot;#你知道在即将到来的-ES2016-中会有什么特性吗？&quot; class=&quot;headerlink&quot; title=&quot;你知道在即将到来的 ES2016 中会有什么特性吗？&quot;&gt;&lt;/a&gt;你知道在即将到来的 ES2016 中会有什么特性吗？&lt;/h2&gt;&lt;p&gt;Roughly speaking, half of the voters don’t know what’s coming in ES2016, while the other half have an idea of what’s coming next.&lt;/p&gt;
&lt;p&gt;粗略地说，有超过一半的投票者表示不知道即将到来的 ES2016 中会有什么特性。另一半则对接下来的版本有所了解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DxxOnco.png&quot; alt=&quot;An screenshot of the percentages for the 19th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Do-you-understand-ES6&quot;&gt;&lt;a href=&quot;#Do-you-understand-ES6&quot; class=&quot;headerlink&quot; title=&quot;Do you understand ES6?&quot;&gt;&lt;/a&gt;Do you understand ES6?&lt;/h2&gt;&lt;h2 id=&quot;你了解-ES6-吗？&quot;&gt;&lt;a href=&quot;#你了解-ES6-吗？&quot; class=&quot;headerlink&quot; title=&quot;你了解 ES6 吗？&quot;&gt;&lt;/a&gt;你了解 ES6 吗？&lt;/h2&gt;&lt;p&gt;Over 60% of respondents seem to understand the basics, while 10% have no idea about ES6 and over 25% consider they understand ES6 really well.&lt;/p&gt;
&lt;p&gt;超过 60% 的受访者似乎了解基本的概念。10% 的人对 ES6 毫不了解，有 25% 的受访者认为他们非常了解 ES6。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/w6obK3X.png&quot; alt=&quot;An screenshot of the percentages for the 20th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Would-you-say-ES6-is-an-improvement&quot;&gt;&lt;a href=&quot;#Would-you-say-ES6-is-an-improvement&quot; class=&quot;headerlink&quot; title=&quot;Would you say ES6 is an improvement?&quot;&gt;&lt;/a&gt;Would you say ES6 is an improvement?&lt;/h2&gt;&lt;h2 id=&quot;你认为-ES6-是一个进步吗？&quot;&gt;&lt;a href=&quot;#你认为-ES6-是一个进步吗？&quot; class=&quot;headerlink&quot; title=&quot;你认为 ES6 是一个进步吗？&quot;&gt;&lt;/a&gt;你认为 ES6 是一个进步吗？&lt;/h2&gt;&lt;p&gt;Almost 95% of the respondents consider ES6 to be an improvement to the language. I’ll congratulate TC39 members next time I run into them!&lt;/p&gt;
&lt;p&gt;超过 95% 的受访者认为 ES6 是对于 JavaScript 语言来说是一个进步，下一次碰到 TC39 的会员我得祝贺他们。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/c0RtfVK.png&quot; alt=&quot;An screenshot of the percentages for the 21th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;What-are-your-preferred-text-editors&quot;&gt;&lt;a href=&quot;#What-are-your-preferred-text-editors&quot; class=&quot;headerlink&quot; title=&quot;What are your preferred text editors?&quot;&gt;&lt;/a&gt;What are your preferred text editors?&lt;/h2&gt;&lt;h2 id=&quot;你更喜欢什么文本编辑器？&quot;&gt;&lt;a href=&quot;#你更喜欢什么文本编辑器？&quot; class=&quot;headerlink&quot; title=&quot;你更喜欢什么文本编辑器？&quot;&gt;&lt;/a&gt;你更喜欢什么文本编辑器？&lt;/h2&gt;&lt;p&gt;Again, very divided because of the variety of options. Over half the respondents like Sublime Text, and over 30% like to use Atom, its open-source clone. Over 25% voted for WebStorm and also for vi/vim.&lt;/p&gt;
&lt;p&gt;再一次，由于存在各种各样的选择导致结果非常分散。超过一半的受访者喜欢 &lt;a href=&quot;http://www.sublimetext.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sublime Text&lt;/a&gt;，超过 30% 的受访者喜欢使用 &lt;a href=&quot;https://atom.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;atom&lt;/a&gt; 和 它的开源克隆版。超过 25% 的选票投给了 WebStorm，也有 25% 的选票投给了 vi/vim.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Vt8ve7s.png&quot; alt=&quot;An screenshot of the percentages for the 22th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;What’s-your-preferred-development-OS&quot;&gt;&lt;a href=&quot;#What’s-your-preferred-development-OS&quot; class=&quot;headerlink&quot; title=&quot;What’s your preferred development OS?&quot;&gt;&lt;/a&gt;What’s your preferred development OS?&lt;/h2&gt;&lt;h2 id=&quot;你更喜欢使用什么操作系统作为开发环境&quot;&gt;&lt;a href=&quot;#你更喜欢使用什么操作系统作为开发环境&quot; class=&quot;headerlink&quot; title=&quot;你更喜欢使用什么操作系统作为开发环境?&quot;&gt;&lt;/a&gt;你更喜欢使用什么操作系统作为开发环境?&lt;/h2&gt;&lt;p&gt;Over 60% of voters use Mac, while Linux and Windows users are close to 20% each.&lt;/p&gt;
&lt;p&gt;超过 60% 的投票者使用 Mac，使用 Linux 和 Windows 的用户都接近 20%。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PmLbtAo.png&quot; alt=&quot;An screenshot of the percentages for the 23th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;How-do-you-find-reusable-code-libraries-and-tools&quot;&gt;&lt;a href=&quot;#How-do-you-find-reusable-code-libraries-and-tools&quot; class=&quot;headerlink&quot; title=&quot;How do you find reusable code, libraries and tools?&quot;&gt;&lt;/a&gt;How do you find reusable code, libraries and tools?&lt;/h2&gt;&lt;h2 id=&quot;你是通过哪种方式搜索到可重用的代码、库和工具的？&quot;&gt;&lt;a href=&quot;#你是通过哪种方式搜索到可重用的代码、库和工具的？&quot; class=&quot;headerlink&quot; title=&quot;你是通过哪种方式搜索到可重用的代码、库和工具的？&quot;&gt;&lt;/a&gt;你是通过哪种方式搜索到可重用的代码、库和工具的？&lt;/h2&gt;&lt;p&gt;Respondents seem to favor GitHub and search engines, but there’s also a healthy dose of blogs, Twitter, and the npm website being consumed.&lt;/p&gt;
&lt;p&gt;受访者似乎更青睐于 &lt;a href=&quot;https://github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt; 和搜索引擎，但是也有一部分人使用博客，Twitter 和 npm 网站。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/HpmV9yz.png&quot; alt=&quot;An screenshot of the percentages for the 24th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Do-you-engage-in-social-JavaScript-events&quot;&gt;&lt;a href=&quot;#Do-you-engage-in-social-JavaScript-events&quot; class=&quot;headerlink&quot; title=&quot;Do you engage in social JavaScript events?&quot;&gt;&lt;/a&gt;Do you engage in social JavaScript events?&lt;/h2&gt;&lt;h2 id=&quot;你参加过-Javascript-的社交活动吗？&quot;&gt;&lt;a href=&quot;#你参加过-Javascript-的社交活动吗？&quot; class=&quot;headerlink&quot; title=&quot;你参加过 Javascript 的社交活动吗？&quot;&gt;&lt;/a&gt;你参加过 Javascript 的社交活动吗？&lt;/h2&gt;&lt;p&gt;Almost 60% have attended at least a conference, while 74% indicated they like going to meetups.&lt;/p&gt;
&lt;p&gt;有近 60% 的人参加过至少一次，74% 的人表示他们喜欢参加聚会。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/EnQWGzf.png&quot; alt=&quot;An screenshot of the percentages for the 25th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;What-browsers-do-you-support-in-your-JavaScript-applications&quot;&gt;&lt;a href=&quot;#What-browsers-do-you-support-in-your-JavaScript-applications&quot; class=&quot;headerlink&quot; title=&quot;What browsers do you support in your JavaScript applications?&quot;&gt;&lt;/a&gt;What browsers do you support in your JavaScript applications?&lt;/h2&gt;&lt;h2 id=&quot;在你的-Javascript-应用中，你都支持哪些浏览器？&quot;&gt;&lt;a href=&quot;#在你的-Javascript-应用中，你都支持哪些浏览器？&quot; class=&quot;headerlink&quot; title=&quot;在你的 Javascript 应用中，你都支持哪些浏览器？&quot;&gt;&lt;/a&gt;在你的 Javascript 应用中，你都支持哪些浏览器？&lt;/h2&gt;&lt;p&gt;Quite divided answers, but fortunately most of respondents don’t have to deal with customers on IE6 anymore.&lt;/p&gt;
&lt;p&gt;回答相当分散，但是好在大多数受访者表示他们不再处理使用 IE6 的客户(的问题)了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/BV3eU0X.png&quot; alt=&quot;An screenshot of the percentages for the 26th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Do-you-learn-about-JavaScript-latest-features-on-a-regular-basis&quot;&gt;&lt;a href=&quot;#Do-you-learn-about-JavaScript-latest-features-on-a-regular-basis&quot; class=&quot;headerlink&quot; title=&quot;Do you learn about JavaScript latest features on a regular basis?&quot;&gt;&lt;/a&gt;Do you learn about JavaScript latest features on a regular basis?&lt;/h2&gt;&lt;h2 id=&quot;你会定期了解有关-Javascript-的最新特性吗？&quot;&gt;&lt;a href=&quot;#你会定期了解有关-Javascript-的最新特性吗？&quot; class=&quot;headerlink&quot; title=&quot;你会定期了解有关 Javascript 的最新特性吗？&quot;&gt;&lt;/a&gt;你会定期了解有关 Javascript 的最新特性吗？&lt;/h2&gt;&lt;p&gt;Around 80% of respondents try and stay up to date when it comes to the latest JavaScript features.&lt;/p&gt;
&lt;p&gt;有 80% 的受访者会尝试实时了解并持续学习 Javascript 的最新特性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/5TZUW2i.png&quot; alt=&quot;An screenshot of the percentages for the 27th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Where-do-you-learn-about-the-latest-JavaScript-features&quot;&gt;&lt;a href=&quot;#Where-do-you-learn-about-the-latest-JavaScript-features&quot; class=&quot;headerlink&quot; title=&quot;Where do you learn about the latest JavaScript features?&quot;&gt;&lt;/a&gt;Where do you learn about the latest JavaScript features?&lt;/h2&gt;&lt;h2 id=&quot;你在哪了解最新的-JavaScript-特性？&quot;&gt;&lt;a href=&quot;#你在哪了解最新的-JavaScript-特性？&quot; class=&quot;headerlink&quot; title=&quot;你在哪了解最新的 JavaScript 特性？&quot;&gt;&lt;/a&gt;你在哪了解最新的 JavaScript 特性？&lt;/h2&gt;&lt;p&gt;Unsurprisingly, the top-notch Mozilla Developer Network is leading the pack in terms of JavaScript documentation and news. JavaScript Weekly is also a very popular source of news and articles at almost 40% of respondents.&lt;/p&gt;
&lt;p&gt;不出所料地，&lt;a href=&quot;https://developer.mozilla.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mozilla 开发者网络&lt;/a&gt; 在 Javascript 文档和新闻方面处于领先地位。&lt;a href=&quot;http://javascriptweekly.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript 周刊&lt;/a&gt; 也是一个非常受欢迎的新闻和文章的直接来源，它有着超过 40% 的投票。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/7Jlg7zh.png&quot; alt=&quot;An screenshot of the percentages for the 28th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Which-of-these-features-have-you-heard-about&quot;&gt;&lt;a href=&quot;#Which-of-these-features-have-you-heard-about&quot; class=&quot;headerlink&quot; title=&quot;Which of these features have you heard about?&quot;&gt;&lt;/a&gt;Which of these features have you heard about?&lt;/h2&gt;&lt;h2 id=&quot;你听说过下面哪些新特性？&quot;&gt;&lt;a href=&quot;#你听说过下面哪些新特性？&quot; class=&quot;headerlink&quot; title=&quot;你听说过下面哪些新特性？&quot;&gt;&lt;/a&gt;你听说过下面哪些新特性？&lt;/h2&gt;&lt;p&gt;Over 85% of voters have heard about ServiceWorker, although I’d be curious to know how many of those have played around with it!&lt;/p&gt;
&lt;p&gt;超过 85% 的人听说过 ServiceWorker，我很想知道这些人中有多少人使用过它。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/8o3Jq2R.png&quot; alt=&quot;An screenshot of the percentages for the 29th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;What-languages-do-you-use-primarily-besides-JavaScript&quot;&gt;&lt;a href=&quot;#What-languages-do-you-use-primarily-besides-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;What languages do you use primarily, besides JavaScript?&quot;&gt;&lt;/a&gt;What languages do you use primarily, besides JavaScript?&lt;/h2&gt;&lt;h2 id=&quot;除了-JavaScript，你还主要使用哪些语言？&quot;&gt;&lt;a href=&quot;#除了-JavaScript，你还主要使用哪些语言？&quot; class=&quot;headerlink&quot; title=&quot;除了 JavaScript，你还主要使用哪些语言？&quot;&gt;&lt;/a&gt;除了 JavaScript，你还主要使用哪些语言？&lt;/h2&gt;&lt;p&gt;There’s so many languages to choose from, I was bound to forget a few, but the results speak for themselves.&lt;/p&gt;
&lt;p&gt;这有太多的语言可供选择，我肯定会漏掉一些。但是结果不言自明。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Tv9NciV.png&quot; alt=&quot;An screenshot of the percentages for the 30th question&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Thanks&quot;&gt;&lt;a href=&quot;#Thanks&quot; class=&quot;headerlink&quot; title=&quot;Thanks!&quot;&gt;&lt;/a&gt;Thanks!&lt;/h2&gt;&lt;h2 id=&quot;谢谢&quot;&gt;&lt;a href=&quot;#谢谢&quot; class=&quot;headerlink&quot; title=&quot;谢谢&quot;&gt;&lt;/a&gt;谢谢&lt;/h2&gt;&lt;p&gt;Lastly, I wanted to thank everyone who took part of the poll. It was far more popular than I anticipated and I’m looking forward to holding a similar poll next year. Hopefully, it’ll be one that’s even more diverse and perhaps a bit less biased.&lt;/p&gt;
&lt;p&gt;最后，我想感谢参与此次调查的每一个人。这次调查的受欢迎程度超出了我的预期，我很期待明年再进行一次类似的调查。我希望，那将会是一个更多样性的，也许会再少一点倾向性的调查。&lt;/p&gt;
&lt;p&gt;What are your take-aways from the survey?&lt;/p&gt;
&lt;p&gt;你从这次调查中获得了什么呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文根据 &lt;a href=&quot;https://ponyfoo.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ponyfoo&lt;/a&gt; 的《&lt;a href=&quot;https://ponyfoo.com/articles/javascript-developer-survey-results&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript Developer Survey Results&lt;/a&gt;》所译，整个译文带有自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：&lt;a href=&quot;https://ponyfoo.com/articles/javascript-developer-survey-results&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ponyfoo.com/articles/javascript-developer-survey-results&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文链接 : &lt;a href=&quot;https://ponyfoo.com/articles/javascript-developer-survey-results&quot;&gt;JavaScript Developer Survey Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文作者 : &lt;a href=&quot;https://ponyfoo.com/&quot;&gt;ponyfoo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译文出自 : &lt;a href=&quot;https://github.com/xitu/gold-miner&quot;&gt;掘金翻译计划&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者 : &lt;a href=&quot;https://github.com/sqrthree&quot;&gt;sqrthree(根号三)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;校对者: &lt;a href=&quot;https://github.com/Zhangdroid&quot;&gt;Zhangdroid&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;There were over 5000 responses, 5350 to be exact, and I can’t wait to share the details. Before that I want to thank everyone who chipped in. This is a great time to be a part of the JavaScript community, and I’m truly excited for things to come!&lt;/p&gt;
&lt;p&gt;截止目前有超过了 5000 人参与了(该次调查)，准确的说是 5350 人。我迫不及待的想要和大家分享一下这次调查的细节。在分享之前我想要感谢参与调查的每一个人。这是 Javascript 社区一个伟大的时刻，我对未来的事情感到无比激动。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="译文" scheme="http://blog.sqrtthree.com/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>前端代码风格检查套件 FECS</title>
    <link href="http://blog.sqrtthree.com/2015/12/25/fecs/"/>
    <id>http://blog.sqrtthree.com/2015/12/25/fecs/</id>
    <published>2015-12-25T07:33:04.000Z</published>
    <updated>2015-12-25T07:33:04.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;All code in any code-base should look like a single person typed it, no matter how many people contributed. — idiomatic.js&lt;br&gt;在任一个代码库中，不管是多少人协同开发，所有的代码都应该看起来像是一个人写的。- idiomatic.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means strictly enforcing these agreed upon guidelines at all times. &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;今天要讲的不是代码规范，关于代码规范网上已经有了非常好的实践和各大公司公开的实践指南，大家可自行查询。 例如: &lt;a href=&quot;http://zoomzhao.github.io/code-guide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;code-guide chinese&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;然而，有了规范是一回事，执行起来又是一回事。今天要介绍的就是一款按照指定风格检测代码是否符合规范的工具，通过工具的自动检测，以确保每一行代码都符合规范。&lt;/p&gt;
&lt;h2 id=&quot;FECS-是什么？&quot;&gt;&lt;a href=&quot;#FECS-是什么？&quot; class=&quot;headerlink&quot; title=&quot;FECS 是什么？&quot;&gt;&lt;/a&gt;FECS 是什么？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://fecs.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;fecs&lt;/a&gt; 是以百度前端代码规范为目标的基于 Node.js 的前端代码风格检测工具，套件内包括了 &lt;code&gt;htmlcs、csshint、lesslint&lt;/code&gt; 和 &lt;code&gt;jformatter&lt;/code&gt; 等工具。&lt;/p&gt;
&lt;p&gt;因此，&lt;code&gt;fecs&lt;/code&gt; 不仅能检查 &lt;code&gt;HTML/CSS/LESS/JavaScript&lt;/code&gt; 代码的规范问题，而且还能修复代码的规范问题。&lt;/p&gt;
&lt;h2 id=&quot;FECS-能干什么？&quot;&gt;&lt;a href=&quot;#FECS-能干什么？&quot; class=&quot;headerlink&quot; title=&quot;FECS 能干什么？&quot;&gt;&lt;/a&gt;FECS 能干什么？&lt;/h2&gt;&lt;h3 id=&quot;fecs-check&quot;&gt;&lt;a href=&quot;#fecs-check&quot; class=&quot;headerlink&quot; title=&quot;fecs check&quot;&gt;&lt;/a&gt;fecs check&lt;/h3&gt;&lt;p&gt;首先，主要功能就是代码格式的检查，当然了呢，因为是最初是供于百度内部使用的工具，自然就是以 &lt;a href=&quot;https://github.com/ecomfe/spec/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度前端代码规范&lt;/a&gt; 为首要目标，好在该规范第一开源，第二还不错，因此可以直接使用。&lt;/p&gt;
&lt;p&gt;当然了，如果你不喜欢其中的某些规则，&lt;code&gt;FECS&lt;/code&gt; 也是支持配置文件设置规则的方式的，具体的在下文说明。&lt;/p&gt;
&lt;p&gt;需要说明的是，&lt;code&gt;FECS&lt;/code&gt; 目前只支持 &lt;code&gt;HTML/CSS/LESS/JavaScript&lt;/code&gt; 四种文件和语法的检测。&lt;/p&gt;
&lt;h4 id=&quot;Javascript&quot;&gt;&lt;a href=&quot;#Javascript&quot; class=&quot;headerlink&quot; title=&quot;Javascript&quot;&gt;&lt;/a&gt;Javascript&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Javascript&lt;/code&gt; 方面 &lt;code&gt;FECS&lt;/code&gt; 采用了 &lt;code&gt;eslint&lt;/code&gt; 检测引擎，因此你在自定义规则的时候可以参考 &lt;a href=&quot;http://esling.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;esling&lt;/a&gt; 的文档进行相关配置。&lt;code&gt;FECS&lt;/code&gt; 只是在 &lt;code&gt;eslint&lt;/code&gt; 基础之上针对百度的代码规范作了新的规则实现或调整。详细内容见 &lt;a href=&quot;https://github.com/ecomfe/fecs/wiki/FECSRules&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FECS 自有规则&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;CSS-LESS-HTML&quot;&gt;&lt;a href=&quot;#CSS-LESS-HTML&quot; class=&quot;headerlink&quot; title=&quot;CSS/LESS/HTML&quot;&gt;&lt;/a&gt;CSS/LESS/HTML&lt;/h4&gt;&lt;p&gt;CSS 的 linter 是使用了内部优化过的 &lt;code&gt;csshint&lt;/code&gt;。LESS 和 HTML 方面则分别使用了 &lt;code&gt;lesslint&lt;/code&gt; 和 &lt;code&gt;htmlcs&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;FECS-的安装及其使用&quot;&gt;&lt;a href=&quot;#FECS-的安装及其使用&quot; class=&quot;headerlink&quot; title=&quot;FECS 的安装及其使用&quot;&gt;&lt;/a&gt;FECS 的安装及其使用&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;安装 &lt;code&gt;FECS&lt;/code&gt; 需要依赖 &lt;code&gt;node&lt;/code&gt; &lt;code&gt;npm&lt;/code&gt; 环境支持，执行以下命令即可安装:&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;string&quot;&gt;[sudo]&lt;/span&gt; npm install fecs -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;p&gt;使用方式可使用以下命令查看:&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ fecs --help&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ fecs&lt;span class=&quot;built_in&quot;&gt; check &lt;/span&gt;--help&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ fecs format --help&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;具体的命令参数？哎呀，官方已经写的够详细的了，还是看官方文档吧: &lt;a href=&quot;https://github.com/ecomfe/fecs/wiki/CLI&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FECS 命令参数&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;自定义配置&quot;&gt;&lt;a href=&quot;#自定义配置&quot; class=&quot;headerlink&quot; title=&quot;自定义配置&quot;&gt;&lt;/a&gt;自定义配置&lt;/h2&gt;&lt;p&gt;&lt;code&gt;FECS&lt;/code&gt; 支持通过配置文件的方式指定特定的规则。&lt;/p&gt;
&lt;p&gt;配置文件的支持来自 &lt;code&gt;manis&lt;/code&gt;，支持使用 &lt;code&gt;.fecsrc&lt;/code&gt; 或 &lt;code&gt;package.json&lt;/code&gt;，但以第一个找到的为准。配置文件 &lt;code&gt;.fecsrc&lt;/code&gt; 大体是这个样子的:&lt;/p&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;files&quot;&lt;/span&gt;: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;eslint&quot;&lt;/span&gt;: &lt;span class=&quot;meta&quot;&gt;&amp;#123;...&amp;#125;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;csshint&quot;&lt;/span&gt;: &lt;span class=&quot;meta&quot;&gt;&amp;#123;...&amp;#125;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;htmlcs&quot;&lt;/span&gt;: &lt;span class=&quot;meta&quot;&gt;&amp;#123;...&amp;#125;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;csscomb&quot;&lt;/span&gt;: &lt;span class=&quot;meta&quot;&gt;&amp;#123;...&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;比如说他们的&lt;a href=&quot;https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JavaScript编码规范&lt;/a&gt; 中关于换行中有这样一条 &lt;a href=&quot;https://github.com/ecomfe/spec/blob/master/javascript-style-guide.md#建议-对于-ifelsetrycatchfinally-等语句推荐使用在--号后添加一个换行-的风格使代码层次结构更清晰阅读性更好&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;对于if…else…try…catch…finally 等语句，推荐使用在 } 号后添加一个换行的风格，使代码层次结构更清晰，阅读性更好&lt;/a&gt;，这一条我就很不喜欢嘛，那我可以这样配置:&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;eslint&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;rules&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;&quot;brace-style&quot;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;1tbs&quot;&lt;/span&gt;, &amp;#123;&amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样配置之后再进行检测，就能愉快的按照下面这种写法愉快的 coding 了。&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;if&lt;/span&gt; (condition) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// some statements;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;selector-tag&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// some statements;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;多工具支持&quot;&gt;&lt;a href=&quot;#多工具支持&quot; class=&quot;headerlink&quot; title=&quot;多工具支持&quot;&gt;&lt;/a&gt;多工具支持&lt;/h2&gt;&lt;p&gt;详情支持列表请参考官方文档 &lt;a href=&quot;https://github.com/ecomfe/fecs#工具支持&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;工具支持&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;嗯。文档依旧写的很完善，基本上已经没什么好补充的了。&lt;/p&gt;
&lt;p&gt;在这里我有一个小提示，就是工具对 &lt;code&gt;atom&lt;/code&gt; 编辑器的支持相对于对 &lt;code&gt;sublime&lt;/code&gt; 的支持来说要优秀很多， 包括检测速度呀，错误提示呀，&lt;code&gt;atom&lt;/code&gt; 都略称一筹，这取决于 &lt;code&gt;atom&lt;/code&gt; 优秀的插件机制。并且我在 &lt;code&gt;sublime&lt;/code&gt;下面使用的时候发现了一个 bug，就是错误提示会显示为特殊编码导致无法以中文显示。解决方案呢，在这里&lt;a href=&quot;https://github.com/leeight/Baidu-FE-Code-Style/issues/6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/leeight/Baidu-FE-Code-Style/issues/6&lt;/a&gt;，不过感觉略麻烦的样子。&lt;/p&gt;
&lt;h2 id=&quot;Tips&quot;&gt;&lt;a href=&quot;#Tips&quot; class=&quot;headerlink&quot; title=&quot;Tips:&quot;&gt;&lt;/a&gt;Tips:&lt;/h2&gt;&lt;p&gt;&lt;code&gt;FECS&lt;/code&gt; 的错误报告默认为英文格式，由各 linter 直接提供。&lt;code&gt;FECS&lt;/code&gt; 根据百度前端代码规范，作了一次影射转换，通过指定 reporter 为 baidu 可以看到中文的报告输出效果，对于某些比较抽象的描述，会同时在括号内提供英文原文补充说明。&lt;/p&gt;
&lt;p&gt;例如，你可以这样用: &lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fecs&lt;span class=&quot;built_in&quot;&gt; check &lt;/span&gt;--reporter=baidu&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者，更直接一点，直接添加一个 &lt;code&gt;alias&lt;/code&gt;，使其在执行 &lt;code&gt;fecs check&lt;/code&gt; 命令时默认为中文输出。&lt;/p&gt;
&lt;figure class=&quot;highlight vhdl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;alias&lt;/span&gt; fecs=&lt;span class=&quot;symbol&quot;&gt;&#39;fecs&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--reporter=baidu&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接:&quot;&gt;&lt;/a&gt;相关链接:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://fecs.baidu.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FECS 官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/ecomfe/fecs/wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FECS WIKI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/ecomfe/fecs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FECS Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;All code in any code-base should look like a single person typed it, no matter how many people contributed. — idiomatic.js&lt;br&gt;在任一个代码库中，不管是多少人协同开发，所有的代码都应该看起来像是一个人写的。- idiomatic.js&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means strictly enforcing these agreed upon guidelines at all times. &lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>jQuery 3.0 以及兼容版的 Alpha 版本发布</title>
    <link href="http://blog.sqrtthree.com/2015/11/12/jQuery3-0-Alpha-Versions-Released/"/>
    <id>http://blog.sqrtthree.com/2015/11/12/jQuery3-0-Alpha-Versions-Released/</id>
    <published>2015-11-11T16:14:23.000Z</published>
    <updated>2015-11-11T16:14:23.000Z</updated>
    
    <content type="html">&lt;p&gt;It’s been a long time since we did a major release, and you certainly deserve one. So we’re glad to announce the first alpha of jQuery 3.0!&lt;/p&gt;
&lt;p&gt;从我们做出上一个重大的版本发布已经过去很长时间了，所以你理应再得到一个新版本。因此我们非常高兴的宣布 &lt;code&gt;jQuery 3.0&lt;/code&gt; 的第一个 &lt;code&gt;alpha&lt;/code&gt; 版本的发布。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Despite the 3.0 version number, we anticipate that these releases shouldn’t be too much trouble when it comes to upgrading existing code. Yes, there are a few breaking changes that justified the major version bump, but we’re hopeful these breakages don’t actually affect that many people. The jQuery Migrate plugin can help you to identify compatibility issues in your code as well. Your feedback on the changes in this alpha will help us greatly, so please try it out on your existing code and plugins!&lt;/p&gt;
&lt;p&gt;尽管版本号已经到了 3.0，但是在升级目前已经存在的代码时，可以预期这些发布不会造成太多的麻烦。确实，只是一些用来调整重要版本冲突的零碎改变，但是我们希望这些改变不会实际影响到很多人。&lt;code&gt;jQuery Migrate&lt;/code&gt; 插件可以很好的帮助你在你的代码中识别出兼容性问题。在这个 &lt;code&gt;alpha&lt;/code&gt; 版本中，你针对于这些变化的反馈将会极大的帮助我们，所以请在你目前已有的代码和插件中尝试一下。&lt;/p&gt;
&lt;p&gt;There are actually two releases here. First is jQuery 3.0, which supports modern browsers and environments from IE9 forward. Second is jQuery Compat 3.0, which includes support for IE8. As an added bonus, both jQuery and jQuery Compat will include support for Yandex.Browser, a freeware browser released in 2012. You can get the files from the jQuery CDN, or link to them directly:&lt;/p&gt;
&lt;p&gt;实际上，这里有两个版本。第一个版本是 &lt;code&gt;jQuery 3.0&lt;/code&gt;, 这个版本支持现代浏览器和 &lt;code&gt;IE9&lt;/code&gt; 以后的浏览器环境。第二个版本是 &lt;code&gt;jQuery Compat 3.0&lt;/code&gt;，这个支持 &lt;code&gt;IE8&lt;/code&gt;。作为一个额外的福利，就是 &lt;code&gt;jQuery&lt;/code&gt; 和 &lt;code&gt;jQuery Compat&lt;/code&gt; 这两个版本都支持 Yandex 浏览器(一个2012年发布的免费软件)。你可以从 jQuery CDN 或者直接通过下面这些链接获取这两个文件。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.jquery.com/jquery-3.0.0-alpha1.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://code.jquery.com/jquery-3.0.0-alpha1.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://code.jquery.com/jquery-compat-3.0.0-alpha1.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://code.jquery.com/jquery-compat-3.0.0-alpha1.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can also get the alpha versions from npm:&lt;/p&gt;
&lt;p&gt;你也可以从 &lt;code&gt;npm&lt;/code&gt; 中获取 alpha 版:&lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install jquery&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;-alpha1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install jquery-compat&lt;span class=&quot;variable&quot;&gt;@3&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;-alpha1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Major-changes-主要的变化&quot;&gt;&lt;a href=&quot;#Major-changes-主要的变化&quot; class=&quot;headerlink&quot; title=&quot;Major changes (主要的变化)&quot;&gt;&lt;/a&gt;Major changes (主要的变化)&lt;/h4&gt;&lt;p&gt;Below are just the highlights of the major new features, improvements, and bug fixes in these releases. A complete list of changes is available at the bottom of this post and on our GitHub issue tracker. On GitHub, you can additionally see the features we expect to put in later beta and final versions that have yet to land.&lt;/p&gt;
&lt;p&gt;下面的这些内容只是高亮了这个版本中一些重要的新特性，代码的改进，还有一些 bug 的修复。在这篇文章下面和我们的 GitHub issue tracker 板块你可以看到一个完整的改变清单。在 Github 上，你还可以看到我们期待在下个 beta 版本和暂时还没发布的最终版中添加的新特性。&lt;/p&gt;
&lt;h5 id=&quot;Simplified-show-and-hide-methods-简化的-show-和-hide-方法&quot;&gt;&lt;a href=&quot;#Simplified-show-and-hide-methods-简化的-show-和-hide-方法&quot; class=&quot;headerlink&quot; title=&quot;Simplified .show() and .hide() methods: 简化的 show 和 hide 方法&quot;&gt;&lt;/a&gt;Simplified &lt;code&gt;.show()&lt;/code&gt; and &lt;code&gt;.hide()&lt;/code&gt; methods: 简化的 show 和 hide 方法&lt;/h5&gt;&lt;p&gt;Everyone’s mental model of jQuery’s .hide() method is that it sets display: none in CSS. Conversely, .show() clears the display so that the element shows again (assuming its parents are not hidden). Simple, right?&lt;/p&gt;
&lt;p&gt;每个人的心中都认为 &lt;code&gt;jQuery&lt;/code&gt; 中的 &lt;code&gt;.hide()&lt;/code&gt; 方法就是把元素设置为 &lt;code&gt;display:none&lt;/code&gt;，相反的，&lt;code&gt;.show()&lt;/code&gt; 方法就是清除 &lt;code&gt;display&lt;/code&gt; 因此元素会重新显示(假设父级元素没有被隐藏)。很简单，对么？&lt;/p&gt;
&lt;p&gt;Well, no. There are actually many complex special cases that people asked us to “fix” over the years, which turned these methods into a convoluted confluence of principles. For example, what if the element is set to display: none in a stylesheet? jQuery would try to override that by forcing display: block on the element directly. Okay, but what if a normally block element like &lt;li&gt; was set to display: inline by a different stylesheet rule? How about the case where you call these methods on an element before it’s been added to the document and we don’t know what display value it will have? Determining all of that takes extra work. Sometimes it’s still just a guess that turns out to be wrong.&lt;/li&gt;&lt;/p&gt;
&lt;p&gt;不，这么多年来，实际上有很多复杂特殊的例子，人们要求我们去修正一下，这些例子使得这些方法陷入一个复杂的原理集合之中。例如，如果一个元素在样式表中设置为 &lt;code&gt;display: none&lt;/code&gt; 将会怎样？&lt;code&gt;jQuery&lt;/code&gt; 会试着在元素上强制设置 &lt;code&gt;display: block&lt;/code&gt; 去覆盖它。这是可以的。但是像 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 这样的一个正常的块元素通过不同的样式规则被设置为 &lt;code&gt;display: inline&lt;/code&gt; 会怎么样呢？在一个元素被添加到 &lt;code&gt;document&lt;/code&gt; 之前你调用了这个方法并且我们不知道这个元素拥有的 &lt;code&gt;display&lt;/code&gt; 值的话又会怎样？确定这些事情需要花费额外的工作。有时仅仅是一个最后被证明是错误的猜想。&lt;/p&gt;
&lt;p&gt;Since these methods add a style attribute to the element, they don’t tend to play well with techniques like responsive design where the visibility of elements may also be set by media queries. This leads to the need for jQuery handlers that listen for the orientationchange or resize events and manually hide or show parts of the page; it defeats the elegant solution that media queries were trying to implement.&lt;/p&gt;
&lt;p&gt;这些方法在元素上添加一个样式属性之后，在像是响应式设计中(元素的可见性需要通过媒体查询来设置)这样的技术上往往不能很好的表现。这个导致需要 &lt;code&gt;jQuery&lt;/code&gt; 处理器去监听 &lt;code&gt;orientationchange&lt;/code&gt; 或 &lt;code&gt;resize&lt;/code&gt; 事件人工隐藏或显示部分页面；jQuery 打败了媒体查询正尝试实现的优雅的解决方案。&lt;/p&gt;
&lt;p&gt;You can see that jQuery was already about halfway down the path to total madness, and it didn’t make sense to complete the journey. The special cases and checks were not only complex and incomplete, but they caused significant performance issues on large pages.&lt;/p&gt;
&lt;p&gt;你可以看到 &lt;code&gt;jQuery&lt;/code&gt; 已经完成了疯狂旅途中的一半路程了，但是完成整个旅程是行不通的。这个特殊的情况以及检查不仅复杂且难以完成，而且在大的页面中会造成具有重大意义的性能问题。&lt;/p&gt;
&lt;p&gt;So, instead, we’re experimentally defying the evolution of these methods and reverting to a simple, primordial model. This will break some code. If you have elements in a stylesheet that are set to display: none, the .show() method will no longer override that. So the most important rule for moving to jQuery 3.0 is this: Don’t use a stylesheet to set the default of display: none and then try to use .show() – or any method that shows elements, such as .slideDown() and .fadeIn() – to make it visible.&lt;/p&gt;
&lt;p&gt;因此，代替的是，我们实验性的反抗这些方法的演变，重新回归到一个简洁的，原始的模型。这将会分解一些代码。如果一个元素在样式表中被设置为 &lt;code&gt;display: none&lt;/code&gt;，&lt;code&gt;.show()&lt;/code&gt; 方法将不会再覆盖它。因此，转移到 jQuery 3.0 中有一个最重要的规则就是: 不要使用样式去设置 &lt;code&gt;display: none&lt;/code&gt; 作为默认值，然后使用 &lt;code&gt;.show()&lt;/code&gt; 或者其他方法来显示元素，例如使用 &lt;code&gt;.slideDown()&lt;/code&gt; 和 &lt;code&gt;.fadeIn()&lt;/code&gt; 方法来使它可见。&lt;/p&gt;
&lt;p&gt;If you need an element to be hidden by default, the best way is to add a class name like “hidden” to the element and define that class to be display: none in a stylesheet. Then you can add or remove that class using jQuery’s .addClass() and .removeClass() methods to control visibility. Alternately, you can have a .ready() handler call .hide() on the elements before they are displayed on the page. Or, if you really must retain the stylesheet default, you can use .css(“display”, “block”) (or the appropriate display value) to override the stylesheet.&lt;/p&gt;
&lt;p&gt;如果你需要让一个元素默认是隐藏状态，最好的方法是给元素添加一个像 &lt;code&gt;hidden&lt;/code&gt; 这样的类名，然后在样式中去定义这个类为 &lt;code&gt;display: none&lt;/code&gt;，然后你可以使用 &lt;code&gt;jQuery&lt;/code&gt; 的 &lt;code&gt;.addClass()&lt;/code&gt; 和 &lt;code&gt;.removeClass()&lt;/code&gt; 方法来添加或删除这个类来控制其可见性。另外一种方法是，你可以在元素显示到页面中之前，使用 &lt;code&gt;.ready()&lt;/code&gt; 处理器并在其中调用 &lt;code&gt;.hide()&lt;/code&gt; 方法。或者，如果你一定要在样式中保留默认值，你可以使用 &lt;code&gt;.css(&amp;quot;display&amp;quot;, &amp;quot;block&amp;quot;)&lt;/code&gt; (或其他合适的值)去覆盖样式。&lt;/p&gt;
&lt;p&gt;We know that this is likely to be one of the most contentious and difficult changes in jQuery 3.0, so we wanted to put it out in this early release to see the effects. Please let us know how it affects your code and what you need to change in order to work with this new model.&lt;/p&gt;
&lt;p&gt;我们知道这可能是 &lt;code&gt;jQuery 3.0&lt;/code&gt; 中最受争议和最困难的改变，所以我们想把它放到这个早期版本中观察一下所造成的影响。请让我们知道这些改变如何影响了你的代码，以及你为了使用这个新版本所作出的改变。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/1767&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/1767&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/2057&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/2057&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/2308&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/2308&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;Special-case-with-data-names-含有-data-名字的特殊事例&quot;&gt;&lt;a href=&quot;#Special-case-with-data-names-含有-data-名字的特殊事例&quot; class=&quot;headerlink&quot; title=&quot;Special case with .data() names: 含有.data()名字的特殊事例&quot;&gt;&lt;/a&gt;Special case with .data() names: 含有.data()名字的特殊事例&lt;/h5&gt;&lt;p&gt;We have updated our .data() implementation to closer match the HTML5 dataset specification. All keys are now converted from kebab-case to camelCase, regardless of access method, and digits no longer participate in the conversion. For example, we will no longer differentiate between “foo-bar” and “fooBar”, but will differentiate between “foo-42” and “foo42”. These changes will mainly come into play when retrieving all data by calling .data() with no arguments, or when trying to access the data using a converted key (.data(“foo42”)) instead of the original (.data(“foo-42”)).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/1751&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/1751&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们也更新了我们的 &lt;code&gt;.data()&lt;/code&gt; 方法来更有效的匹配 HTML5 dataset specification. 所有的键值现在都从 kebab-case 转换成驼峰命名法，不再理会访问方式，数字也不再参与转换。例如: 我们不再区分 &lt;code&gt;foo-bar&lt;/code&gt; 和 &lt;code&gt;fooBar&lt;/code&gt;，但是仍然区分 &lt;code&gt;foo-42&lt;/code&gt; 和 &lt;code&gt;foo42&lt;/code&gt;。当通过调用无参数的 &lt;code&gt;.data()&lt;/code&gt; 来取得所有的数据方法，或者尝试通过转换的键名(.data(“foo42”))而不是原始的(.data(“foo-42”))来获取数据时，这些改变将会发挥主要作用。&lt;/p&gt;
&lt;h5 id=&quot;jQuery-Deferred-is-now-Promises-A-compatible-jQuery-Deferred现在兼容Promises-A&quot;&gt;&lt;a href=&quot;#jQuery-Deferred-is-now-Promises-A-compatible-jQuery-Deferred现在兼容Promises-A&quot; class=&quot;headerlink&quot; title=&quot;jQuery.Deferred is now Promises/A+ compatible: jQuery.Deferred现在兼容Promises/A+&quot;&gt;&lt;/a&gt;jQuery.Deferred is now Promises/A+ compatible: jQuery.Deferred现在兼容Promises/A+&lt;/h5&gt;&lt;p&gt;jQuery.Deferred objects have been updated for compatibility with Promises/A+ and ES2015 Promises, verified with the Promises/A+ Compliance Test Suite. This meant the introduction of a .catch() method and some major changes to the .then() method:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jQuery.Deferred&lt;/code&gt; 对象为了兼容 &lt;code&gt;Promises/A+&lt;/code&gt; 和 &lt;code&gt;ES2015 Promises&lt;/code&gt; 已经做出了更新，Promises/A+ Compliance Test Suite 检验。这意味着 引入一个 &lt;code&gt;.catch()&lt;/code&gt; 方法，&lt;code&gt;.then()&lt;/code&gt;方法也有一些重要的改变。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An exception thrown in a .then() callback now becomes a rejection value. Previously, exceptions bubbled all the way up, aborting callback execution and irreversibly locking both the parent and child Deferred objects.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.then()&lt;/code&gt; 方法的回调函数中抛出的异常现在变成了一个可注入的值。以前，异常会一直往上冒泡，直至终止回调函数的执行，然后不可撤销的锁定 parent and child Deferred 对象。&lt;/li&gt;
&lt;li&gt;The resolution state of a Deferred created by .then() is now controlled by its callbacks—exceptions become rejection values and non-thenable returns become fulfillment values. Previously, returns from rejection handlers became rejection values.&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;.then()&lt;/code&gt; 方法创建的 Deferred 对象的 resolution 状态现在被它的回调函数控制——异常成为了注入值，并且 non-thenable 返回的结果成为了 fulfillment 值。以前，从注入处理器返回变成了注入值。&lt;/li&gt;
&lt;li&gt;Callbacks are always invoked asynchronously. Previously, they would be called immediately upon binding or resolution, whichever came last.&lt;/li&gt;
&lt;li&gt;回调函数总是被异步调用。以前，它们根据绑定或是 resolution 被立即调用，无论哪个更晚一些。&lt;/li&gt;
&lt;li&gt;Progress callbacks can no longer resolve Deferred objects to which they are bound.&lt;/li&gt;
&lt;li&gt;Progress 回调函数不再解决受约束的 Deferred 对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consider the following, in which a parent Deferred is rejected and a child callback generates an exception:&lt;/p&gt;
&lt;p&gt;考虑一下下面的代码，哪个parent Deferred 被注入以及 child 回调函数产生异常:&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;parent&lt;/span&gt; = jQuery.Deferred();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; child = &lt;span class=&quot;built_in&quot;&gt;parent&lt;/span&gt;.then( &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;bar&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; callback = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; state &lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; value &lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( state, value );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;( &lt;span class=&quot;string&quot;&gt;&quot;baz&quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; grandchildren = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  child.then( callback( &lt;span class=&quot;string&quot;&gt;&quot;fulfilled&quot;&lt;/span&gt; ), callback( &lt;span class=&quot;string&quot;&gt;&quot;rejected&quot;&lt;/span&gt; ) ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  child.then( callback( &lt;span class=&quot;string&quot;&gt;&quot;fulfilled&quot;&lt;/span&gt; ), callback( &lt;span class=&quot;string&quot;&gt;&quot;rejected&quot;&lt;/span&gt; ) )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;parent&lt;/span&gt;.reject( &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;string&quot;&gt;&quot;parent resolved&quot;&lt;/span&gt; );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;As of jQuery 3.0, this will log “parent resolved” before invoking any callback, each child callback will then log “fulfilled bar”, and the grandchildren will be rejected with Error “baz”. In previous versions, this would log “rejected bar” (the child Deferred having been rejected instead of fulfilled) once and then immediately terminate with uncaught Error “baz” (“parent resolved” not being logged and the grandchildren remaining unresolved).&lt;/p&gt;
&lt;p&gt;在 jQuery 3.0 中，在调用任何回调之前会先记录 “parent resolved”，每一个子回调将会记录 “fulfilled bar”， 然后 grandchildren 将会和错误 “baz” 一起注入。在之前的版本中，会记录一次 “rejected bar” (child Deferred 已经注入而不是fulfilled)然后通过未捕获到的错误 “baz” 中断(“parent resolved” 不会被记录并且 grandchildren 会保持 unresolved 状态)。&lt;/p&gt;
&lt;p&gt;While caught exceptions had advantages for in-browser debugging, it is far more declarative (i.e. explicit) to handle them with rejection callbacks. Keep in mind that this places the responsibility on you to always add at least one rejection callback when working with promises. Otherwise, any errors will go unnoticed.&lt;/p&gt;
&lt;p&gt;当捕获异常时有利于在浏览器中进行 debug, 使用注入回调来处理异常非常具有描述性(即显式的)。记住这个地方，你有责任在使用 promises 时总是添加至少一个注入回调，否则，任何错误都不会提示。&lt;/p&gt;
&lt;p&gt;Legacy behavior can be recovered by replacing use of .then() with the now-deprecated .pipe() method (which has an identical signature).&lt;/p&gt;
&lt;p&gt;Legacy 行为可以通过使用现在还不宜用的 &lt;code&gt;.pipe()&lt;/code&gt; 方法替换 &lt;code&gt;.then()&lt;/code&gt; 方法来重新获取，&lt;/p&gt;
&lt;p&gt;jQuery.when has also been updated to accept any thenable object, which includes native Promise objects.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jQuery.when&lt;/code&gt; 方法也为了接受任何 thenable 对象而更新了，包括了原生的Promise对象。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/1722&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/1722&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/2102&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/2102&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;Removed-special-case-Deferred-methods-in-jQuery-ajax-移除了jQuery-ajax中Deferred方法的一些特殊情况&quot;&gt;&lt;a href=&quot;#Removed-special-case-Deferred-methods-in-jQuery-ajax-移除了jQuery-ajax中Deferred方法的一些特殊情况&quot; class=&quot;headerlink&quot; title=&quot;Removed special-case Deferred methods in jQuery.ajax: 移除了jQuery.ajax中Deferred方法的一些特殊情况&quot;&gt;&lt;/a&gt;Removed special-case Deferred methods in jQuery.ajax: 移除了jQuery.ajax中Deferred方法的一些特殊情况&lt;/h5&gt;&lt;p&gt;jqXHR object is a Promise, but also has extra methods like .abort() so that you can stop a request after it has been made.&lt;/p&gt;
&lt;p&gt;jqXHR 对象是一个Promise，但是也有像 &lt;code&gt;.abort()&lt;/code&gt; 这样的额外的方法。因此你可以在创建之后停止一个请求。&lt;/p&gt;
&lt;p&gt;As users increasingly embrace the Promise pattern for asynchronous work like AJAX, the idea of having special cases for the Promise returned by jQuery.ajax is an increasingly bad idea.&lt;/p&gt;
&lt;p&gt;随着用户越来越拥护类似像 AJAX 这样异步执行的 Promise 模式，通过 jQuery.ajax 进行 Promise 返回特殊事例的想法是越来越坏的主意。&lt;/p&gt;
&lt;p&gt;success, error, complete&lt;br&gt;done, fail, always&lt;/p&gt;
&lt;p&gt;Note that this does not have any impact at all on the callbacks of the same name, which continue to exist and are not deprecated. This only affects the Promise methods!&lt;/p&gt;
&lt;p&gt;注意，这些对于相同名字的回调函数没有任何影响，它们将会继续存在，而且不会被弃用。这个只会影响Promise 方法！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/2084&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/2084&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;Error-cases-don’t-silently-fail-错误事例不会默默地失败&quot;&gt;&lt;a href=&quot;#Error-cases-don’t-silently-fail-错误事例不会默默地失败&quot; class=&quot;headerlink&quot; title=&quot;Error cases don’t silently fail: 错误事例不会默默地失败&quot;&gt;&lt;/a&gt;Error cases don’t silently fail: 错误事例不会默默地失败&lt;/h5&gt;&lt;p&gt;Perhaps in a profound moment you’ve wondered, “What is the offset of a window?” Then you probably realized that is a crazy question – how can a window even have an offset?&lt;/p&gt;
&lt;p&gt;也许在一个重要的时刻你会想知道，“窗口的偏移量是多少？” 然后你可能会意识到这是一个疯狂的问题 - 窗口怎么会有偏移量？&lt;/p&gt;
&lt;p&gt;In the past, jQuery has sometimes tried to make cases like this return something rather than having them throw errors. In this particular case of asking for the offset of a window, the answer up to now has been { top: 0, left: 0 } With this alpha of jQuery 3.0 we’re experimenting with the idea of having such cases throw errors so that crazy requests aren’t silently ignored. Please try the alpha and see if there is any code out there depending on jQuery to mask problems with invalid inputs.&lt;/p&gt;
&lt;p&gt;在过去，jQuery 有时会尝试去创建类似返回一些东西的事例而不是抛出一个错误。在这个询问窗口的偏移量的特殊事例中，到目前为止答案已经变成了 &lt;code&gt;{ top: 0, left: 0 }&lt;/code&gt;，在 &lt;code&gt;jQuery 3.0&lt;/code&gt; 的 &lt;code&gt;alpha&lt;/code&gt; 版本中，我们正在尝试抛出一个错误来让这些疯狂的请求不至于被默默地忽略掉这样的想法。请尝试使用 &lt;code&gt;alpha&lt;/code&gt; 版本看一下是否存在一些依赖 &lt;code&gt;jQuery&lt;/code&gt; 的代码出现无效输入的问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/1784&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/1784&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.width(), .height(), .css(“width”), and .css(“height”) to return decimal values (whenever the browser does)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.width()&lt;/code&gt;, &lt;code&gt;.height()&lt;/code&gt;, &lt;code&gt;.css(“width”)&lt;/code&gt;, 和 &lt;code&gt;.css(“height”)&lt;/code&gt; 方法将返回带有小数点的数值(不论何时浏览器都会这样做)。&lt;/p&gt;
&lt;p&gt;Previously, jQuery rounded values when retrieving width and height. Some browsers return subpixel values – such as IE and Firefox – and sometimes users need this precision when relying on these values for layout. We don’t expect this change to have a big impact on your code, but let us know if it does.&lt;/p&gt;
&lt;p&gt;以前，当你获取  width 和 height 的时候 &lt;code&gt;jQuery&lt;/code&gt; 会对其进行取整。有一些浏览器会返回亚像素值 - 例如 IE 和 Firefox，并且有时当布局依赖这些值时用户需要这种精确度的值。我们不希望这些改变会对你的代码产生很大的影响，但是如果确实影响到了，请让我们知道。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/1724&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/1724&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;Removed-deprecated-event-aliases-移除不赞成使用的事件别名&quot;&gt;&lt;a href=&quot;#Removed-deprecated-event-aliases-移除不赞成使用的事件别名&quot; class=&quot;headerlink&quot; title=&quot;Removed deprecated event aliases: 移除不赞成使用的事件别名&quot;&gt;&lt;/a&gt;Removed deprecated event aliases: 移除不赞成使用的事件别名&lt;/h5&gt;&lt;p&gt;.load, .unload, and .error, deprecated since jQuery 1.8, are no more. Use .on() to register listeners.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.load&lt;/code&gt;, &lt;code&gt;.unload&lt;/code&gt;, 和 &lt;code&gt;.error&lt;/code&gt;, 这些方法自从 &lt;code&gt;jQuery 1.8&lt;/code&gt; 就已经弃用，而且永不使用。使用 &lt;code&gt;.on()&lt;/code&gt; 注册监听器&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/2286&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/2286&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;jQuery.swap, jQuery.buildFragment, and jQuery.domManip are no longer accessible on the jQuery object&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jQuery.swap&lt;/code&gt;, &lt;code&gt;jQuery.buildFragment&lt;/code&gt;, 和 &lt;code&gt;jQuery.domManip&lt;/code&gt; 不再从 &lt;code&gt;jQuery&lt;/code&gt; 对象上获取。&lt;/p&gt;
&lt;p&gt;These methods were always intended for internal use only and were never documented. We are finally making them private to avoid confusion.&lt;/p&gt;
&lt;p&gt;这些方法常常仅在内部使用，而且也从来没有文档说明。为了避免疑惑，我们最终决定将他们私有化。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/2224&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/2224&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/2225&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/2225&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;Animations-now-use-requestAnimationFrame-动画现在使用requestAnimationFrame&quot;&gt;&lt;a href=&quot;#Animations-now-use-requestAnimationFrame-动画现在使用requestAnimationFrame&quot; class=&quot;headerlink&quot; title=&quot;Animations now use requestAnimationFrame:动画现在使用requestAnimationFrame&quot;&gt;&lt;/a&gt;Animations now use requestAnimationFrame:动画现在使用requestAnimationFrame&lt;/h5&gt;&lt;p&gt;On platforms that support the requestAnimationFrame API, which is pretty much everywhere but IE8 and IE9, jQuery will now use that API when performing animations. This should result in animations that are smoother and use less CPU time – and save battery as well on mobile devices.&lt;/p&gt;
&lt;p&gt;除了 &lt;code&gt;IE8&lt;/code&gt; 和 &lt;code&gt;IE9&lt;/code&gt; 之外，越来越多的平台都支持 &lt;code&gt;requestAnimationFrame&lt;/code&gt; API，&lt;code&gt;jQuery&lt;/code&gt; 现在在执行动画的时候也使用了此 API。这样的结果是会让动画越来平滑流畅，并且使用更少的 CPU 时间，在移动设备上也尽可能好的保存电量。&lt;/p&gt;
&lt;p&gt;jQuery tried using requestAnimationFrame a few years back but there were serious compatibility issues with existing code so we had to back it out. We think we’ve beaten most of those issues by suspending animations while a browser tab is out of view. Still, any code that depends on animations to always run in nearly real-time is making an unrealistic assumption.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jQuery&lt;/code&gt; 尝试使用 &lt;code&gt;requestAnimationFrame&lt;/code&gt; 了一些年头，但是在目前的代码中有一些很严重的兼容性问题，因此我们又把它撤销回去了。我们认为我们通过当浏览器标签页移出视野时暂停动画这种方式已经解决了这些问题中的大多数。然而，在真实的运行时环境中，任何依赖于动画的代码一直运行是一个不切实际的假想。&lt;/p&gt;
&lt;h5 id=&quot;unwrap-selector&quot;&gt;&lt;a href=&quot;#unwrap-selector&quot; class=&quot;headerlink&quot; title=&quot;.unwrap( selector )&quot;&gt;&lt;/a&gt;.unwrap( selector )&lt;/h5&gt;&lt;p&gt;Before jQuery 3.0, the .unwrap() method did not take any arguments. The selector parameter offers a way to be specific about which wrappers to remove.&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;jQuery 3.0&lt;/code&gt; 之前，&lt;code&gt;.unwrap()&lt;/code&gt; 方法不接收任何参数。selector 参数提供了一个确定哪个包装器该被移出的方式。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/1744&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/1744&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;Massive-speedups-for-some-jQuery-custom-selectors&quot;&gt;&lt;a href=&quot;#Massive-speedups-for-some-jQuery-custom-selectors&quot; class=&quot;headerlink&quot; title=&quot;Massive speedups for some jQuery custom selectors&quot;&gt;&lt;/a&gt;Massive speedups for some jQuery custom selectors&lt;/h5&gt;&lt;p&gt;Thanks to some detective work by Paul Irish at Google, we identified some cases where we could skip a bunch of extra work when custom selectors like :visible are used many times in the same document. That particular case is up to 17 times faster now!&lt;/p&gt;
&lt;p&gt;感谢来自 Google 的 Paul Irish 所做出的一些排查工作，我们才可以识别出我们可以跳过的一些额外工作，像是 &lt;code&gt;:visible&lt;/code&gt; 这样的常规的选择器在一个文档中使用好多次。特定的事例中现在在性能上能比以前快 17 倍。&lt;/p&gt;
&lt;p&gt;Keep in mind that even with this improvement, selectors like :visible and :hidden can be expensive because they depend on the browser to determine whether elements are actually displaying on the page. That may require, in the worst case, a complete recalculation of CSS styles and page layout! While we don’t discourage their use in most cases, we recommend testing your pages to determine if these selectors are causing performance issues.&lt;/p&gt;
&lt;p&gt;记住，即使这些事情改善了，像是 &lt;code&gt;:visible&lt;/code&gt; 和 &lt;code&gt;:hidden&lt;/code&gt; 这样的选择器也是很昂贵的，因为它们依赖于浏览器来决定什么时候元素确实显示在页面上。可能需要的是，在最差的情况中，CSS 样式和页面布局需要完整的重绘。尽管在大多数情况下我们不阻止使用他们，但是我们推荐你在你的页面上测试一下来确定这些选择器是否会造成一些性能问题。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jquery/jquery/issues/2042&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/jquery/jquery/issues/2042&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;译者注&quot;&gt;&lt;a href=&quot;#译者注&quot; class=&quot;headerlink&quot; title=&quot;译者注:&quot;&gt;&lt;/a&gt;译者注:&lt;/h5&gt;&lt;p&gt;具体的更新内容列表没有在此翻译，如果想具体了解请自行查看英文原文。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文根据 &lt;a href=&quot;http://blog.jquery.com/author/timmywil/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Timmy Willison&lt;/a&gt; 的《jQuery 3.0 and jQuery Compat 3.0 Alpha Versions Released》所译，整个译文带有自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：&lt;a href=&quot;http://blog.jquery.com/2015/07/13/jquery-3-0-and-jquery-compat-3-0-alpha-versions-released/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.jquery.com/2015/07/13/jquery-3-0-and-jquery-compat-3-0-alpha-versions-released/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;jQuery 3.0.0-alpha1: &lt;a href=&quot;https://code.jquery.com/jquery-3.0.0-alpha1.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://code.jquery.com/jquery-3.0.0-alpha1.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jQuery compat 3.0.0-alpha1: &lt;a href=&quot;https://code.jquery.com/jquery-3.0.0-alpha1.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://code.jquery.com/jquery-3.0.0-alpha1.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;It’s been a long time since we did a major release, and you certainly deserve one. So we’re glad to announce the first alpha of jQuery 3.0!&lt;/p&gt;
&lt;p&gt;从我们做出上一个重大的版本发布已经过去很长时间了，所以你理应再得到一个新版本。因此我们非常高兴的宣布 &lt;code&gt;jQuery 3.0&lt;/code&gt; 的第一个 &lt;code&gt;alpha&lt;/code&gt; 版本的发布。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="译文" scheme="http://blog.sqrtthree.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="jQuery3.0" scheme="http://blog.sqrtthree.com/tags/jQuery3-0/"/>
    
  </entry>
  
  <entry>
    <title>My Code Wars v0.1</title>
    <link href="http://blog.sqrtthree.com/2015/11/06/myCodeWars-01/"/>
    <id>http://blog.sqrtthree.com/2015/11/06/myCodeWars-01/</id>
    <published>2015-11-06T02:04:46.000Z</published>
    <updated>2015-11-06T02:04:46.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这里讲述的是一个8级（kyu）菜鸟立志成为8段（dan）大神的故事。故事的起因是这样的。菜鸟有幸发现了&lt;a href=&quot;http://www.codewars.com/&quot; title=&quot;codewars&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;codewars&lt;/a&gt;这个网站，从此沉迷于内一发不可收拾，他在代码战争中一次次遭遇挫败，又一次次爬起来继续跌倒下去。欲知详情，且看『迈向7级的第一个脚印』。&lt;/p&gt;
&lt;p&gt;遥想当年自高自大，而今终知天外有天。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description:&quot;&gt;&lt;/a&gt;Description:&lt;/h3&gt;&lt;p&gt;The numberOfOccurrences function must return the number of occurrences of an element in an array.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example:&quot;&gt;&lt;/a&gt;Example:&lt;/h3&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var arr = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.numberOfOccurrences(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.numberOfOccurrences(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.numberOfOccurrences(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.numberOfOccurrences(&lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt;) === &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;菜鸟出招&quot;&gt;&lt;a href=&quot;#菜鸟出招&quot; class=&quot;headerlink&quot; title=&quot;菜鸟出招&quot;&gt;&lt;/a&gt;菜鸟出招&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.numberOfOccurrences = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; total = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;[i] == num) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            total++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; total;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;菜鸟思维&quot;&gt;&lt;a href=&quot;#菜鸟思维&quot; class=&quot;headerlink&quot; title=&quot;菜鸟思维&quot;&gt;&lt;/a&gt;菜鸟思维&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;利用数组遍历&lt;/li&gt;
&lt;li&gt;如果数值相等则加1&lt;/li&gt;
&lt;li&gt;返回标记总数的变量&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;偷师学艺&quot;&gt;&lt;a href=&quot;#偷师学艺&quot; class=&quot;headerlink&quot; title=&quot;偷师学艺&quot;&gt;&lt;/a&gt;偷师学艺&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.numberOfOccurrences = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;search&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; search === num&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;关键字积累&quot;&gt;&lt;a href=&quot;#关键字积累&quot; class=&quot;headerlink&quot; title=&quot;关键字积累&quot;&gt;&lt;/a&gt;关键字积累&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;prototype&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;菜鸟总结&quot;&gt;&lt;a href=&quot;#菜鸟总结&quot; class=&quot;headerlink&quot; title=&quot;菜鸟总结&quot;&gt;&lt;/a&gt;菜鸟总结&lt;/h3&gt;&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt;是 &lt;code&gt;ECMAScirpt 5&lt;/code&gt; 中规定的数组方法，返回的数组元素是调用的数组的一个子集。传递的函数是用来逻辑判定的：该函数返回 &lt;code&gt;true&lt;/code&gt; 或是 &lt;code&gt;false&lt;/code&gt;。如果返回值为 &lt;code&gt;true&lt;/code&gt; 或是能转化为 &lt;code&gt;true&lt;/code&gt; 的值，那么传递给判定函数的元素就是这个子集的成员，它将被添加到一个作为返回值的的数组中。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filter()&lt;/code&gt; 会跳过稀疏数组中缺少的元素，它的返回值总是稠密的。为了压缩稀疏数组的空缺，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dense = sparse.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果压缩空缺并删除 &lt;code&gt;undefined&lt;/code&gt; 和&lt;code&gt;null&lt;/code&gt;元素，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = a.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x !== &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; &amp;amp;&amp;amp; x !== &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      这里记录了我在 codewars 网站上的一些收获。
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="myCodeWars" scheme="http://blog.sqrtthree.com/tags/myCodeWars/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 3.0——下一代的jQuery</title>
    <link href="http://blog.sqrtthree.com/2015/11/05/jquery3-the-next-generations/"/>
    <id>http://blog.sqrtthree.com/2015/11/05/jquery3-the-next-generations/</id>
    <published>2015-11-05T03:42:00.000Z</published>
    <updated>2015-11-05T03:42:00.000Z</updated>
    
    <content type="html">&lt;p&gt;2014年10月29日，jQuery 官方博客上更新了一篇博文，描述了关于下一代 jQuery 的一些信息。实际上这篇博文至今都已经一年时间了，jQuery 官方团队也早在2015年7月13日发布了 &lt;code&gt;jQuery 3.0.0-alpha1&lt;/code&gt; 版本。我之前也只是匆匆的看过一遍，今日闲着无事，就尝试翻译了一下并发布了这篇迟到了一年的译版，想要了解 &lt;code&gt;3.0&lt;/code&gt; 中的新特性的话可以关注我后续的更新。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;正文开始&quot;&gt;&lt;a href=&quot;#正文开始&quot; class=&quot;headerlink&quot; title=&quot;正文开始&quot;&gt;&lt;/a&gt;正文开始&lt;/h3&gt;&lt;p&gt;It’s hard to believe it’s been nearly eight years since jQuery was released. Web development has changed a lot over the years, and jQuery has changed along with it. Through all of this time, the team has tried to walk the line between maintaining compatibility with code from the past versus supporting the best web development practices of the present.&lt;/p&gt;
&lt;p&gt;很难相信从 &lt;code&gt;jQuery&lt;/code&gt; 发布以来已经过去八年了，过去的这些年 Web 开发已经改变了很多， &lt;code&gt;jQuery&lt;/code&gt; 也随之变化着。在这个过程中，团队一直在保持对旧代码的兼容性和支持目前最好的 Web 开发实践之间努力平衡着。&lt;/p&gt;
&lt;p&gt;One of those best practices is semantic versioning, or semver for short. In a practical sense, semver gives developers (and build tools) an idea of the risk involved in moving to a new version of software. Version numbers are in the form of MAJOR.MINOR.PATCH with each of the three components being an integer. In semver, if the MAJOR number changes it indicates there are breaking changes in the API and thus developers need to beware.&lt;/p&gt;
&lt;p&gt;其中最好的做法就是语义化版本，或者简单的称之为 &lt;a href=&quot;http://semver.org/lang/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;semver&lt;/a&gt;，从实践的角度看，&lt;a href=&quot;http://semver.org/lang/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;semver&lt;/a&gt; 给了开发者(以及构建工具) 一个避免由于切换软件版本导致的风险的方法。版本号为 &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; 的格式，并且其三个组成部分均为整数。在&lt;a href=&quot;http://semver.org/lang/zh-CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;semver&lt;/a&gt; 中，如果 &lt;code&gt;MAJOR&lt;/code&gt; 改变了，就意味着在 API 中出现了不兼容的改变，因此开发者们需要当心。&lt;/p&gt;
&lt;p&gt;The concept of versioning gets a little more nuanced with jQuery, where browser compatibility can be just as important as API compatibility. In order to create a slimmer jQuery, the team started shipping two versions in 2013. The first version remained numbered in the 1.x line and, currently at 1.11.1, maintains compatibility with a maximal number of browsers. The second version, starting with 2.0.0 and now at 2.1.1, dropped support for browsers like IE8 or lower in order to streamline the code. Both the 1.x and 2.x versions of jQuery have the same public APIs, even though they differ somewhat in their internal implementations.&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;jQuery&lt;/code&gt; 中版本控制变得更加微妙，(对 jQuery 来说) 浏览器的兼容性和 API 的兼容性同等重要。为了创造一个 “苗条” 的 &lt;code&gt;jQuery&lt;/code&gt; ，团队在2013年开始放出了两个版本。第一个版本保持着 1.x 的编号，当前(截止到原文发布时)最新版本为 1.11.1，其保持了最大数量的浏览器兼容性。第二个版本从 2.0.0 开始，目前是 2.1.1，为了精简代码，放弃了对 IE8及其以下版本浏览器的支持。1.x 和 2.x 版本的  &lt;code&gt;jQuery&lt;/code&gt; 都有着相同的公开 API，尽管他们在内部实现上有一些不同。&lt;/p&gt;
&lt;p&gt;Our next releases will use a different nomenclature. As before, there will be two different released files. The successor to what is now version 1.11.1 will become jQuery Compat 3.0. The successor to jQuery 2.1.1 will be jQuery 3.0. There are two different packages on npm and Bower, but they share the same version to indicate they have the same API behavior.&lt;/p&gt;
&lt;p&gt;我们的下一个版本将会使用一种全新的命名方式。像之前一样，仍然会有两个不同的发布文件。现在的 &lt;code&gt;1.11.1&lt;/code&gt; 版本的继任者将被称之为 &lt;code&gt;jQuery Compat 3.0&lt;/code&gt;。&lt;code&gt;jQuery 2.1.1&lt;/code&gt; 则将由 &lt;code&gt;jQuery 3.0&lt;/code&gt;来接替。在 &lt;code&gt;npm&lt;/code&gt; 和 &lt;code&gt;Bower&lt;/code&gt; 上(译者注: 这是目前非常流行的前端包管理工具)，它们会是两个不同的包，但它们会共享同一个版本号，来说明它们在API层面上的行为是一致的。&lt;/p&gt;
&lt;p&gt;We’ll also be re-aligning our policy for browser support starting with these releases. The main jQuery package remains small and tight by supporting the evergreen browsers (the current and previous versions of a specific browser) that are common at the time of its release. We may support additional browsers in this package based on market share. The jQuery Compat package offers much wider browser support, but at the expense of a larger file size and potentially lower performance.&lt;/p&gt;
&lt;p&gt;这次版本发布之后，我们也将调整对浏览器的支持策略。主 &lt;code&gt;jQuery&lt;/code&gt; 包将继续保持短小精悍，并且只支持在发布之时广泛使用的常青浏览器(evergreen browsers 指的是特定浏览器的当前和此前的若干版本)。我们也会根据市场份额在这个包的基础上支持更多的浏览器。而 &lt;code&gt;jQuery Compat&lt;/code&gt; 包则提供更广泛的浏览器支持，但是付出的代价就是文件变得很大，执行效率也会低一些。&lt;/p&gt;
&lt;p&gt;Despite the big version number jump, we don’t anticipate a lot of migration issues for most current jQuery code. We’re just being good semver citizens with this version bump. Changes such as removing deprecated methods will be detected by a new version of the jQuery Migrate plugin to make them easy to find and fix. We’ll have more details on the changes in future blog posts.&lt;/p&gt;
&lt;p&gt;尽管这一次版本号跳跃很大，但是对于大多数 &lt;code&gt;jQuery&lt;/code&gt; 代码来说，我们不期望造成很多的代码迁移问题。我们在这次版本升级中可是符合 &lt;code&gt;semver&lt;/code&gt; 中的好公民的标准的。诸如像移除已废弃的方法这样的改变会被新版本的 &lt;code&gt;jQuery Migrate&lt;/code&gt; 插件检测出来，这样一来，发现并且修复他们就变得容易多了。我们也会在将来的博客文章中讨论这些变化中的更多细节。&lt;/p&gt;
&lt;p&gt;So, here’s the TL;DR for version 3.0 of the jQuery API:&lt;/p&gt;
&lt;p&gt;下面就是一些 &lt;code&gt;jQuery API&lt;/code&gt; 3.0 版本要说的内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you need support for the widest variety of browsers including IE8, Opera 12, Safari 5, and the like, use the jQuery-Compat 3.0.0 package. We recommend this version for most web sites, since it provides the best compatibility for all website visitors.&lt;/li&gt;
&lt;li&gt;如果你需要支持更多更广泛的浏览器，包括诸如 &lt;code&gt;IE8, Opera 12, Safari 5&lt;/code&gt; 等，请使用 &lt;code&gt;jQuery-Compat 3.0.0&lt;/code&gt; 版本。我们建议大多数网站都使用这一版本，因为它为网站的来访者提供了最好的兼容性支持。&lt;/li&gt;
&lt;li&gt;If your web site is built only for evergreen leading-edge browsers, or is an HTML-based app contained in a webview (for example PhoneGap or Cordova) where you know which browser engines are in use, go for the jQuery 3.0.0 package.&lt;/li&gt;
&lt;li&gt;如果你的网站仅仅是为了那些最先进的浏览器而建，或者仅仅是一个基于 &lt;code&gt;HTML&lt;/code&gt; 的应用以嵌入一个 &lt;code&gt;web&lt;/code&gt; 视图(例如: PhoneGap，Cordova)，你预先知道其使用的是哪一个浏览器解析引擎， 那就使用 &lt;code&gt;jQuery 3.0.0&lt;/code&gt; 吧。&lt;/li&gt;
&lt;li&gt;Until we announce otherwise, both packages will contain the same public APIs in correspondingly-numbered major and minor versions. This should make it easy for developers to switch between the two and be maximally compatible with third-party jQuery plugins.&lt;/li&gt;
&lt;li&gt;除非我们宣布，否则对应的主、次版本号相同的两个包都会有相同的公开 API。这样开发者就能够很容易的在两个包之间切换，并且在第三方 &lt;code&gt;jQuery&lt;/code&gt; 插件中拥有最好的兼容性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With each future release, we’ll be making both packages available on npm and bower. Both packages will also be available as single-file builds on the jQuery CDN. Using them from there is as simple as including either jquery-compat-3.0.0.js or jquery-3.0.0.js depending on your needs. We’ve talked with the folks who run Google’s CDN and they will also be supporting both packages.&lt;/p&gt;
&lt;p&gt;未来每一个版本发布的时候，我们都会同时放到 &lt;code&gt;npm&lt;/code&gt; 和 &lt;code&gt;bower&lt;/code&gt; 上。两个包也会以单个文件的形式在 &lt;code&gt;jQuery CDN&lt;/code&gt; 上提供。在那里使用他们和根据你自己的需要去包含 &lt;code&gt;jquery-compat-3.0.0.js&lt;/code&gt; 或&lt;code&gt;jquery-3.0.0.js&lt;/code&gt; 一样简便。我们也和 Google’s CDN 的运营人员谈过，他们也会为这两个包提供支持。&lt;/p&gt;
&lt;p&gt;As we make further progress on version 3.0, we will update everyone with the details about code changes, supported browsers, and the like. Stay tuned!&lt;/p&gt;
&lt;p&gt;随着我们在3.0版本方面工作的推进，我们会向所有人告知代码变更、浏览器支持等一切细节的更新。敬请期待吧！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文根据 &lt;a href=&quot;http://blog.jquery.com/author/dmethvin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dave Methvin&lt;/a&gt; 的《jQuery 3.0: The Next Generations》所译，整个译文带有自己的理解与思想，如果译得不好或有不对之处还请同行朋友指点。如需转载此译文，需注明英文出处：&lt;a href=&quot;http://blog.jquery.com/2014/10/29/jquery-3-0-the-next-generations/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.jquery.com/2014/10/29/jquery-3-0-the-next-generations/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;jQuery 3.0.0-alpha1: &lt;a href=&quot;https://code.jquery.com/jquery-3.0.0-alpha1.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://code.jquery.com/jquery-3.0.0-alpha1.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;jQuery compat 3.0.0-alpha1: &lt;a href=&quot;https://code.jquery.com/jquery-3.0.0-alpha1.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://code.jquery.com/jquery-3.0.0-alpha1.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;2014年10月29日，jQuery 官方博客上更新了一篇博文，描述了关于下一代 jQuery 的一些信息。实际上这篇博文至今都已经一年时间了，jQuery 官方团队也早在2015年7月13日发布了 &lt;code&gt;jQuery 3.0.0-alpha1&lt;/code&gt; 版本。我之前也只是匆匆的看过一遍，今日闲着无事，就尝试翻译了一下并发布了这篇迟到了一年的译版，想要了解 &lt;code&gt;3.0&lt;/code&gt; 中的新特性的话可以关注我后续的更新。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="译文" scheme="http://blog.sqrtthree.com/tags/%E8%AF%91%E6%96%87/"/>
    
      <category term="jQuery3.0" scheme="http://blog.sqrtthree.com/tags/jQuery3-0/"/>
    
  </entry>
  
  <entry>
    <title>3、Supervisor 部署和配置</title>
    <link href="http://blog.sqrtthree.com/2015/10/21/server-deployment-supervisor/"/>
    <id>http://blog.sqrtthree.com/2015/10/21/server-deployment-supervisor/</id>
    <published>2015-10-20T16:08:41.000Z</published>
    <updated>2015-10-20T16:08:41.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://supervisord.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Supervisor&lt;/a&gt; 是一个用来监控和控制多个服务进程的命令行程序，我们可以用来方便的进行后台进程管理，比如说异常退出时能自动重启。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Ubuntu&lt;/code&gt; 可以直接通过 &lt;code&gt;apt&lt;/code&gt; 安装：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; install supervisor&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;配置文件详解&quot;&gt;&lt;a href=&quot;#配置文件详解&quot; class=&quot;headerlink&quot; title=&quot;配置文件详解&quot;&gt;&lt;/a&gt;配置文件详解&lt;/h3&gt;&lt;p&gt;&lt;code&gt;supervisor&lt;/code&gt; 通过对应的配置文件来进行进程的监控和管理，因此安装完成之后我们需要给将要监控的进程写一个配置文件。每个进程的配置文件都建议单独分拆，放在 &lt;code&gt;/etc/supervisor/conf.d/&lt;/code&gt; 目录下，以 &lt;code&gt;.conf&lt;/code&gt; 作为扩展名。如我们的 &lt;code&gt;shadowsocks.conf&lt;/code&gt; 配置文件。&lt;/p&gt;
&lt;p&gt;下面是配置文件的格式和支持的参数，只需要写我们需要配置的参数即可。&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[supervisorctl]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;serverurl=&lt;span class=&quot;string&quot;&gt;unix:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;///tmp/supervisor.sock ; use a unix:// URL  for a unix socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;serverurl=&lt;span class=&quot;string&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//127.0.0.1:9001 ; use an http:// url to specify an inet socket&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;username=chris              ; should be same &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; http_username &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; set&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;password=&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;                ; should be same &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; http_password &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; set&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;prompt=mysupervisor         ; cmd line prompt (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;supervisor&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;history_file=~/.sc_history  ; use readline history &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; available&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;添加单个进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;; 管理单个进程的配置，可创建多个，下面是所有可能的配置选项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;[&lt;span class=&quot;string&quot;&gt;program:&lt;/span&gt;theprogramname]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;command=&lt;span class=&quot;regexp&quot;&gt;/bin/&lt;/span&gt;cat              ; 启动进程的命令 使用相对路径，可以加参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;process_name=%(program_name)s ; 进程名称 表达式 (默认 %(program_name)s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;numprocs=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;                    ; 进程数目 (&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;directory=/tmp                ; 执行命令所在的目录 (&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; no cwd)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;umask=&lt;span class=&quot;number&quot;&gt;022&lt;/span&gt;                     ; 进程默认权限 (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; None)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;priority=&lt;span class=&quot;number&quot;&gt;999&lt;/span&gt;                  ; 进程启动相对优先权 (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;999&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;autostart=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;                ; 跟随supervisor启动时启动 (&lt;span class=&quot;string&quot;&gt;default:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;autorestart=unexpected        ; 计划启动 (&lt;span class=&quot;string&quot;&gt;default:&lt;/span&gt; unexpected)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;startsecs=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;                   ; 延时启动 (&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt;. &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;startretries=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;                ; 最多连续启动失败 (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;exitcodes=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;                 ; 进程结束代码 (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;stopsignal=QUIT               ; signal used to kill process (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; TERM)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;stopwaitsecs=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;               ; 最长结束等待时间，否则使用 SIGKILL (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;stopasgroup=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;             ; 是否想UNIX进程组发送结束信号 (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;killasgroup=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;             ; SIGKILL UNIX 进程组 (&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;user=chrism                   ; 设置启动此程序的用户&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;redirect_stderr=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;          ; 重定向程序的标准错误到标准输出 (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;stdout_logfile=&lt;span class=&quot;regexp&quot;&gt;/a/&lt;/span&gt;path        ; 标准输出的日志路径, NONE &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; none; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; AUTO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;stdout_logfile_maxbytes=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;MB   ; 日志文件最大值，否则循环写入 (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;MB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;stdout_logfile_backups=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;     ; 标准输出日志备份数目 (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;stdout_capture_maxbytes=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;MB   ; number of bytes &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;capturemode&#39;&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;stdout_events_enabled=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;   ; emit events on stdout writes (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;stderr_logfile=&lt;span class=&quot;regexp&quot;&gt;/a/&lt;/span&gt;path        ; 标准错误输出日志路径, NONE &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; none; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; AUTO&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;stderr_logfile_maxbytes=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;MB   ; 日志文件最大值，否则循环写入 (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;MB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;stderr_logfile_backups=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;     ; 标准错误日志备份数目 (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;stderr_capture_maxbytes=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;MB   ; number of bytes &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;capturemode&#39;&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;stderr_events_enabled=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;   ; emit events on stderr writes (&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;environment=A=&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;,B=&lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;       ; 进程附加环境 (&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; no adds)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;serverurl=AUTO                ; override serverurl computation (childutils)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如，可以简单的配置成:&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[program:long_script]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;command&lt;/span&gt;=/usr/local/bin/long.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;autostart&lt;/span&gt;=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;autorestart&lt;/span&gt;=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;stderr_logfile&lt;/span&gt;=/var/log/long.err.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;stdout_logfile&lt;/span&gt;=/var/log/long.out.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编写完配置文件之后，通过 &lt;code&gt;service supervisor restart&lt;/code&gt; 命令重启 &lt;code&gt;supervisor&lt;/code&gt; 服务，也可以通过以下方式进行温柔的重启服务和进程:&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;supervisorctl&lt;/span&gt; reread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;supervisorctl update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;命令行工具-supervisorctl&quot;&gt;&lt;a href=&quot;#命令行工具-supervisorctl&quot; class=&quot;headerlink&quot; title=&quot;命令行工具 supervisorctl&quot;&gt;&lt;/a&gt;命令行工具 supervisorctl&lt;/h3&gt;&lt;p&gt;查看所有命令:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;supervisorctl &lt;span class=&quot;keyword&quot;&gt;help&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; commands (&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;help&lt;/span&gt; ):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=====================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;add&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;clear&lt;/span&gt;  fg        &lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt;  quit    remove  restart   &lt;span class=&quot;keyword&quot;&gt;start&lt;/span&gt;   &lt;span class=&quot;keyword&quot;&gt;stop&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;avail  &lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt;   maintail  pid   reload  reread  &lt;span class=&quot;keyword&quot;&gt;shutdown&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;status&lt;/span&gt;  tail  &lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;常用命令的功能:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;supervisorctl &lt;span class=&quot;keyword&quot;&gt;stop&lt;/span&gt; programName，停止某一个进程(programName)，programName为[program:chatdemon]里配置的值。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;supervisorctl &lt;span class=&quot;keyword&quot;&gt;start&lt;/span&gt; programName，启动某个进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;supervisorctl restart programName，重启某个进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;supervisorctl &lt;span class=&quot;keyword&quot;&gt;stop&lt;/span&gt; groupworker: ，重启所有属于名为groupworker这个分组的进程(&lt;span class=&quot;keyword&quot;&gt;start&lt;/span&gt;,restart同理)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;supervisorctl &lt;span class=&quot;keyword&quot;&gt;stop&lt;/span&gt; all，停止全部进程，注：&lt;span class=&quot;keyword&quot;&gt;start&lt;/span&gt;、restart、&lt;span class=&quot;keyword&quot;&gt;stop&lt;/span&gt;都不会载入最新的配置文件。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;supervisorctl reload，载入最新的配置文件，停止原有进程并按新的配置启动、管理所有进程。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;supervisorctl &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt;，根据最新的配置文件，启动新配置或有改动的进程，配置没有改动的进程不会受影响而重启。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行 &lt;code&gt;supervisorctl&lt;/code&gt; 命令需要管理员权限，如果你以普通用户的身份登陆服务器，需要在命令前使用 &lt;code&gt;sudo&lt;/code&gt; 命令: &lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;sudo&lt;/span&gt; supervisorctl reread&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo supervisorctl update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/article/0013738926914703df5e93589a14c19807f0e285194fe84000&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.liaoxuefeng.com/article/0013738926914703df5e93589a14c19807f0e285194fe84000&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-manage-supervisor-on-ubuntu-and-debian-vps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-install-and-manage-supervisor-on-ubuntu-and-debian-vps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://supervisord.org/&quot;&gt;Supervisor&lt;/a&gt; 是一个用来监控和控制多个服务进程的命令行程序，我们可以用来方便的进行后台进程管理，比如说异常退出时能自动重启。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Ubuntu&lt;/code&gt; 可以直接通过 &lt;code&gt;apt&lt;/code&gt; 安装：&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-&lt;span class=&quot;keyword&quot;&gt;get&lt;/span&gt; install supervisor&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="服务器部署" scheme="http://blog.sqrtthree.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>2、shadowsocks 部署和配置</title>
    <link href="http://blog.sqrtthree.com/2015/10/20/server-deployment-shadowsocks/"/>
    <id>http://blog.sqrtthree.com/2015/10/20/server-deployment-shadowsocks/</id>
    <published>2015-10-20T15:38:06.000Z</published>
    <updated>2015-10-20T15:38:06.000Z</updated>
    
    <content type="html">&lt;p&gt;关于 &lt;code&gt;shadowsocks&lt;/code&gt; 是什么就不多介绍了，这是&lt;a href=&quot;http://shadowsocks.org/en/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;，我们前面做了这么多就是为了它，闲话不多说，直接开始搭建服务吧。&lt;/p&gt;
&lt;h3 id=&quot;服务端配置&quot;&gt;&lt;a href=&quot;#服务端配置&quot; class=&quot;headerlink&quot; title=&quot;服务端配置:&quot;&gt;&lt;/a&gt;服务端配置:&lt;/h3&gt;&lt;p&gt;首先请确保你的服务器中已经安装了 &lt;code&gt;Python 2.6 or 2.7&lt;/code&gt;，然后执行以下命令进行安装:&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-get &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; python-pip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; shadowsocks&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;然后？然后就安装完成了啊。什么？你不确定？那你可以输入 &lt;code&gt;ssserver --version&lt;/code&gt; 进行确认，如果安装成功，则会反馈程序的当前版本号。&lt;/p&gt;
&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssserver &lt;span class=&quot;comment&quot;&gt;--version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Shadowsocks &lt;span class=&quot;number&quot;&gt;2.8&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来，你可以通过 &lt;code&gt;ssserver --help&lt;/code&gt; 查看该命令的用法。&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ssserver --&lt;span class=&quot;keyword&quot;&gt;help&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;usage: ssserver [OPTION]...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A fast tunnel proxy that helps you bypass firewalls.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;You can supply configurations via either config &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;line&lt;/span&gt; arguments.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Proxy option&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&lt;span class=&quot;keyword&quot;&gt;c&lt;/span&gt; CONFIG              path &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; config &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -s SERVER_ADDR         server address, defaul&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&lt;span class=&quot;keyword&quot;&gt;p&lt;/span&gt; SERVER_PORT         server port, defaul&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8388&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&lt;span class=&quot;keyword&quot;&gt;k&lt;/span&gt; PASSWORD            password&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt; METHOD              encryption method, defaul&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt; aes-&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;-cfb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -t TIMEOUT             timeout in seconds, defaul&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --fast-&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt;            use TCP_FASTOPEN, requires Linux &lt;span class=&quot;number&quot;&gt;3.7&lt;/span&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --workers WORKERS      &lt;span class=&quot;keyword&quot;&gt;number&lt;/span&gt; of workers, available &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt; Unix/Linux&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --forbidden-ip IPLIST  comma seperated IP &lt;span class=&quot;keyword&quot;&gt;list&lt;/span&gt; forbidden &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; connect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --manager-address ADDR optional server manager UDP address, see wiki&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;General option&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -h, --&lt;span class=&quot;keyword&quot;&gt;help&lt;/span&gt;             show this &lt;span class=&quot;keyword&quot;&gt;help&lt;/span&gt; message &lt;span class=&quot;built_in&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;exit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -d start/&lt;span class=&quot;keyword&quot;&gt;stop&lt;/span&gt;/restart  daemon &lt;span class=&quot;keyword&quot;&gt;mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --pid-&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; PID_FILE    pid &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; daemon &lt;span class=&quot;keyword&quot;&gt;mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;-&lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; LOG_FILE    &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; daemon &lt;span class=&quot;keyword&quot;&gt;mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --user USER            username &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; run &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -v, -vv                &lt;span class=&quot;keyword&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -q, -qq                quiet &lt;span class=&quot;keyword&quot;&gt;mode&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;only&lt;/span&gt; show warnings/errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --&lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt;              show &lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt; information&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Online &lt;span class=&quot;keyword&quot;&gt;help&lt;/span&gt;: &amp;lt;http&lt;span class=&quot;variable&quot;&gt;s:&lt;/span&gt;//github.&lt;span class=&quot;keyword&quot;&gt;com&lt;/span&gt;/shadowsocks/shadowsocks&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;比如说你可以这样启动服务:&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssserver -&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8388&lt;/span&gt; -k password -m aes-&lt;span class=&quot;number&quot;&gt;256&lt;/span&gt;-cfb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然了，每次都在命令行上配置是很麻烦的，所幸 &lt;code&gt;ssserver&lt;/code&gt; 还支持以配置文件方式启动。比如说，我们在 &lt;code&gt;~/.config/shadowsocks/&lt;/code&gt; 文件夹下创建一个 &lt;code&gt;config.json&lt;/code&gt; 文件作为 &lt;code&gt;ssserver&lt;/code&gt; 的启动配置文件(文件位置随意，放在什么地方都无所谓)， &lt;code&gt;config.json&lt;/code&gt; 文件内容如下:&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;timeout&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;600&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;method&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;local_port&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1080&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;server&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;server_port&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;8388&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;password&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上参数很简单，就不过多解释了，保存好文件之后执行以下命令启动服务即可:&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssserver -c ~/.&lt;span class=&quot;built_in&quot;&gt;config&lt;/span&gt;/shadowsocks/&lt;span class=&quot;built_in&quot;&gt;config&lt;/span&gt;.json&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果想在后台运行，可以带上 &lt;code&gt;nohup&lt;/code&gt; 命令:&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nohup ssserver -c ~/.&lt;span class=&quot;built_in&quot;&gt;config&lt;/span&gt;/shadowsocks/&lt;span class=&quot;built_in&quot;&gt;config&lt;/span&gt;.json &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然了，还有更高级的进程管理技巧，这个下一篇文章里会详细介绍。&lt;/p&gt;
&lt;p&gt;上面所说的 &lt;code&gt;config.json&lt;/code&gt; 文件中还支持配置多端口，我们可以利用这个特性达到多账号使用的效果。配置方式为:&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;timeout&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;600&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;method&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;local_port&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1080&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;server&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;port_password&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;8388&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;password1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;8389&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;password2&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;_comment&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;8388&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;描述一，可以用来记录端口备注或是对应的用户&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;8389&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;描述二，可以用来记录端口备注或是对应的用户&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因为 &lt;code&gt;json&lt;/code&gt; 文件不支持注释，因此配置文件中扩展了一个 &lt;code&gt;_comment&lt;/code&gt; 参数用来进行备注，程序会自动忽略掉该参数。&lt;/p&gt;
&lt;h3 id=&quot;客户端配置&quot;&gt;&lt;a href=&quot;#客户端配置&quot; class=&quot;headerlink&quot; title=&quot;客户端配置&quot;&gt;&lt;/a&gt;客户端配置&lt;/h3&gt;&lt;p&gt;相对来说客户端就太简单了，各个平台均有 &lt;code&gt;GUI&lt;/code&gt; 版本的客户端，只需要下载安装即可。文章最下方提供下载链接。&lt;/p&gt;
&lt;p&gt;以 &lt;code&gt;Mac&lt;/code&gt; 客户端举例，安装完成之后，点击小飞机图标，选择添加服务器，然后将服务端配置中的 &lt;code&gt;端口号&lt;/code&gt;，&lt;code&gt;加密方式&lt;/code&gt;，&lt;code&gt;密码&lt;/code&gt; 填写至对应的一栏中，其中服务器地址一栏要填写服务器的公网 &lt;code&gt;IP&lt;/code&gt; 地址。之后就可以尽情的徜徉了。&lt;/p&gt;
&lt;p&gt;下载链接:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 版: &lt;a href=&quot;http://pan.baidu.com/s/1jGrmINW&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接: http://pan.baidu.com/s/1jGrmINW&lt;/a&gt; 密码: uti7&lt;/li&gt;
&lt;li&gt;Mac 版: &lt;a href=&quot;http://pan.baidu.com/s/1gdEt251&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接: http://pan.baidu.com/s/1gdEt251&lt;/a&gt; 密码: tpi6&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关于 &lt;code&gt;shadowsocks&lt;/code&gt; 是什么就不多介绍了，这是&lt;a href=&quot;http://shadowsocks.org/en/index.html&quot;&gt;官网&lt;/a&gt;，我们前面做了这么多就是为了它，闲话不多说，直接开始搭建服务吧。&lt;/p&gt;
&lt;h3 id=&quot;服务端配置&quot;&gt;&lt;a href=&quot;#服务端配置&quot; class=&quot;headerlink&quot; title=&quot;服务端配置:&quot;&gt;&lt;/a&gt;服务端配置:&lt;/h3&gt;&lt;p&gt;首先请确保你的服务器中已经安装了 &lt;code&gt;Python 2.6 or 2.7&lt;/code&gt;，然后执行以下命令进行安装:&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apt-get &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; python-pip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip &lt;span class=&quot;keyword&quot;&gt;install&lt;/span&gt; shadowsocks&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="服务器部署" scheme="http://blog.sqrtthree.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>1、SSH 登陆配置</title>
    <link href="http://blog.sqrtthree.com/2015/10/20/server-deployment-ssh/"/>
    <id>http://blog.sqrtthree.com/2015/10/20/server-deployment-ssh/</id>
    <published>2015-10-20T05:23:27.000Z</published>
    <updated>2015-10-20T05:23:27.000Z</updated>
    
    <content type="html">&lt;p&gt;简单说，SSH是一种网络协议，用于计算机之间的加密登录。关于详细的信息呢，各位可自行 Google。&lt;/p&gt;
&lt;p&gt;我们在上一步创建好服务器之后，我们可以在 &lt;a href=&quot;https://cloud.digitalocean.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://cloud.digitalocean.com/&lt;/a&gt; 查看到服务器列表和 &lt;code&gt;ip&lt;/code&gt; 地址。&lt;/p&gt;
&lt;p&gt;因为我在初始化的过程中没有直接添加 &lt;code&gt;ssh&lt;/code&gt; 认证登陆，所以我登陆到服务器之后要先自行添加和配置。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;配置公钥登录&quot;&gt;&lt;a href=&quot;#配置公钥登录&quot; class=&quot;headerlink&quot; title=&quot;配置公钥登录&quot;&gt;&lt;/a&gt;配置公钥登录&lt;/h3&gt;&lt;p&gt;1、首先，在收到包含有服务器密码的邮件之后，打开终端(或是命令行)工具，输入 &lt;code&gt;ssh user@host&lt;/code&gt; 命令进行登录，由于是第一次登陆，所以默认登陆为 &lt;code&gt;root&lt;/code&gt;账户，例如:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;root&lt;/span&gt;@&lt;span class=&quot;keyword&quot;&gt;192&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;168&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2、之后会提示让你输入密码，你需要将邮件中的初始密码输入，注意，输入密码的时候屏幕不会出现任何反馈，会可能会造成一种没有输入的错觉，你只需正常输入并敲击回车表示完成即可。&lt;/p&gt;
&lt;p&gt;3、第一次登陆成功之后，会提示让你进行修改密码，修改完密码之后即以 &lt;code&gt;root&lt;/code&gt; 身份登入服务器。&lt;/p&gt;
&lt;p&gt;4、使用密码登录，每次都必须输入密码，非常麻烦。因此我们需要配置公钥登录。首先在本地生成对应的公钥。如果你之前已经生成过，则可以直接跳过这一步。SSH 公钥默认储存在账户的主目录下的 &lt;code&gt;~/.ssh&lt;/code&gt; 目录。使用一下命令查看:&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;cd&lt;/span&gt; ~/.ssh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关键是看有没有用 &lt;code&gt;something&lt;/code&gt; 和 &lt;code&gt;something.pub&lt;/code&gt; 来命名的一对文件，这个 &lt;code&gt;something&lt;/code&gt; 通常就是 &lt;code&gt;id_dsa&lt;/code&gt; 或 &lt;code&gt;id_rsa&lt;/code&gt;。有 &lt;code&gt;.pub&lt;/code&gt; 后缀的文件就是公钥，另一个文件则是密钥。假如没有这些文件，或者干脆连 .ssh 目录都没有，可以用 ssh-keygen 来创建，生成的命令为:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它先要求你确认保存公钥的位置 &lt;code&gt;~.ssh/id_rsa&lt;/code&gt;，然后它会让你重复一个密码两次，如果不想在使用公钥的时候输入密码，可以留空。&lt;/p&gt;
&lt;p&gt;5、拿到公钥之后，就要将公钥上传到服务器。谨记: 一定要在本地保管好你的私钥，而公钥可以发布到各服务器上。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt; 用户可以使用 &lt;code&gt;ssh-copy-id user@host&lt;/code&gt;进行上传，&lt;code&gt;Mac&lt;/code&gt; 用户则需要麻烦一点:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;scp ~&lt;span class=&quot;regexp&quot;&gt;/.ssh/id&lt;/span&gt;_rsa.pub user@host&lt;span class=&quot;symbol&quot;&gt;:~/&lt;/span&gt;.ssh/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh user@host&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ~&lt;span class=&quot;regexp&quot;&gt;/.ssh/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat id_rsa.pub &lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;authorized_keys&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果服务器 &lt;code&gt;.ssh&lt;/code&gt; 目录下没有 &lt;code&gt;authorized_keys&lt;/code&gt; 文件，则可以创建一个。&lt;/p&gt;
&lt;p&gt;基本上到这里就算是配置完成了，你可以退出然后重新登录一下测试是否配置成功。&lt;/p&gt;
&lt;h3 id=&quot;SSH-配置&quot;&gt;&lt;a href=&quot;#SSH-配置&quot; class=&quot;headerlink&quot; title=&quot;SSH 配置&quot;&gt;&lt;/a&gt;SSH 配置&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;SSH 的配置均通过修改 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; 配置文件实现，例如: &lt;code&gt;vim /etc/ssh/sshd_config&lt;/code&gt;。&lt;strong&gt;修改配置时最好进行备份操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;修改完之后如果想要立即生效需要重启SSH服务: &lt;code&gt;sudo service ssh restart&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;更多的 SSH 服务命令可阅读文章下方的参考资料。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、建议修改ssh登录端口，修改端口可以防止被端口扫描。找到 &lt;code&gt;Port 22&lt;/code&gt;，修改成一个五位的端口：&lt;code&gt;Port 22222&lt;/code&gt; 之类的一个比较大的数字，减小被扫描到的可能性。&lt;em&gt;建议先添加一个端口，待确认能够通过新添加的端口连接成功，再将原端口注释掉。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;2、为了安全设置，可以选择禁用 &lt;code&gt;root&lt;/code&gt; 账户的密码登录，设置配置文件中的 &lt;code&gt;PermitRootLogin&lt;/code&gt; 为 &lt;code&gt;without-password&lt;/code&gt;。甚至可以直接禁用 &lt;code&gt;root&lt;/code&gt; 账户登录，新建一个普通用户进行登录。&lt;/p&gt;
&lt;h3 id=&quot;新建普通用户登录&quot;&gt;&lt;a href=&quot;#新建普通用户登录&quot; class=&quot;headerlink&quot; title=&quot;新建普通用户登录&quot;&gt;&lt;/a&gt;新建普通用户登录&lt;/h3&gt;&lt;p&gt;目前我们总是以 &lt;code&gt;root&lt;/code&gt; 用户的身份进行登录，而 &lt;code&gt;root&lt;/code&gt; 由于权限太高造成风险也随之升高，因此我们需要在服务器上创建一个普通用户身份以做平时登录使用。&lt;/p&gt;
&lt;p&gt;创建普通用户的命令为:&lt;br&gt;&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;adduser &lt;/span&gt;newUser&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样系统就会自动创建用户主目录，创建用户同名的组，然后屏幕就会出现以下信息:&lt;/p&gt;
&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;正在添加用户&lt;span class=&quot;string&quot;&gt;&quot;newUser&quot;&lt;/span&gt;…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;正在添加新组&lt;span class=&quot;string&quot;&gt;&quot;newUser&quot;&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1006&lt;/span&gt;)…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;正在添加新用户&lt;span class=&quot;string&quot;&gt;&quot;newUser&quot;&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1006&lt;/span&gt;) 到组&lt;span class=&quot;string&quot;&gt;&quot;newUser&quot;&lt;/span&gt;…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;创建主目录&lt;span class=&quot;string&quot;&gt;&quot;/home/newUser&quot;&lt;/span&gt;…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;正在从&lt;span class=&quot;string&quot;&gt;&quot;/etc/skel&quot;&lt;/span&gt;复制文件…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;输入新的 UNIX 口令： (作者注:这里是输入新账号的密码)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;重新输入新的 UNIX 口令：&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两次输入 &lt;code&gt;newUser&lt;/code&gt; 的初始密码，出现的信息如下:&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;passwd: password updated successfully&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Changing &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; user information &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; db&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Enter &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;value&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; press ENTER &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Full Name []:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Room Number []:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Work Phone []:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Home Phone []:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Other []:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Full Name []:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;等信息一路回车&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;这个信息是否正确？ &lt;span class=&quot;string&quot;&gt;[Y/n]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;致此，新用户就创建好了。&lt;/p&gt;
&lt;p&gt;当然了，还有一些事情需要处理。&lt;/p&gt;
&lt;h5 id=&quot;1、让该用户具有使用-sudo-命令的权限&quot;&gt;&lt;a href=&quot;#1、让该用户具有使用-sudo-命令的权限&quot; class=&quot;headerlink&quot; title=&quot;1、让该用户具有使用 sudo 命令的权限&quot;&gt;&lt;/a&gt;1、让该用户具有使用 &lt;code&gt;sudo&lt;/code&gt; 命令的权限&lt;/h5&gt;&lt;p&gt;通过编辑配置文件 &lt;code&gt;/etc/sudoers&lt;/code&gt; 来实现:&lt;/p&gt;
&lt;figure class=&quot;highlight gams&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/sudoers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 然后添加如下内容:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;%newUser &lt;span class=&quot;keyword&quot;&gt;ALL&lt;/span&gt;=(&lt;span class=&quot;keyword&quot;&gt;ALL&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;ALL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newUser &lt;span class=&quot;keyword&quot;&gt;ALL&lt;/span&gt;=(&lt;span class=&quot;keyword&quot;&gt;ALL&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;ALL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;保存，退出。深藏功与名。&lt;/p&gt;
&lt;h5 id=&quot;2、使用普通用户身份进行登录&quot;&gt;&lt;a href=&quot;#2、使用普通用户身份进行登录&quot; class=&quot;headerlink&quot; title=&quot;2、使用普通用户身份进行登录&quot;&gt;&lt;/a&gt;2、使用普通用户身份进行登录&lt;/h5&gt;&lt;p&gt;当然了，你如果想要以此用户的身份进行 &lt;code&gt;ssh&lt;/code&gt; 登录，还需要将之前的公钥上传至该用户目录下。&lt;/p&gt;
&lt;h3 id=&quot;本地-SSH-配置&quot;&gt;&lt;a href=&quot;#本地-SSH-配置&quot; class=&quot;headerlink&quot; title=&quot;本地 SSH 配置&quot;&gt;&lt;/a&gt;本地 SSH 配置&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;每次登录都需要输入用户名和 Host，麻烦不？当然麻烦了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面讲了辣么多的服务器端配置，这里就来讲一下本地配置。本地的配置文件默认为 &lt;code&gt;~/.ssh/config&lt;/code&gt;，如果不存在则新创建一个，其配置写法如下:&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Host    别名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HostName        主机名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Port            端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;User&lt;/span&gt;            &lt;span class=&quot;title&quot;&gt;用户名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    IdentityFile&lt;/span&gt;    密钥文件的路径&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的配置可以缺省，不需要每一个都填写。有了这些配置，就可以这样用 &lt;code&gt;ssh&lt;/code&gt; 登陆服务器了:&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;ssh&lt;/span&gt; 别名&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;怎么样？是不是方便了很多呢。 O(∩_∩)O哈哈~&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SSH原理与运用（一）：远程登录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://segmentfault.com/a/1190000002492828#articleHeader4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SSH的配置和命令介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.kafan.cn/edu/584682.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ubuntu中useradd和adduser的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;简单说，SSH是一种网络协议，用于计算机之间的加密登录。关于详细的信息呢，各位可自行 Google。&lt;/p&gt;
&lt;p&gt;我们在上一步创建好服务器之后，我们可以在 &lt;a href=&quot;https://cloud.digitalocean.com/&quot;&gt;https://cloud.digitalocean.com/&lt;/a&gt; 查看到服务器列表和 &lt;code&gt;ip&lt;/code&gt; 地址。&lt;/p&gt;
&lt;p&gt;因为我在初始化的过程中没有直接添加 &lt;code&gt;ssh&lt;/code&gt; 认证登陆，所以我登陆到服务器之后要先自行添加和配置。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="服务器部署" scheme="http://blog.sqrtthree.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>0、服务器主机选择和购买</title>
    <link href="http://blog.sqrtthree.com/2015/10/19/server-deployment-choose/"/>
    <id>http://blog.sqrtthree.com/2015/10/19/server-deployment-choose/</id>
    <published>2015-10-19T05:28:41.000Z</published>
    <updated>2015-10-19T05:28:41.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;由于某种不能说的原因，导致我们没法使用 Google，作为一个开发人员这是不能容忍的，近日来发现竟然连 &lt;a href=&quot;https://gist.github.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gist.github.com/&lt;/a&gt; 都无法访问，这简直令人发指。于是各种代理服务就如雨后春笋一般出现，但是前段时间某技术升级加上各种手段，导致该关闭的关闭，该封停的封定，现在还有 &lt;code&gt;shadowsocks&lt;/code&gt; 技术勉强可以维持，但该项目已经不再更新 &lt;em&gt;(:з」∠)&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;有些网站也会提供一些免费的 &lt;code&gt;shadowsocks&lt;/code&gt; 账号供使用，但我体验了一段时间之后，第一觉得太麻烦，因为这种公共服务基本上每过一段时间就会改一次密码。第二是不太稳定，并且总觉得在私密性上放不下心，就想着自己利用服务器搭建一个私人服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为之前没有接触过服务器端的部署，蹒跚学步的过程中遇到了很多困惑和问题，在这里也做一下记录，写一个 &lt;code&gt;&amp;quot;服务器部署从入门不一定到精通&amp;quot;&lt;/code&gt; 系列，待多年以后回头来看我是这样被大家看着长大的 O(∩_∩)O哈哈哈~。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;服务器商选择&quot;&gt;&lt;a href=&quot;#服务器商选择&quot; class=&quot;headerlink&quot; title=&quot;服务器商选择&quot;&gt;&lt;/a&gt;服务器商选择&lt;/h2&gt;&lt;p&gt;最初的目的是为了搭建一些服务以达到代理访问外网的目的，因此毋庸置疑的就要选择那些海外服务器。目前口碑最高的是 &lt;a href=&quot;https://www.linode.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linode&lt;/a&gt; 和 &lt;a href=&quot;https://www.digitalocean.com/?refcode=d2b2550b5631&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;digitalocean&lt;/a&gt;, 至于两者的区别可以参考&lt;a href=&quot;http://www.zhihu.com/question/21454090&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.zhihu.com/question/21454090&lt;/a&gt; 或者其他资料。总之，我选择了 &lt;a href=&quot;https://www.digitalocean.com/?refcode=d2b2550b5631&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;digitalocean&lt;/a&gt;，如果你也选择这个服务商，点击前面的链接注册后可以获得 &lt;strong&gt;10美金&lt;/strong&gt; 的奖励，自己搜索注册可没有哟~&lt;/p&gt;
&lt;h2 id=&quot;购买服务器&quot;&gt;&lt;a href=&quot;#购买服务器&quot; class=&quot;headerlink&quot; title=&quot;购买服务器&quot;&gt;&lt;/a&gt;购买服务器&lt;/h2&gt;&lt;p&gt;注册完账号之后，访问 &lt;a href=&quot;https://cloud.digitalocean.com/droplets/new&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://cloud.digitalocean.com/droplets/new&lt;/a&gt; 即可选购一个新服务器。&lt;/p&gt;
&lt;p&gt;0、绑定支付方式&lt;/p&gt;
&lt;p&gt;选购之前需要绑定支付方式才能进行购买，方式有两种，一种是绑定信用卡，一种是通过 &lt;code&gt;paypal&lt;/code&gt; 支付 5 美元。&lt;/p&gt;
&lt;p&gt;1、填写 Droplet Hostname&lt;/p&gt;
&lt;p&gt;给你的服务器起一个名字。&lt;/p&gt;
&lt;p&gt;2、Select Size&lt;/p&gt;
&lt;p&gt;&lt;code&gt;digitalocean&lt;/code&gt; 最低提供 &lt;code&gt;5美金/月&lt;/code&gt; 的套餐，并且是按小时扣费。如果你只是为了搭建一个代理服务， 这个套餐足够使用了。&lt;/p&gt;
&lt;p&gt;3、Select Region&lt;/p&gt;
&lt;p&gt;&lt;code&gt;digitalocean&lt;/code&gt; 目前提供7个城市的机房可选，其中 &lt;code&gt;New York&lt;/code&gt; 和 &lt;code&gt;Amsterdam&lt;/code&gt; 各有三个机房，其他地区各一个机房可选。大陆用户建议选择美国西海岸机房，因为优化做的很棒，访问速度还可以。新推出的新加坡机房虽然在亚洲，但是好像从评价来看速度和优化并不理想。我选择了 &lt;code&gt;San Francisco&lt;/code&gt; 机房。&lt;/p&gt;
&lt;p&gt;4、Select Image&lt;/p&gt;
&lt;p&gt;小白用户和开发者建议选择 &lt;code&gt;Ubuntu&lt;/code&gt;，运维和高级人员可以使用 &lt;code&gt;CentOS&lt;/code&gt;系统。&lt;/p&gt;
&lt;p&gt;5、Available Settings&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;Backups&lt;/code&gt; 自动备份选项是附加收费业务，每月20%的收费标准。&lt;/p&gt;
&lt;p&gt;6、Add SSH Keys&lt;/p&gt;
&lt;p&gt;添加 &lt;code&gt;ssh&lt;/code&gt; 公钥，建议在这里直接添加 &lt;code&gt;ssh&lt;/code&gt; 公钥，会方便很多。如果你没有选择添加 &lt;code&gt;ssh keys&lt;/code&gt;，那么在服务器创建好之后会给你发一封包含服务器密码的邮件，你使用该密码第一次登陆服务器时，会要求更改密码。&lt;/p&gt;
&lt;p&gt;7、Create Droplet&lt;/p&gt;
&lt;p&gt;然后点击 &lt;code&gt;Create Droplet&lt;/code&gt; 按钮，稍等一分钟你就拥有了一台海外服务器咯。&lt;/p&gt;
&lt;p&gt;之后你在 &lt;a href=&quot;https://cloud.digitalocean.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://cloud.digitalocean.com/&lt;/a&gt; 就可以查看到你的服务器了。&lt;/p&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于某种不能说的原因，导致我们没法使用 Google，作为一个开发人员这是不能容忍的，近日来发现竟然连 &lt;a href=&quot;https://gist.github.com/&quot;&gt;https://gist.github.com/&lt;/a&gt; 都无法访问，这简直令人发指。于是各种代理服务就如雨后春笋一般出现，但是前段时间某技术升级加上各种手段，导致该关闭的关闭，该封停的封定，现在还有 &lt;code&gt;shadowsocks&lt;/code&gt; 技术勉强可以维持，但该项目已经不再更新 &lt;em&gt;(:з」∠)&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;有些网站也会提供一些免费的 &lt;code&gt;shadowsocks&lt;/code&gt; 账号供使用，但我体验了一段时间之后，第一觉得太麻烦，因为这种公共服务基本上每过一段时间就会改一次密码。第二是不太稳定，并且总觉得在私密性上放不下心，就想着自己利用服务器搭建一个私人服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为之前没有接触过服务器端的部署，蹒跚学步的过程中遇到了很多困惑和问题，在这里也做一下记录，写一个 &lt;code&gt;&amp;quot;服务器部署从入门不一定到精通&amp;quot;&lt;/code&gt; 系列，待多年以后回头来看我是这样被大家看着长大的 O(∩_∩)O哈哈哈~。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="服务器部署" scheme="http://blog.sqrtthree.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 JS 中的严格模式</title>
    <link href="http://blog.sqrtthree.com/2015/10/09/strict-mode/"/>
    <id>http://blog.sqrtthree.com/2015/10/09/strict-mode/</id>
    <published>2015-10-09T04:05:12.000Z</published>
    <updated>2015-10-09T04:05:12.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是严格模式？&quot;&gt;&lt;a href=&quot;#什么是严格模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是严格模式？&quot;&gt;&lt;/a&gt;什么是严格模式？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;严格模式&lt;/code&gt; 是 ECMAScript 5 中引入的一种将更好的错误检查引入代码中的方法, 现在已经被大多浏览器实现. 顾名思义，这种模式使得Javascript在更严格的条件下运行.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;因此, 在严格模式下, 我们的一些不严谨的写法将会导致程序抛出错误. 例如:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;param&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt; = []; &lt;span class=&quot;comment&quot;&gt;// 在严格模式下该行将会抛出错误: error: redefinition of arguments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的代码中, 由于 &lt;code&gt;arguments&lt;/code&gt; 在 js 中是一个特殊对象, 在严格模式下是不允许被重新定义的. 但是没有实现严格模式检查的环境中会接受这段代码. &lt;/p&gt;
&lt;h2 id=&quot;为什么会出现严格模式？&quot;&gt;&lt;a href=&quot;#为什么会出现严格模式？&quot; class=&quot;headerlink&quot; title=&quot;为什么会出现严格模式？&quot;&gt;&lt;/a&gt;为什么会出现严格模式？&lt;/h2&gt;&lt;p&gt;总所周知, 从 ECMAscript 从1997年正式成为国际标准以来, 已经发布了6个版本. 除此之外, 还存在一些 Javascript 实现支持非标准特性, 而其他的 Javascript 实现却并不支持这些特性的情况. 由于 Javascript 的实现多样化, 我们很难确定哪些特性在哪些平台上是支持的, 再加上 Web 浏览器的复杂性, 并且它并不能让开发者指定某一个特定的 Javascript 版本来执行我们的程序. 因此我们需要精心的编写程序, 以确保在所有的平台上都能够正常运行.&lt;/p&gt;
&lt;p&gt;因此在 ES5 中引入了一种版本控制的考量: &lt;code&gt;严格模式&lt;/code&gt;. 此特性允许开发者选择在受限制的 Javascript 版本中禁止使用一些 Javascript 语言中问题较多或是易于出错的特性.&lt;/p&gt;
&lt;p&gt;由于其语法强大的向后兼容特性, 所以即使在没有实现严格模式检查的环境中, 你的严格代码仍然可以正常执行.&lt;/p&gt;
&lt;h2 id=&quot;如何使用严格模式&quot;&gt;&lt;a href=&quot;#如何使用严格模式&quot; class=&quot;headerlink&quot; title=&quot;如何使用严格模式?&quot;&gt;&lt;/a&gt;如何使用严格模式?&lt;/h2&gt;&lt;p&gt;在程序中使用严格模式的方式是在程序中的最开始增加一个特定的字符串字面量.&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你在一个文件的顶部加入这个特定的字符串, 则表示该文件的所有内容将始终使用严格模式执行.&lt;/p&gt;
&lt;p&gt;如果你只想在一个函数体内使用严格模式, 则在该函数体内的最开始处(顶部)加入这句指令.&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用字符串字面量来实现严格模式&quot;&gt;&lt;a href=&quot;#为什么要使用字符串字面量来实现严格模式&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用字符串字面量来实现严格模式?&quot;&gt;&lt;/a&gt;为什么要使用字符串字面量来实现严格模式?&lt;/h2&gt;&lt;p&gt;单独使用一个特定的字符串字面量来作为指令语法在语言里看起来确实相当怪异, 但是他有一个最大的好处是向后兼容. 我们来看一下它为什么能够向后兼容. 我们都知道在js 中解释执行一个字符串字面量是没有任何副作用的, 这句话什么意思呢？ 比如说你在 chrome 浏览器控制台里面输入一个字符串字面量, 解释器只会返回一个同样的字符串, 除此之外不会发生任何事情, 这就使得即使ES3引擎不支持&lt;code&gt;严格模式&lt;/code&gt;, 但依然能够无伤大雅的解释和执行这条指令. ES3 引擎在解析完改字符串之后, 会立即将该值丢弃. 因此, 尽管旧的引擎不支持严格模式, 但依然能够正常运行.&lt;/p&gt;
&lt;p&gt;但需要注意的是: 尽管不会抛出错误, 但是旧的引擎不会进行任何的严格检查模式, 因此如果要使用严格模式, 你应该总是在完全兼容ES5的环境中测试严格代码.&lt;/p&gt;
&lt;h2 id=&quot;使用严格模式需要注意哪些问题&quot;&gt;&lt;a href=&quot;#使用严格模式需要注意哪些问题&quot; class=&quot;headerlink&quot; title=&quot;使用严格模式需要注意哪些问题?&quot;&gt;&lt;/a&gt;使用严格模式需要注意哪些问题?&lt;/h2&gt;&lt;p&gt;我们在上面已经说过, &lt;code&gt;use strict&lt;/code&gt; 指令需要写在脚本或者函数的顶部, 因为该指令只有在写在顶部才能生效. 这就使得我们在使用的时候需要注意一下这里有个小坑. 这个坑是什么呢？ &lt;/p&gt;
&lt;p&gt;举个例子, 我们在开发大型功能的时候, 开发过程中会使用多个独立的脚本文件, 但是在部署到生产环境的时候出于性能优化的目的, 需要将多个脚本连接成一个单一的文件. 比如说, 脚本1 运行于严格模式下,&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// file1.js &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSth&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是有另外一个同事写了一个脚本2运行于非严格模式下:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// file2.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doOtherSth&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;param&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt; = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么, 我们该怎么连接这两个文件呢？ 如果我们以 file1.js 开始, 那么连接后的代码将运行于严格模式下, 但是由于 file2 中的一些操作会在严格模式下抛出错误, 导致我们的程序无法正常运行.如果我们以 file2.js 开始, 那么连接后的代码将运行于非严格模式下, 因为我们前面已经讲过该指令只有在写在顶部才能生效. 似乎怎样都不太合适.&lt;/p&gt;
&lt;p&gt;那么如何解决这个问题呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在项目中坚持只使用&lt;code&gt;严格模式&lt;/code&gt;或者只使用&lt;code&gt;非严格模式&lt;/code&gt;, 并且不要将使用&lt;code&gt;严格模式&lt;/code&gt;和不使用&lt;code&gt;严格模式&lt;/code&gt;的文件进行打包构建. O(∩_∩)O哈哈~这样就不会有问题了嘛.&lt;/li&gt;
&lt;li&gt;我们上面说过, 如果你只想在一个函数体内使用严格模式, 则在该函数体内的最开始处(顶部)加入这句指令. 我们可以利用这个特性, 将每一个脚本文件里面的代码包裹在一个立即执行的函数表达式内, 这样即使两种模式的文件打包在一起, 依然能够按照我们的期望进行工作. 例如:&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// file1.js &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &quot;use strict&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSth&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// file2.js &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doOtherSth&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然了, 上面这样的做法会导致这些文件的内容不会在全局作用域内解释, 这就导致我们通过 &lt;code&gt;var&lt;/code&gt; 和 &lt;code&gt;function&lt;/code&gt; 声明的变量不会视为全局变量. 不过这刚好对我们来说也是一个很好的特性. 因此就放心大胆的使用吧, 去吧, 皮卡丘.&lt;/p&gt;
&lt;h2 id=&quot;最佳实践&quot;&gt;&lt;a href=&quot;#最佳实践&quot; class=&quot;headerlink&quot; title=&quot;最佳实践&quot;&gt;&lt;/a&gt;最佳实践&lt;/h2&gt;&lt;p&gt;上面的方法2看起来是极好的, 并且我们可以通过&lt;code&gt;自动化构建工具&lt;/code&gt;为我们的脚本文件上添加如上代码. 但是如果我们想要编写一个通用的库, 使其可以在尽可能多的环境中正常工作, 我们不能假设脚本文件一定会被构建工具置于一个立即执行的函数中, 也不能假设客户端代码一定处于严格模式或是非严格模式中. 所以为了获得最佳效果, 我们应该总是在严格模式下编写代码, 并显式的将其包裹在启用了严格模式的立即执行函数中, 而不是依靠构建工具来实现.&lt;/p&gt;
&lt;h2 id=&quot;结语&quot;&gt;&lt;a href=&quot;#结语&quot; class=&quot;headerlink&quot; title=&quot;结语&quot;&gt;&lt;/a&gt;结语&lt;/h2&gt;&lt;p&gt;“严格模式”体现了Javascript更合理、更安全、更严谨的发展方向. 为了达到更为普遍的兼容性, 我们应该总是在严格模式下编写代码.&lt;/p&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是严格模式？&quot;&gt;&lt;a href=&quot;#什么是严格模式？&quot; class=&quot;headerlink&quot; title=&quot;什么是严格模式？&quot;&gt;&lt;/a&gt;什么是严格模式？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;严格模式&lt;/code&gt; 是 ECMAScript 5 中引入的一种将更好的错误检查引入代码中的方法, 现在已经被大多浏览器实现. 顾名思义，这种模式使得Javascript在更严格的条件下运行.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>春风十里 不如你</title>
    <link href="http://blog.sqrtthree.com/2015/10/05/without-you-im-nothing/"/>
    <id>http://blog.sqrtthree.com/2015/10/05/without-you-im-nothing/</id>
    <published>2015-10-04T16:21:41.000Z</published>
    <updated>2015-10-04T16:21:41.000Z</updated>
    
    <content type="html">&lt;p&gt;每一个失恋了的人, 都是中了一记玄冥神掌.&lt;/p&gt;
&lt;p&gt;这掌力在你每一次听到情歌的时候发作, 歌词句句都是毒素攻心. 这掌力在每一次夜深的时候发作, 无孔不入的孤独直入骨髓, 痛的满地打滚.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;是的, 你不得不承认, 兜兜转转, 到最后, 你终于还是把她弄丢了.&lt;/p&gt;
&lt;p&gt;这些日子, 你天天梦到她, 常常半夜醒来不知道自己身在何处, 常常早上望着空荡荡的枕边失落. &lt;/p&gt;
&lt;p&gt;现在, 你都害怕再梦到她了吧.&lt;/p&gt;
&lt;p&gt;夜深的时候, 你总是望着窗外发呆, 你幻想联系她后的复合, 你幻想联系她后的决裂, 你幻想如果当初没有分开现在会如何, 你幻想此时此刻她正在干嘛.&lt;/p&gt;
&lt;p&gt;可是, 你也只能够是想想.&lt;/p&gt;
&lt;p&gt;因为我知道, 你不敢, 也不能联系她.&lt;/p&gt;
&lt;p&gt;说来可笑, 你会把联系她视为一次定输赢的赌博. 你想赌, 但你不敢赌, 因为你知道自己会输. &lt;/p&gt;
&lt;p&gt;输了, 以后连想她的权利都没有了.&lt;/p&gt;
&lt;p&gt;你不是没有想过放弃. 你今天决定放弃她了, 可是坚持不了几天, 又不甘心放弃想把她追回来.&lt;/p&gt;
&lt;p&gt;周而复始, 永远下不了决心到底是放弃还是坚持.&lt;/p&gt;
&lt;p&gt;熬过了无数个痛苦的黑夜, 你不再嘴上逞强, 你终于承认了你爱她, 即使分开了, 你对她的爱却有增无减.&lt;/p&gt;
&lt;p&gt;你相信了念念不忘必有回响这样的段子.&lt;/p&gt;
&lt;p&gt;你相信梦见她证明你俩缘分未尽这样的迷信.&lt;/p&gt;
&lt;p&gt;你相信打喷嚏突然恍惚是因为她正在想你这样的习惯.&lt;/p&gt;
&lt;p&gt;是的, 即便你之前觉得这样多可笑, 这一刻, 你都会强行认为是跟你有关.&lt;/p&gt;
&lt;p&gt;可惜的是,&lt;/p&gt;
&lt;p&gt;你的想念没有声音, 恐怕她是听不到了.&lt;/p&gt;
&lt;p&gt;你的想念没有频率, 也许她也收不到了.&lt;/p&gt;
&lt;p&gt;你的想念没有路径, 所以只能你自己知道了.&lt;/p&gt;
&lt;p&gt;我知道你好想做一万件事来证明你很想她.&lt;/p&gt;
&lt;p&gt;但是很可惜你一件也为她做不了.&lt;/p&gt;
&lt;p&gt;最遗憾的事大概就是,&lt;/p&gt;
&lt;p&gt;你有为她做一万件事的决心, 却没有能为她做一件事的机会了.&lt;/p&gt;
&lt;p&gt;而你唯一能做的也只能是在这平淡无味的生活间隙里，&lt;/p&gt;
&lt;p&gt;想一想此时此刻的她正在做什么了.&lt;/p&gt;
&lt;p&gt;失去了她, 你觉得, 整个世界都空旷旷的. 你觉得, 整个世界都变成了黑白的, 再也没有了色彩.&lt;/p&gt;
&lt;p&gt;孤独, 就像是那暴风雨一样骤然而来, 让你触不及防, 狼狈不堪.&lt;/p&gt;
&lt;p&gt;可是, 最可怕的不是孤独本身, 而是没有人知道你孤独.&lt;/p&gt;
&lt;p&gt;你喝的烂醉, 最后还是得一个人爬回床上, 她不会知道了.&lt;/p&gt;
&lt;p&gt;你生病了, 最后还是得一个人滚去医院, 她不会陪你了.&lt;/p&gt;
&lt;p&gt;你萎靡不振, 最后在荒度的日子里把自己淬炼成了一个傻逼, 她不会出现了.&lt;/p&gt;
&lt;p&gt;是啊, 以后的路上, 就只有你自己了. 她, 永远都不会出现了.&lt;/p&gt;
&lt;p&gt;我知道你放不下, 我知道你不甘心,&lt;/p&gt;
&lt;p&gt;可是, 又能怎么办呢？&lt;/p&gt;
&lt;p&gt;只希望你能在未来的日子里沉迷于学习无法自拔, 习得九阳神功, 破了这寒毒.&lt;/p&gt;
&lt;p&gt;终有一天, &lt;/p&gt;
&lt;p&gt;你会明白, 有些事情, 只适合珍藏.&lt;/p&gt;
&lt;p&gt;终有一天,&lt;/p&gt;
&lt;p&gt;你回过头, 再看到这篇文章的时候,&lt;/p&gt;
&lt;p&gt;你会对我说:&lt;/p&gt;
&lt;p&gt;你看这个人, 真的好像一条狗耶.&lt;/p&gt;
&lt;hr&gt;
&lt;embed src=&quot;http://music.163.com/style/swf/widget.swf?sid=26508242&amp;type=2&amp;auto=1&amp;width=320&amp;height=66&quot; width=&quot;340&quot; height=&quot;86&quot; allownetworking=&quot;all&quot;&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;每一个失恋了的人, 都是中了一记玄冥神掌.&lt;/p&gt;
&lt;p&gt;这掌力在你每一次听到情歌的时候发作, 歌词句句都是毒素攻心. 这掌力在每一次夜深的时候发作, 无孔不入的孤独直入骨髓, 痛的满地打滚.&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.sqrtthree.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>谈谈我理解的API接口设计</title>
    <link href="http://blog.sqrtthree.com/2015/09/08/api/"/>
    <id>http://blog.sqrtthree.com/2015/09/08/api/</id>
    <published>2015-09-08T05:03:43.000Z</published>
    <updated>2015-09-08T05:03:43.000Z</updated>
    
    <content type="html">&lt;p&gt;随着web 技术的发展, 前端技术在 web 开发中占着越来越重的比重. 尤其是最近出现的 AngularJS/React 等框架的出现, 让开发 SPA 应用类的开发方式产生了巨大的革新. 在开发过程中, 前后端的数据交互也变得越来越密切. 再加上层出不穷的各种终端设备, 我们迫切需要一个统一的 api 接口规范设计. 主要参考了Github 的 API 设计规范, 我按照自己的理解总结了一下.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;关于协议&quot;&gt;&lt;a href=&quot;#关于协议&quot; class=&quot;headerlink&quot; title=&quot;关于协议&quot;&gt;&lt;/a&gt;关于协议&lt;/h2&gt;&lt;p&gt;为了确保通信安全, 建议API与用户的通信协议，总是使用HTTPS协议.&lt;/p&gt;
&lt;h2 id=&quot;关于域名&quot;&gt;&lt;a href=&quot;#关于域名&quot; class=&quot;headerlink&quot; title=&quot;关于域名&quot;&gt;&lt;/a&gt;关于域名&lt;/h2&gt;&lt;p&gt;为了提高可维护性, 建议尽量将API部署在专用域名之下. 如 &lt;code&gt;https://api.github.com&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于版本号&quot;&gt;&lt;a href=&quot;#关于版本号&quot; class=&quot;headerlink&quot; title=&quot;关于版本号&quot;&gt;&lt;/a&gt;关于版本号&lt;/h2&gt;&lt;p&gt;建议将 API 的版本号放入 URL 中, 如&lt;code&gt;https://api.github.com/v1/&lt;/code&gt;. 但是 Github 似乎采用了另外一种方案, 就是将版本号放在了HTTP头信息中, &lt;a href=&quot;https://developer.github.com/v3/media/#request-specific-version&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;看这里看这里&lt;/a&gt;. 但个人感觉不是太直观. 但前端在请求中可以省略3个字符. &lt;em&gt;(:з」∠)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于请求路径&quot;&gt;&lt;a href=&quot;#关于请求路径&quot; class=&quot;headerlink&quot; title=&quot;关于请求路径&quot;&gt;&lt;/a&gt;关于请求路径&lt;/h2&gt;&lt;p&gt;RESTful API是目前比较成熟的一套互联网应用程序的API设计理论. 在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词. 并且建议所用的名词和数据库中的集合名相对应. 并且在获取一组数据/集合的时候, 应统一使用复数形式.&lt;/p&gt;
&lt;p&gt;比如, 需要请求所有的用户信息. 可以设计为这样: &lt;code&gt;https://api.example.com/v1/users&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;关于请求方法&quot;&gt;&lt;a href=&quot;#关于请求方法&quot; class=&quot;headerlink&quot; title=&quot;关于请求方法&quot;&gt;&lt;/a&gt;关于请求方法&lt;/h2&gt;&lt;p&gt;常用的 HTTP请求方法有5个. 分别如下:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Method&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从服务器取出资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;在服务器新建一个资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;用于完整的替换资源或者创建指定身份的资源(更新资源)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PATCH&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;用于局部更新资源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;用于删除某个资源&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;比如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET &lt;code&gt;/users&lt;/code&gt; 列出所有的用户&lt;/li&gt;
&lt;li&gt;GET &lt;code&gt;/users/:ID&lt;/code&gt; 列出指定用户的信息&lt;/li&gt;
&lt;li&gt;POST &lt;code&gt;/users&lt;/code&gt; 新建一个用户&lt;/li&gt;
&lt;li&gt;DELETE &lt;code&gt;/users/:ID&lt;/code&gt; 删除指定的用户&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也可以使用语义化的路径方式进行分类, 如:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET &lt;code&gt;/users&lt;/code&gt; 列出所有的用户&lt;/li&gt;
&lt;li&gt;POST &lt;code&gt;/users/create&lt;/code&gt; 创建一个新用户&lt;/li&gt;
&lt;li&gt;POST &lt;code&gt;/users/update&lt;/code&gt; 更新信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;关于常见的请求参数&quot;&gt;&lt;a href=&quot;#关于常见的请求参数&quot; class=&quot;headerlink&quot; title=&quot;关于常见的请求参数&quot;&gt;&lt;/a&gt;关于常见的请求参数&lt;/h2&gt;&lt;p&gt;比如在数据过多, 需要对数据进行分页请求的时候, 我们应该统一 API 请求参数. 常见的有这些.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;limit=10&lt;/code&gt; 指定返回记录的数量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offset=10&lt;/code&gt; 指定返回记录的开始位置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;page=2&amp;amp;per_page=100&lt;/code&gt; 指定第几页，以及每页的记录数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sortby=name&amp;amp;order=asc&lt;/code&gt; 指定返回结果按照哪个属性排序，以及排序顺序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;animal_type_id=1&lt;/code&gt; 指定筛选条件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;关于返回值&quot;&gt;&lt;a href=&quot;#关于返回值&quot; class=&quot;headerlink&quot; title=&quot;关于返回值&quot;&gt;&lt;/a&gt;关于返回值&lt;/h2&gt;&lt;p&gt;返回值的数据格式应严格按照 JSON 规范.JSON（JavaScript Object Notation）是一种轻量级，基于文本，语言无关的数据交换格式。其包括了基本数据类型4种和复合数据类型2种，共6种数据类型.&lt;/p&gt;
&lt;p&gt;首先. 基本数据类型有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number可以表示整数和浮点数。&lt;/li&gt;
&lt;li&gt;Boolean可以表示真假，值为true或false。&lt;/li&gt;
&lt;li&gt;String表示一个字符串。&lt;/li&gt;
&lt;li&gt;Null通常用于表示空对象. 输出的数据结构中空字段的值一律为 null.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;复合数据类型Object是无序的集合，以键值对的方式保持数据。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;必须根据操作和状态设置相应的 HTTP 响应状态码. 具体可参考&lt;a href=&quot;http://tools.ietf.org/html/rfc7231#page-49&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tools.ietf.org/html/rfc7231#page-49&lt;/a&gt;、&lt;a href=&quot;http://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Content-Type字段定义了响应体的类型. 一般情况下，浏览器会根据该类型对内容进行正确的处理。推荐设置为”text/javascript”或”text/plain”. 并且通常需要指定一个字符集, 如果字符编码为UTF-8时，可以不指定字符集&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回的数据包含在http响应体中。数据 必须(MUST) 是一个JSON Object。该Object可能包含3个字段：status，statusInfo，data。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;status字段必须是一个不小于0的JSON Number整数，表示请求的状态. 0：表示server端理解了请求，成功处理并返回. 非0：表示发生错误, 可以根据错误类型扩展错误码.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;statusInfo字段通常是一个JSON String或JSON Object，表示除了请求状态外server端想要对status做出的说明，使client端能够获取更多信息进行后续处理. 这个字段属于可选字段.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;data 字段可以是任意 JSON 类型, 表示请求返回的数据主体. 数据主体data包含了在请求成功时有意义的数据.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例如: &lt;/p&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 请求成功&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;statusInfo&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;请求成功&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;data&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Tom&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;ag&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 请求失败&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;statusInfo&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;权限不足&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 或者是复杂类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;statusInfo&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;text&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;参数错误&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;parameters&#39;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;email&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;电子邮件格式不正确&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;关于文档规范&quot;&gt;&lt;a href=&quot;#关于文档规范&quot; class=&quot;headerlink&quot; title=&quot;关于文档规范&quot;&gt;&lt;/a&gt;关于文档规范&lt;/h2&gt;&lt;p&gt;可参考 github 的文档写作形式.&lt;/p&gt;
&lt;p&gt;1、 请求信息&lt;br&gt;&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GET &lt;span class=&quot;string&quot;&gt;&#39;/users&#39;&lt;/span&gt; 获取用户列表 &lt;span class=&quot;comment&quot;&gt;// 请求方式, 请求路径, 方法描述&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2、 请求参数&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;参数一&lt;/td&gt;
&lt;td&gt;参数类型&lt;/td&gt;
&lt;td&gt;参数描述&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;3、 Response 响应结果示例&lt;br&gt;给出不同状态的响应结果示例, 便于接口对接和调试.&lt;br&gt;&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;status&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;statusInfo&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;请求成功&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;data&lt;/span&gt;: [&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;随着web 技术的发展, 前端技术在 web 开发中占着越来越重的比重. 尤其是最近出现的 AngularJS/React 等框架的出现, 让开发 SPA 应用类的开发方式产生了巨大的革新. 在开发过程中, 前后端的数据交互也变得越来越密切. 再加上层出不穷的各种终端设备, 我们迫切需要一个统一的 api 接口规范设计. 主要参考了Github 的 API 设计规范, 我按照自己的理解总结了一下.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="api" scheme="http://blog.sqrtthree.com/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>解决 Javascript 中 atob 方法解码中文字符乱码问题</title>
    <link href="http://blog.sqrtthree.com/2015/08/29/utf8-to-b64/"/>
    <id>http://blog.sqrtthree.com/2015/08/29/utf8-to-b64/</id>
    <published>2015-08-29T11:46:53.000Z</published>
    <updated>2015-08-29T11:46:53.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;今天在写一个通过 GitHub API 获取README 的功能的时候, 由于返回值为 Base64 编码, 我在尝试用 js 转换为 UFT-8 的时候发现中文会导致乱码. 在这里总结一下相关的知识点吧.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;首先-为什么要编码？&quot;&gt;&lt;a href=&quot;#首先-为什么要编码？&quot; class=&quot;headerlink&quot; title=&quot;首先, 为什么要编码？&quot;&gt;&lt;/a&gt;首先, 为什么要编码？&lt;/h2&gt;&lt;p&gt;由于一些网络通讯协议的限制, 又或者是出于信息加密的目的, 我们就需要将原信息转换为 base64 编码,然后才能进行传输.例如，发送某些含有 ASCII 码表中 0 到 31 之间的控制字符的数据。&lt;/p&gt;
&lt;p&gt;通常的方法是通过 &lt;code&gt;window.btoa()&lt;/code&gt; 方法对源数据进行编码, 然后接收方使用 &lt;code&gt;window.atob()&lt;/code&gt; 方法对其进行解码, 从而得到原数据.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;window-btoa-与-window-atob-不支持中文&quot;&gt;&lt;a href=&quot;#window-btoa-与-window-atob-不支持中文&quot; class=&quot;headerlink&quot; title=&quot;window.btoa 与 window.atob 不支持中文&quot;&gt;&lt;/a&gt;window.btoa 与 window.atob 不支持中文&lt;/h2&gt;&lt;p&gt;但是这种方法存在的问题是:&lt;code&gt;window.btoa()&lt;/code&gt; 不支持中文, &lt;code&gt;window.atob()&lt;/code&gt;转换含有中文的 base64编码的时候中文部分会变为乱码.详情如下:&lt;/p&gt;
&lt;p&gt;我们在 bash 终端下先得到『中文』这两个字的 base64 编码&lt;/p&gt;
&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ echo 中文 &lt;span class=&quot;string&quot;&gt;| base64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;Lit5paHCg==&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们在 Chrome console 里面通过 &lt;code&gt;window.atob&lt;/code&gt; 进行解码, 结果如下&lt;/p&gt;
&lt;figure class=&quot;highlight coffeescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.atob(&lt;span class=&quot;string&quot;&gt;&#39;5Lit5paHCg==&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;ä¸­æ&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;继续在 Chrome console 里面执行 &lt;code&gt;window.btoa&lt;/code&gt; 编码, 结果报错.&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; window.btoa(&#39;中文&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; Uncaught DOMException: Failed to&lt;span class=&quot;built_in&quot;&gt; execute &lt;/span&gt;&#39;btoa&#39; on &#39;Window&#39;: The string to be encoded contains characters outside of the Latin1 range.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;经查资料发现, &lt;code&gt;btoa&lt;/code&gt; 方法仅支持 ASCII 编码.&lt;/p&gt;
&lt;h2 id=&quot;借助-encodeURIComponent-和-decodeURIComponent-转义中文字符&quot;&gt;&lt;a href=&quot;#借助-encodeURIComponent-和-decodeURIComponent-转义中文字符&quot; class=&quot;headerlink&quot; title=&quot;借助 encodeURIComponent 和 decodeURIComponent 转义中文字符&quot;&gt;&lt;/a&gt;借助 encodeURIComponent 和 decodeURIComponent 转义中文字符&lt;/h2&gt;&lt;p&gt;由于&lt;code&gt;btoa&lt;/code&gt; 方法仅支持 ASCII 编码, 我们在转换中文的时候就需要先将中文转换为ASCII字符序列，再通过 btoa 进行 base64 编码, 从而实现『曲线救国』。&lt;/p&gt;
&lt;p&gt;转换ASCII字符序列的方法我们可以借助于 &lt;code&gt;encodeURIComponent&lt;/code&gt; 和 &lt;code&gt;decodeURIComponent&lt;/code&gt; 这两个方法完成. &lt;/p&gt;
&lt;p&gt;编码:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.btoa(&lt;span class=&quot;built_in&quot;&gt;encodeURIComponent&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;中文&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;JUU0JUI4JUFEJUU2JTk2JTg3&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;解码:&lt;br&gt;&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; decodeURIComponent(&lt;span class=&quot;name&quot;&gt;window&lt;/span&gt;.atob(&#39;JUU0JUI4JUFEJUU2JTk2JTg3&#39;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;中文&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;GitHub-API-获取-README-的中文乱码问题&quot;&gt;&lt;a href=&quot;#GitHub-API-获取-README-的中文乱码问题&quot; class=&quot;headerlink&quot; title=&quot;GitHub API 获取 README 的中文乱码问题&quot;&gt;&lt;/a&gt;GitHub API 获取 README 的中文乱码问题&lt;/h2&gt;&lt;p&gt;但是通过上面的解码方式解码 github 的 readme 数据的时候仍旧是乱码, 经过查找相关资料发现了Base64的编码与解码转的最优方案是下面这种:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;utf8_to_b64&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;str&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.btoa(&lt;span class=&quot;built_in&quot;&gt;unescape&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;encodeURIComponent&lt;/span&gt;(str)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;b64_to_utf8&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;str&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;decodeURIComponent&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;escape&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.atob(str)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Usage:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;utf8_to_b64(&lt;span class=&quot;string&quot;&gt;&#39;✓ à la mode&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// JTI1dTI3MTMlMjUyMCUyNUUwJTI1MjBsYSUyNTIwbW9kZQ==&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b64_to_utf8(&lt;span class=&quot;string&quot;&gt;&#39;JTI1dTI3MTMlMjUyMCUyNUUwJTI1MjBsYSUyNTIwbW9kZQ==&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// &quot;✓ à la mode&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;utf8_to_b64(&lt;span class=&quot;string&quot;&gt;&#39;I \u2661 Unicode!&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// SSUyNTIwJTI1dTI2NjElMjUyMFVuaWNvZGUlMjUyMQ==&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b64_to_utf8(&lt;span class=&quot;string&quot;&gt;&#39;SSUyNTIwJTI1dTI2NjElMjUyMFVuaWNvZGUlMjUyMQ==&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// &quot;I ♡ Unicode!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过上面的这种方法去解析 github 的数据的时候, 发现中文能够正常显示了. 显然 github 也是采用了这种方案.&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今天在写一个通过 GitHub API 获取README 的功能的时候, 由于返回值为 Base64 编码, 我在尝试用 js 转换为 UFT-8 的时候发现中文会导致乱码. 在这里总结一下相关的知识点吧.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;首先-为什么要编码？&quot;&gt;&lt;a href=&quot;#首先-为什么要编码？&quot; class=&quot;headerlink&quot; title=&quot;首先, 为什么要编码？&quot;&gt;&lt;/a&gt;首先, 为什么要编码？&lt;/h2&gt;&lt;p&gt;由于一些网络通讯协议的限制, 又或者是出于信息加密的目的, 我们就需要将原信息转换为 base64 编码,然后才能进行传输.例如，发送某些含有 ASCII 码表中 0 到 31 之间的控制字符的数据。&lt;/p&gt;
&lt;p&gt;通常的方法是通过 &lt;code&gt;window.btoa()&lt;/code&gt; 方法对源数据进行编码, 然后接收方使用 &lt;code&gt;window.atob()&lt;/code&gt; 方法对其进行解码, 从而得到原数据.&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>前端开发模板引擎 -- Jade之神奇的 mixins 和模板继承</title>
    <link href="http://blog.sqrtthree.com/2015/08/20/jade-04/"/>
    <id>http://blog.sqrtthree.com/2015/08/20/jade-04/</id>
    <published>2015-08-20T08:04:18.000Z</published>
    <updated>2015-08-20T08:04:18.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;文章首发于前端乱炖社区, 现在搬迁过来了. &lt;a href=&quot;http://www.html-js.com/article/2596&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.html-js.com/article/2596&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1、神奇的-mixins&quot;&gt;&lt;a href=&quot;#1、神奇的-mixins&quot; class=&quot;headerlink&quot; title=&quot;1、神奇的 mixins&quot;&gt;&lt;/a&gt;1、神奇的 &lt;code&gt;mixins&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;想必有 &lt;code&gt;less&lt;/code&gt; &amp;amp; &lt;code&gt;sass&lt;/code&gt; 经验的同学对 &lt;code&gt;mixins&lt;/code&gt; 一定都不陌生了，&lt;code&gt;mixins&lt;/code&gt; 呢，其实就是方便对一堆代码块的重复利用。在 &lt;code&gt;Jade&lt;/code&gt; 里面当然也少不了代码块的复用咯~~&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;code&gt;mixins&lt;/code&gt; 的定义很简单，就只需要 &lt;code&gt;mixin 代码块名字&lt;/code&gt; 即可&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mixin demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; this is &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; demo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;调用方式就更简单了，我们需要这样 &lt;code&gt;+代码块名字&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;addition&quot;&gt;+demo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;输出结果非常理想&lt;br&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p&amp;gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; a demo&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;什么？你说这都是只能用于内容固定的代码块？没关系，我们来看看内容不固定的时候应该怎么办&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mixin info(name, skills)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; my name is #&amp;#123;name&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.skills-box&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    each skill &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; skills&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt; #&amp;#123;skill&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+info(&lt;span class=&quot;string&quot;&gt;&#39;sqrtthree&#39;&lt;/span&gt;,[&lt;span class=&quot;string&quot;&gt;&#39;html&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;css&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;javascript&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;nodejs&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;编译结果如下&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;my name is sqrtthree&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;skills-box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;html&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;css&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;javascript&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;nodejs&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;什么？你还想要嵌套的 &lt;code&gt;mixins&lt;/code&gt;，╮(╯▽╰)╭  怎么这么多事。。&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mixin info(name, skills)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; my name is #&amp;#123;name&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.skills-box&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    each skill &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; skills&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt; #&amp;#123;skill&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mixin developersInfo(developer)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;h2&lt;/span&gt; #&amp;#123;developer.name&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  +info(developer&lt;span class=&quot;selector-class&quot;&gt;.name&lt;/span&gt;, developer.skills)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+developersInfo(&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;sqrtthree&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;skills&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&#39;html&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;css&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;javascript&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;nodejs&#39;&lt;/span&gt;]&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;编译结果是这个样子的&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;sqrtthree&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;my name is sqrtthree&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;skills-box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;html&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;css&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;javascript&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;nodejs&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;那如果我们遇到不定参的问题呢&lt;br&gt;&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;mixin&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;info&lt;/span&gt;(className, ...skills)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ul(class=&lt;span class=&quot;string&quot;&gt;&#39;#&amp;#123;className&amp;#125;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    each skill in skills&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      li &lt;span class=&quot;comment&quot;&gt;#&amp;#123;skill&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;span class=&quot;literal&quot;&gt;info&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;list&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;html&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;css&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;javascript&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;nodejs&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;我们来看编译结果&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;list&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;html&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;css&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;javascript&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;nodejs&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;变量都能传递了，那属性能传递么？&lt;br&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mixin attr(&lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  p(&lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=attributes.&lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;#&amp;#123;text&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+attr(&#39;&lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;&#39;)(&lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;tips&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;结果如下：&lt;br&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;tips&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;属性传递的时候还有一个语法糖呢。&lt;br&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mixin attr(&lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  p&amp;amp;attributes(attributes) &lt;span class=&quot;comment&quot;&gt;#&amp;#123;text&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+attr(&#39;demo&#39;)(&lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;tips&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;j-tips&quot;&lt;/span&gt;, data-&lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;18&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;我们来看编译结果是什么样的&lt;br&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p &lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;j-tips&quot;&lt;/span&gt; data-&lt;span class=&quot;built_in&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;18&quot;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;tips&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mixins&lt;/code&gt; 还有一个高级用法，那就是内联代码块。先上例子&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mixin code(text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; #&amp;#123;text&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; no block.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+code(&lt;span class=&quot;string&quot;&gt;&#39;this is a demo&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; this is &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; block.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;编译结果如下：&lt;br&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p&amp;gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; a demo&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p&amp;gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; a block.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从上面的代码中，我们可以看出，我们在调用&lt;code&gt;+code&lt;/code&gt;的时候给他设置一个代码块 &lt;code&gt;p this is a block&lt;/code&gt;，那么在 &lt;code&gt;mixins&lt;/code&gt; 里面，程序会自动把这个代码块的内容传递给 &lt;code&gt;block&lt;/code&gt; 变量。然后我们可以通过判断进行相应的操作。&lt;/p&gt;
&lt;h2 id=&quot;2、模板的继承&quot;&gt;&lt;a href=&quot;#2、模板的继承&quot; class=&quot;headerlink&quot; title=&quot;2、模板的继承&quot;&gt;&lt;/a&gt;2、模板的继承&lt;/h2&gt;&lt;p&gt;我们在做整站开发时，通常每一个页面的头部和底部都是一样的，之前我们的做法可能是写完一个之后然后不断的复制粘贴，但是现在我们有了 &lt;code&gt;Jade&lt;/code&gt;之后，来看看我们可以怎么做？&lt;br&gt;在 &lt;code&gt;Jade&lt;/code&gt; 里面，我们通过 &lt;code&gt;block&lt;/code&gt; 和 &lt;code&gt;extends&lt;/code&gt; 这两个关键字实现模板之间的继承，一个代码块可以看成是 &lt;code&gt;Jade&lt;/code&gt; 中的一个 &lt;code&gt;block&lt;/code&gt;，我们将在子模板中实现&lt;br&gt;我们先看一个小例子，定义一个简单的代码块&lt;br&gt;&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;demo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  p this &lt;span class=&quot;built_in&quot;&gt;is&lt;/span&gt; a &lt;span class=&quot;built_in&quot;&gt;demo&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;默认情况下，代码块的内容是会被输出的&lt;br&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p&amp;gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; a demo.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;在同一个文件中，我们可以直接通过这种方式进行调用&lt;br&gt;&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;demo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  p this &lt;span class=&quot;built_in&quot;&gt;is&lt;/span&gt; a &lt;span class=&quot;built_in&quot;&gt;demo&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;demo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;demo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;demo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;结果是这样的&lt;br&gt;&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p&amp;gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; a demo.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p&amp;gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; a demo.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p&amp;gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; a demo.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p&amp;gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; a demo.&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;那么如果是不同文件之间，如何进行调用呢？&lt;br&gt;比如我们有一个 &lt;code&gt;layout.jade&lt;/code&gt; 文件，内容是这样的。&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;doctype &lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    title this is &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; demo.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt; demo.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    block cont&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;然后呢，我们有一个 &lt;code&gt;demo.jade&lt;/code&gt;文件是这样的&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;extends layout	&lt;span class=&quot;comment&quot;&gt;// 这里的 layout 指的是需要继承的模板文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;block cont&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;h2&lt;/span&gt; Look, this is &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; demo.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; this is &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; paragraph.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;然后我们通过命令行工具编译 &lt;code&gt;demo.jade&lt;/code&gt; 文件，结果是神奇的&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;this is a demo.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;demo.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;Look, this is a demo.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;this is a paragraph.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;怎么样？是不是觉得很方便呢？&lt;/p&gt;
&lt;p&gt;模板的继承解决了多个文件之间代码复用的问题，其实上面我们提到的页头和页脚我们用模板包含的方式可能更合适一些，下面我们来看一看模板的包含.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;includes&lt;/code&gt; 允许你静态包含一段 &lt;code&gt;Jade&lt;/code&gt;, 或者别的存放在单个文件中的东西比如 &lt;code&gt;css&lt;/code&gt; &lt;code&gt;html&lt;/code&gt;。&lt;br&gt;比如我们有一个 &lt;code&gt;footer.jade&lt;/code&gt; 文件，他里面有着这样的内容&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;div&lt;span class=&quot;selector-id&quot;&gt;#footer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; copyright.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;然后我们在我们的 &lt;code&gt;demo.jade&lt;/code&gt; 文件中这样使用&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;doctype &lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  head&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    title this is &lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; demo.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt; Hello, World.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    include footer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;编译结果是这个样子的&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;this is a demo.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, World.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;footer&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;copyright.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;当然，通过 &lt;code&gt;includes&lt;/code&gt; 引入 &lt;code&gt;css&lt;/code&gt; 代码也是一样的。大家可以尝试一下，我这里就不举例子了。&lt;/p&gt;
&lt;h2 id=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;a href=&quot;#您的鼓励是作者写作最大的动力&quot; class=&quot;headerlink&quot; title=&quot;您的鼓励是作者写作最大的动力&quot;&gt;&lt;/a&gt;您的鼓励是作者写作最大的动力&lt;/h2&gt;&lt;p&gt;如果您认为本网站的文章质量不错，读后觉得收获很大，不妨小额赞助我一下，让我有动力继续写出高质量的文章：我的支付宝账号是 &lt;code&gt;sqrtthree@foxmail.com&lt;/code&gt;, &lt;a href=&quot;http://7xl8me.com1.z0.glb.clouddn.com/alipay.JPG&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击查看二维码&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      写一些我所知道的 jade 语法
    
    </summary>
    
      <category term="技术" scheme="http://blog.sqrtthree.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="jade" scheme="http://blog.sqrtthree.com/tags/jade/"/>
    
  </entry>
  
</feed>
